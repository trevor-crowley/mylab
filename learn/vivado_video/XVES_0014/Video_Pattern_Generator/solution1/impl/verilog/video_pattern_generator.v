// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="video_pattern_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.404500,HLS_SYN_LAT=481201,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=33,HLS_SYN_LUT=196,HLS_VERSION=2019_1}" *)

module video_pattern_generator (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axis_video_V_data_V_din,
        m_axis_video_V_data_V_full_n,
        m_axis_video_V_data_V_write,
        m_axis_video_V_keep_V_din,
        m_axis_video_V_keep_V_full_n,
        m_axis_video_V_keep_V_write,
        m_axis_video_V_strb_V_din,
        m_axis_video_V_strb_V_full_n,
        m_axis_video_V_strb_V_write,
        m_axis_video_V_user_V_din,
        m_axis_video_V_user_V_full_n,
        m_axis_video_V_user_V_write,
        m_axis_video_V_last_V_din,
        m_axis_video_V_last_V_full_n,
        m_axis_video_V_last_V_write,
        m_axis_video_V_id_V_din,
        m_axis_video_V_id_V_full_n,
        m_axis_video_V_id_V_write,
        m_axis_video_V_dest_V_din,
        m_axis_video_V_dest_V_full_n,
        m_axis_video_V_dest_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [23:0] m_axis_video_V_data_V_din;
input   m_axis_video_V_data_V_full_n;
output   m_axis_video_V_data_V_write;
output  [2:0] m_axis_video_V_keep_V_din;
input   m_axis_video_V_keep_V_full_n;
output   m_axis_video_V_keep_V_write;
output  [2:0] m_axis_video_V_strb_V_din;
input   m_axis_video_V_strb_V_full_n;
output   m_axis_video_V_strb_V_write;
output  [0:0] m_axis_video_V_user_V_din;
input   m_axis_video_V_user_V_full_n;
output   m_axis_video_V_user_V_write;
output  [0:0] m_axis_video_V_last_V_din;
input   m_axis_video_V_last_V_full_n;
output   m_axis_video_V_last_V_write;
output  [0:0] m_axis_video_V_id_V_din;
input   m_axis_video_V_id_V_full_n;
output   m_axis_video_V_id_V_write;
output  [0:0] m_axis_video_V_dest_V_din;
input   m_axis_video_V_dest_V_full_n;
output   m_axis_video_V_dest_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axis_video_V_data_V_write;
reg m_axis_video_V_keep_V_write;
reg m_axis_video_V_strb_V_write;
reg m_axis_video_V_user_V_write;
reg m_axis_video_V_last_V_write;
reg m_axis_video_V_id_V_write;
reg m_axis_video_V_dest_V_write;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    m_axis_video_V_data_V_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln15_fu_118_p2;
reg    m_axis_video_V_keep_V_blk_n;
reg    m_axis_video_V_strb_V_blk_n;
reg    m_axis_video_V_user_V_blk_n;
reg    m_axis_video_V_last_V_blk_n;
reg    m_axis_video_V_id_V_blk_n;
reg    m_axis_video_V_dest_V_blk_n;
wire   [9:0] i_fu_112_p2;
reg   [9:0] i_reg_158;
wire    ap_CS_fsm_state2;
wire   [9:0] j_fu_124_p2;
wire    io_acc_block_signal_op36;
reg    ap_block_state3;
reg   [9:0] i_0_reg_83;
reg   [9:0] j_0_reg_95;
wire   [0:0] icmp_ln13_fu_106_p2;
wire   [9:0] or_ln18_fu_130_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_83 <= i_reg_158;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_83 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_106_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_95 <= 10'd0;
    end else if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_95 <= j_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_158 <= i_fu_112_p2;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln13_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_data_V_blk_n = m_axis_video_V_data_V_full_n;
    end else begin
        m_axis_video_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_data_V_write = 1'b1;
    end else begin
        m_axis_video_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_dest_V_blk_n = m_axis_video_V_dest_V_full_n;
    end else begin
        m_axis_video_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_dest_V_write = 1'b1;
    end else begin
        m_axis_video_V_dest_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_id_V_blk_n = m_axis_video_V_id_V_full_n;
    end else begin
        m_axis_video_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_id_V_write = 1'b1;
    end else begin
        m_axis_video_V_id_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_keep_V_blk_n = m_axis_video_V_keep_V_full_n;
    end else begin
        m_axis_video_V_keep_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_keep_V_write = 1'b1;
    end else begin
        m_axis_video_V_keep_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_last_V_blk_n = m_axis_video_V_last_V_full_n;
    end else begin
        m_axis_video_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_last_V_write = 1'b1;
    end else begin
        m_axis_video_V_last_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_strb_V_blk_n = m_axis_video_V_strb_V_full_n;
    end else begin
        m_axis_video_V_strb_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_strb_V_write = 1'b1;
    end else begin
        m_axis_video_V_strb_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_user_V_blk_n = m_axis_video_V_user_V_full_n;
    end else begin
        m_axis_video_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axis_video_V_user_V_write = 1'b1;
    end else begin
        m_axis_video_V_user_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln13_fu_106_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0)) & (icmp_ln15_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state3 = ((icmp_ln15_fu_118_p2 == 1'd0) & (io_acc_block_signal_op36 == 1'b0));
end

assign i_fu_112_p2 = (i_0_reg_83 + 10'd1);

assign icmp_ln13_fu_106_p2 = ((i_0_reg_83 == 10'd600) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_118_p2 = ((j_0_reg_95 == 10'd800) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op36 = (m_axis_video_V_user_V_full_n & m_axis_video_V_strb_V_full_n & m_axis_video_V_last_V_full_n & m_axis_video_V_keep_V_full_n & m_axis_video_V_id_V_full_n & m_axis_video_V_dest_V_full_n & m_axis_video_V_data_V_full_n);

assign j_fu_124_p2 = (j_0_reg_95 + 10'd1);

assign m_axis_video_V_data_V_din = j_0_reg_95;

assign m_axis_video_V_dest_V_din = 1'd0;

assign m_axis_video_V_id_V_din = 1'd0;

assign m_axis_video_V_keep_V_din = 3'd0;

assign m_axis_video_V_last_V_din = ((j_0_reg_95 == 10'd799) ? 1'b1 : 1'b0);

assign m_axis_video_V_strb_V_din = 3'd0;

assign m_axis_video_V_user_V_din = ((or_ln18_fu_130_p2 == 10'd0) ? 1'b1 : 1'b0);

assign or_ln18_fu_130_p2 = (j_0_reg_95 | i_0_reg_83);

endmodule //video_pattern_generator
