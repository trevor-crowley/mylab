-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity video_pattern_generator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of video_pattern_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "video_pattern_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.228000,HLS_SYN_LAT=480003,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=384,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv24_FF0000 : STD_LOGIC_VECTOR (23 downto 0) := "111111110000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv19_75300 : STD_LOGIC_VECTOR (18 downto 0) := "1110101001100000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_31F : STD_LOGIC_VECTOR (9 downto 0) := "1100011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal m_axis_video_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal m_axis_video_V_data_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_data_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_keep_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_keep_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_keep_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_strb_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_strb_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_strb_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_id_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_id_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_id_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_dest_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_dest_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln14_reg_199 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln14_reg_199_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_102 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_0_reg_113 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_0_reg_124 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln14_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln14_fu_141_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln14_fu_167_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln14_reg_208 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_user_V_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_user_V_reg_213 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_218 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_193_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_i_0_phi_fu_117_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln16_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_1_fu_161_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln16_fu_153_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln21_fu_175_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_data_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_data_V_1_sel_rd <= not(m_axis_video_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_data_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_dest_V_1_sel_rd <= not(m_axis_video_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_dest_V_1_state = ap_const_lv2_2) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_dest_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_2) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_id_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_id_V_1_sel_rd <= not(m_axis_video_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_id_V_1_state = ap_const_lv2_2) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_id_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_id_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_id_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_1) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_2) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_keep_V_1_sel_rd <= not(m_axis_video_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_keep_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_keep_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_1) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_last_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_last_V_1_sel_rd <= not(m_axis_video_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_last_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_last_V_1_sel_wr <= not(m_axis_video_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_last_V_1_state = ap_const_lv2_2) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_last_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_last_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_1) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_2) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_strb_V_1_sel_rd <= not(m_axis_video_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_strb_V_1_state = ap_const_lv2_2) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_strb_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_strb_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_1) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_2) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_user_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_user_V_1_sel_rd <= not(m_axis_video_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_user_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_user_V_1_sel_wr <= not(m_axis_video_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_user_V_1_state = ap_const_lv2_2) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_user_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_user_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_user_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_1) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_2) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_113 <= select_ln14_reg_208;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_113 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_135_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_102 <= add_ln14_fu_141_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_102 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    j_0_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_135_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_0_reg_124 <= j_fu_193_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_124 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln14_reg_199 <= icmp_ln14_fu_135_p2;
                icmp_ln14_reg_199_pp0_iter1_reg <= icmp_ln14_reg_199;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_last_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_last_V_1_payload_A <= tmp_last_V_reg_218;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_last_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_last_V_1_payload_B <= tmp_last_V_reg_218;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_user_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_user_V_1_payload_A <= tmp_user_V_reg_213;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_user_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_user_V_1_payload_B <= tmp_user_V_reg_213;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_135_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln14_reg_208 <= select_ln14_fu_167_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_fu_135_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_218 <= tmp_last_V_fu_187_p2;
                tmp_user_V_reg_213 <= tmp_user_V_fu_181_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, icmp_ln14_fu_135_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln14_fu_135_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln14_fu_135_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln14_1_fu_161_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_117_p4) + unsigned(ap_const_lv10_1));
    add_ln14_fu_141_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_102) + unsigned(ap_const_lv19_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axis_video_V_data_V_1_ack_in, icmp_ln14_reg_199)
    begin
                ap_block_state3_io <= ((icmp_ln14_reg_199 = ap_const_lv1_0) and (m_axis_video_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axis_video_V_data_V_1_ack_in, icmp_ln14_reg_199_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln14_reg_199_pp0_iter1_reg = ap_const_lv1_0) and (m_axis_video_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state)
    begin
                ap_block_state5 <= ((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln14_fu_135_p2)
    begin
        if ((icmp_ln14_fu_135_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_117_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln14_reg_199, i_0_reg_113, select_ln14_reg_208)
    begin
        if (((icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_117_p4 <= select_ln14_reg_208;
        else 
            ap_phi_mux_i_0_phi_fu_117_p4 <= i_0_reg_113;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    icmp_ln14_fu_135_p2 <= "1" when (indvar_flatten_reg_102 = ap_const_lv19_75300) else "0";
    icmp_ln16_fu_147_p2 <= "1" when (j_0_reg_124 = ap_const_lv10_320) else "0";
    j_fu_193_p2 <= std_logic_vector(unsigned(select_ln16_fu_153_p3) + unsigned(ap_const_lv10_1));
    m_axis_video_TDATA <= m_axis_video_V_data_V_1_data_out;

    m_axis_video_TDATA_blk_n_assign_proc : process(m_axis_video_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln14_reg_199, ap_enable_reg_pp0_iter2, icmp_ln14_reg_199_pp0_iter1_reg)
    begin
        if ((((icmp_ln14_reg_199_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_V_data_V_1_state(1);
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDEST <= m_axis_video_V_dest_V_1_data_out;
    m_axis_video_TID <= m_axis_video_V_id_V_1_data_out;
    m_axis_video_TKEEP <= m_axis_video_V_keep_V_1_data_out;
    m_axis_video_TLAST <= m_axis_video_V_last_V_1_data_out;
    m_axis_video_TSTRB <= m_axis_video_V_strb_V_1_data_out;
    m_axis_video_TUSER <= m_axis_video_V_user_V_1_data_out;
    m_axis_video_TVALID <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_data_V_1_ack_in <= m_axis_video_V_data_V_1_state(1);
    m_axis_video_V_data_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_data_V_1_data_out <= ap_const_lv24_FF0000;
    m_axis_video_V_data_V_1_sel <= m_axis_video_V_data_V_1_sel_rd;

    m_axis_video_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_199, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_data_V_1_vld_out <= m_axis_video_V_data_V_1_state(0);
    m_axis_video_V_dest_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_dest_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_dest_V_1_sel <= m_axis_video_V_dest_V_1_sel_rd;

    m_axis_video_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_199, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_dest_V_1_vld_out <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_id_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_id_V_1_data_out <= ap_const_lv1_0;
    m_axis_video_V_id_V_1_sel <= m_axis_video_V_id_V_1_sel_rd;

    m_axis_video_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_199, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_id_V_1_vld_out <= m_axis_video_V_id_V_1_state(0);
    m_axis_video_V_keep_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_keep_V_1_data_out <= ap_const_lv3_0;
    m_axis_video_V_keep_V_1_sel <= m_axis_video_V_keep_V_1_sel_rd;

    m_axis_video_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_199, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_keep_V_1_vld_out <= m_axis_video_V_keep_V_1_state(0);
    m_axis_video_V_last_V_1_ack_in <= m_axis_video_V_last_V_1_state(1);
    m_axis_video_V_last_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_last_V_1_data_out_assign_proc : process(m_axis_video_V_last_V_1_payload_A, m_axis_video_V_last_V_1_payload_B, m_axis_video_V_last_V_1_sel)
    begin
        if ((m_axis_video_V_last_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_B;
        else 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_last_V_1_load_A <= (m_axis_video_V_last_V_1_state_cmp_full and not(m_axis_video_V_last_V_1_sel_wr));
    m_axis_video_V_last_V_1_load_B <= (m_axis_video_V_last_V_1_state_cmp_full and m_axis_video_V_last_V_1_sel_wr);
    m_axis_video_V_last_V_1_sel <= m_axis_video_V_last_V_1_sel_rd;
    m_axis_video_V_last_V_1_state_cmp_full <= '0' when (m_axis_video_V_last_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_199, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_last_V_1_vld_out <= m_axis_video_V_last_V_1_state(0);
    m_axis_video_V_strb_V_1_ack_out <= m_axis_video_TREADY;
    m_axis_video_V_strb_V_1_data_out <= ap_const_lv3_0;
    m_axis_video_V_strb_V_1_sel <= m_axis_video_V_strb_V_1_sel_rd;

    m_axis_video_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_199, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_strb_V_1_vld_out <= m_axis_video_V_strb_V_1_state(0);
    m_axis_video_V_user_V_1_ack_in <= m_axis_video_V_user_V_1_state(1);
    m_axis_video_V_user_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_user_V_1_data_out_assign_proc : process(m_axis_video_V_user_V_1_payload_A, m_axis_video_V_user_V_1_payload_B, m_axis_video_V_user_V_1_sel)
    begin
        if ((m_axis_video_V_user_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_B;
        else 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_user_V_1_load_A <= (m_axis_video_V_user_V_1_state_cmp_full and not(m_axis_video_V_user_V_1_sel_wr));
    m_axis_video_V_user_V_1_load_B <= (m_axis_video_V_user_V_1_state_cmp_full and m_axis_video_V_user_V_1_sel_wr);
    m_axis_video_V_user_V_1_sel <= m_axis_video_V_user_V_1_sel_rd;
    m_axis_video_V_user_V_1_state_cmp_full <= '0' when (m_axis_video_V_user_V_1_state = ap_const_lv2_1) else '1';

    m_axis_video_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln14_reg_199, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln14_reg_199 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            m_axis_video_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_V_user_V_1_vld_out <= m_axis_video_V_user_V_1_state(0);
    or_ln21_fu_175_p2 <= (select_ln16_fu_153_p3 or select_ln14_fu_167_p3);
    select_ln14_fu_167_p3 <= 
        add_ln14_1_fu_161_p2 when (icmp_ln16_fu_147_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_117_p4;
    select_ln16_fu_153_p3 <= 
        ap_const_lv10_0 when (icmp_ln16_fu_147_p2(0) = '1') else 
        j_0_reg_124;
    tmp_last_V_fu_187_p2 <= "1" when (select_ln16_fu_153_p3 = ap_const_lv10_31F) else "0";
    tmp_user_V_fu_181_p2 <= "1" when (or_ln21_fu_175_p2 = ap_const_lv10_0) else "0";
end behav;
