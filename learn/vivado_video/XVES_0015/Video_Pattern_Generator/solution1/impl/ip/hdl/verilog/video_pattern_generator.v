// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="video_pattern_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.228000,HLS_SYN_LAT=480003,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=86,HLS_SYN_LUT=384,HLS_VERSION=2019_1}" *)

module video_pattern_generator (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [23:0] m_axis_video_V_data_V_1_data_out;
reg    m_axis_video_V_data_V_1_vld_in;
wire    m_axis_video_V_data_V_1_vld_out;
wire    m_axis_video_V_data_V_1_ack_in;
wire    m_axis_video_V_data_V_1_ack_out;
reg    m_axis_video_V_data_V_1_sel_rd;
wire    m_axis_video_V_data_V_1_sel;
reg   [1:0] m_axis_video_V_data_V_1_state;
wire   [2:0] m_axis_video_V_keep_V_1_data_out;
reg    m_axis_video_V_keep_V_1_vld_in;
wire    m_axis_video_V_keep_V_1_vld_out;
wire    m_axis_video_V_keep_V_1_ack_out;
reg    m_axis_video_V_keep_V_1_sel_rd;
wire    m_axis_video_V_keep_V_1_sel;
reg   [1:0] m_axis_video_V_keep_V_1_state;
wire   [2:0] m_axis_video_V_strb_V_1_data_out;
reg    m_axis_video_V_strb_V_1_vld_in;
wire    m_axis_video_V_strb_V_1_vld_out;
wire    m_axis_video_V_strb_V_1_ack_out;
reg    m_axis_video_V_strb_V_1_sel_rd;
wire    m_axis_video_V_strb_V_1_sel;
reg   [1:0] m_axis_video_V_strb_V_1_state;
reg   [0:0] m_axis_video_V_user_V_1_data_out;
reg    m_axis_video_V_user_V_1_vld_in;
wire    m_axis_video_V_user_V_1_vld_out;
wire    m_axis_video_V_user_V_1_ack_in;
wire    m_axis_video_V_user_V_1_ack_out;
reg   [0:0] m_axis_video_V_user_V_1_payload_A;
reg   [0:0] m_axis_video_V_user_V_1_payload_B;
reg    m_axis_video_V_user_V_1_sel_rd;
reg    m_axis_video_V_user_V_1_sel_wr;
wire    m_axis_video_V_user_V_1_sel;
wire    m_axis_video_V_user_V_1_load_A;
wire    m_axis_video_V_user_V_1_load_B;
reg   [1:0] m_axis_video_V_user_V_1_state;
wire    m_axis_video_V_user_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_last_V_1_data_out;
reg    m_axis_video_V_last_V_1_vld_in;
wire    m_axis_video_V_last_V_1_vld_out;
wire    m_axis_video_V_last_V_1_ack_in;
wire    m_axis_video_V_last_V_1_ack_out;
reg   [0:0] m_axis_video_V_last_V_1_payload_A;
reg   [0:0] m_axis_video_V_last_V_1_payload_B;
reg    m_axis_video_V_last_V_1_sel_rd;
reg    m_axis_video_V_last_V_1_sel_wr;
wire    m_axis_video_V_last_V_1_sel;
wire    m_axis_video_V_last_V_1_load_A;
wire    m_axis_video_V_last_V_1_load_B;
reg   [1:0] m_axis_video_V_last_V_1_state;
wire    m_axis_video_V_last_V_1_state_cmp_full;
wire   [0:0] m_axis_video_V_id_V_1_data_out;
reg    m_axis_video_V_id_V_1_vld_in;
wire    m_axis_video_V_id_V_1_vld_out;
wire    m_axis_video_V_id_V_1_ack_out;
reg    m_axis_video_V_id_V_1_sel_rd;
wire    m_axis_video_V_id_V_1_sel;
reg   [1:0] m_axis_video_V_id_V_1_state;
wire   [0:0] m_axis_video_V_dest_V_1_data_out;
reg    m_axis_video_V_dest_V_1_vld_in;
wire    m_axis_video_V_dest_V_1_vld_out;
wire    m_axis_video_V_dest_V_1_ack_out;
reg    m_axis_video_V_dest_V_1_sel_rd;
wire    m_axis_video_V_dest_V_1_sel;
reg   [1:0] m_axis_video_V_dest_V_1_state;
reg    m_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln14_reg_199;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln14_reg_199_pp0_iter1_reg;
reg   [18:0] indvar_flatten_reg_102;
reg   [9:0] i_0_reg_113;
reg   [9:0] j_0_reg_124;
wire   [0:0] icmp_ln14_fu_135_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [18:0] add_ln14_fu_141_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] select_ln14_fu_167_p3;
reg   [9:0] select_ln14_reg_208;
wire   [0:0] tmp_user_V_fu_181_p2;
reg   [0:0] tmp_user_V_reg_213;
wire   [0:0] tmp_last_V_fu_187_p2;
reg   [0:0] tmp_last_V_reg_218;
wire   [9:0] j_fu_193_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [9:0] ap_phi_mux_i_0_phi_fu_117_p4;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln16_fu_147_p2;
wire   [9:0] add_ln14_1_fu_161_p2;
wire   [9:0] select_ln16_fu_153_p3;
wire   [9:0] or_ln21_fu_175_p2;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 m_axis_video_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_data_V_1_state = 2'd0;
#0 m_axis_video_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_keep_V_1_state = 2'd0;
#0 m_axis_video_V_strb_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_strb_V_1_state = 2'd0;
#0 m_axis_video_V_user_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_user_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_user_V_1_state = 2'd0;
#0 m_axis_video_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_last_V_1_state = 2'd0;
#0 m_axis_video_V_id_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_id_V_1_state = 2'd0;
#0 m_axis_video_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_dest_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_out == 1'b1) & (m_axis_video_V_data_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_rd <= ~m_axis_video_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)) & (m_axis_video_V_data_V_1_state == 2'd3)) | ((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) | ((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_out == 1'b1) & (m_axis_video_V_dest_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_rd <= ~m_axis_video_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)) & (m_axis_video_V_dest_V_1_state == 2'd3)) | ((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) | ((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_out == 1'b1) & (m_axis_video_V_id_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_rd <= ~m_axis_video_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)) & (m_axis_video_V_id_V_1_state == 2'd3)) | ((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) | ((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_ack_out == 1'b1) & (m_axis_video_V_keep_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_rd <= ~m_axis_video_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)) & (m_axis_video_V_keep_V_1_state == 2'd3)) | ((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_out == 1'b1) & (m_axis_video_V_last_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_rd <= ~m_axis_video_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_in == 1'b1) & (m_axis_video_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_wr <= ~m_axis_video_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)) & (m_axis_video_V_last_V_1_state == 2'd3)) | ((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) | ((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_out == 1'b1) & (m_axis_video_V_strb_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_rd <= ~m_axis_video_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)) & (m_axis_video_V_strb_V_1_state == 2'd3)) | ((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) | ((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_out == 1'b1) & (m_axis_video_V_user_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_rd <= ~m_axis_video_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_in == 1'b1) & (m_axis_video_V_user_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_wr <= ~m_axis_video_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)) & (m_axis_video_V_user_V_1_state == 2'd3)) | ((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) | ((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_113 <= select_ln14_reg_208;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_113 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_102 <= add_ln14_fu_141_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_102 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_124 <= j_fu_193_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_124 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_199 <= icmp_ln14_fu_135_p2;
        icmp_ln14_reg_199_pp0_iter1_reg <= icmp_ln14_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_A == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_A <= tmp_last_V_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_B == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_B <= tmp_last_V_reg_218;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_A == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_A <= tmp_user_V_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_B == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_B <= tmp_user_V_reg_213;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln14_reg_208 <= select_ln14_fu_167_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_fu_135_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_218 <= tmp_last_V_fu_187_p2;
        tmp_user_V_reg_213 <= tmp_user_V_fu_181_p2;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_135_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_199 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_117_p4 = select_ln14_reg_208;
    end else begin
        ap_phi_mux_i_0_phi_fu_117_p4 = i_0_reg_113;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln14_reg_199_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln14_reg_199 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        m_axis_video_TDATA_blk_n = m_axis_video_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_data_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_dest_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_id_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_keep_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_last_V_1_sel == 1'b1)) begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B;
    end else begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_last_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_strb_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_user_V_1_sel == 1'b1)) begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B;
    end else begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_199 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axis_video_V_user_V_1_vld_in = 1'b1;
    end else begin
        m_axis_video_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_135_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_135_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_161_p2 = (ap_phi_mux_i_0_phi_fu_117_p4 + 10'd1);

assign add_ln14_fu_141_p2 = (indvar_flatten_reg_102 + 19'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln14_reg_199 == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln14_reg_199_pp0_iter1_reg == 1'd0) & (m_axis_video_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5 = ((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln14_fu_135_p2 = ((indvar_flatten_reg_102 == 19'd480000) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_147_p2 = ((j_0_reg_124 == 10'd800) ? 1'b1 : 1'b0);

assign j_fu_193_p2 = (select_ln16_fu_153_p3 + 10'd1);

assign m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out;

assign m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out;

assign m_axis_video_TID = m_axis_video_V_id_V_1_data_out;

assign m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out;

assign m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out;

assign m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out;

assign m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out;

assign m_axis_video_TVALID = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state[1'd1];

assign m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_data_V_1_data_out = 24'd16711680;

assign m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd;

assign m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state[1'd0];

assign m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_dest_V_1_data_out = 1'd0;

assign m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd;

assign m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_id_V_1_data_out = 1'd0;

assign m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd;

assign m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state[1'd0];

assign m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_keep_V_1_data_out = 3'd0;

assign m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd;

assign m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state[1'd0];

assign m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state[1'd1];

assign m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full & ~m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_state_cmp_full & m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd;

assign m_axis_video_V_last_V_1_state_cmp_full = ((m_axis_video_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state[1'd0];

assign m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_strb_V_1_data_out = 3'd0;

assign m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd;

assign m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state[1'd0];

assign m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state[1'd1];

assign m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full & ~m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_state_cmp_full & m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd;

assign m_axis_video_V_user_V_1_state_cmp_full = ((m_axis_video_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state[1'd0];

assign or_ln21_fu_175_p2 = (select_ln16_fu_153_p3 | select_ln14_fu_167_p3);

assign select_ln14_fu_167_p3 = ((icmp_ln16_fu_147_p2[0:0] === 1'b1) ? add_ln14_1_fu_161_p2 : ap_phi_mux_i_0_phi_fu_117_p4);

assign select_ln16_fu_153_p3 = ((icmp_ln16_fu_147_p2[0:0] === 1'b1) ? 10'd0 : j_0_reg_124);

assign tmp_last_V_fu_187_p2 = ((select_ln16_fu_153_p3 == 10'd799) ? 1'b1 : 1'b0);

assign tmp_user_V_fu_181_p2 = ((or_ln21_fu_175_p2 == 10'd0) ? 1'b1 : 1'b0);

endmodule //video_pattern_generator
