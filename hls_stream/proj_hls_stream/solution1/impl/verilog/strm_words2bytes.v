// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module strm_words2bytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bytes_out_V_TDATA,
        bytes_out_V_TVALID,
        bytes_out_V_TREADY,
        words_in_V_dout,
        words_in_V_empty_n,
        words_in_V_read,
        bytes_out_len_loc_dout,
        bytes_out_len_loc_empty_n,
        bytes_out_len_loc_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] bytes_out_V_TDATA;
output   bytes_out_V_TVALID;
input   bytes_out_V_TREADY;
input  [31:0] words_in_V_dout;
input   words_in_V_empty_n;
output   words_in_V_read;
input  [13:0] bytes_out_len_loc_dout;
input   bytes_out_len_loc_empty_n;
output   bytes_out_len_loc_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg words_in_V_read;
reg bytes_out_len_loc_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    bytes_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln144_fu_136_p2;
wire    ap_CS_fsm_state3;
reg    words_in_V_blk_n;
wire   [0:0] icmp_ln146_fu_147_p2;
reg    bytes_out_len_loc_blk_n;
reg   [13:0] bytes_out_len_loc_re_reg_179;
reg    ap_block_state1;
wire   [13:0] i_fu_141_p2;
reg   [13:0] i_reg_187;
reg    ap_predicate_op23_read_state2;
wire    regslice_both_bytes_out_V_U_apdone_blk;
reg    ap_block_state2;
reg    ap_block_state2_io;
reg   [13:0] i_0_i_i_reg_103;
reg   [31:0] ap_phi_mux_p_0_1_i_i_phi_fu_117_p4;
wire   [31:0] zext_ln144_fu_127_p1;
reg   [23:0] p_0_0_i_i_fu_80;
wire   [1:0] trunc_ln144_fu_132_p1;
reg   [2:0] ap_NS_fsm;
wire   [7:0] bytes_out_V_TDATA_int;
reg    bytes_out_V_TVALID_int;
wire    bytes_out_V_TREADY_int;
wire    regslice_both_bytes_out_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

regslice_both #(
    .DataWidth( 8 ))
regslice_both_bytes_out_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(bytes_out_V_TDATA_int),
    .vld_in(bytes_out_V_TVALID_int),
    .ack_in(bytes_out_V_TREADY_int),
    .data_out(bytes_out_V_TDATA),
    .vld_out(regslice_both_bytes_out_V_U_vld_out),
    .ack_out(bytes_out_V_TREADY),
    .apdone_blk(regslice_both_bytes_out_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (icmp_ln144_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (bytes_out_V_TREADY_int == 1'b1))) begin
        i_0_i_i_reg_103 <= i_reg_187;
    end else if ((~((ap_start == 1'b0) | (bytes_out_len_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_reg_103 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (bytes_out_len_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytes_out_len_loc_re_reg_179 <= bytes_out_len_loc_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_187 <= i_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (icmp_ln144_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_0_0_i_i_fu_80 <= {{ap_phi_mux_p_0_1_i_i_phi_fu_117_p4[31:8]}};
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (icmp_ln144_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln144_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        if ((icmp_ln146_fu_147_p2 == 1'd0)) begin
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = zext_ln144_fu_127_p1;
        end else if ((icmp_ln146_fu_147_p2 == 1'd1)) begin
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = words_in_V_dout;
        end else begin
            ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_0_1_i_i_phi_fu_117_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (icmp_ln144_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln144_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        bytes_out_V_TDATA_blk_n = bytes_out_V_TREADY_int;
    end else begin
        bytes_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (icmp_ln144_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        bytes_out_V_TVALID_int = 1'b1;
    end else begin
        bytes_out_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytes_out_len_loc_blk_n = bytes_out_len_loc_empty_n;
    end else begin
        bytes_out_len_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (bytes_out_len_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bytes_out_len_loc_read = 1'b1;
    end else begin
        bytes_out_len_loc_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln146_fu_147_p2 == 1'd1) & (icmp_ln144_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        words_in_V_blk_n = words_in_V_empty_n;
    end else begin
        words_in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (ap_predicate_op23_read_state2 == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        words_in_V_read = 1'b1;
    end else begin
        words_in_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (bytes_out_len_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (icmp_ln144_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state2_io) | (regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1))) & (icmp_ln144_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (bytes_out_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (bytes_out_len_loc_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((regslice_both_bytes_out_V_U_apdone_blk == 1'b1) | ((words_in_V_empty_n == 1'b0) & (ap_predicate_op23_read_state2 == 1'b1)));
end

always @ (*) begin
    ap_block_state2_io = ((icmp_ln144_fu_136_p2 == 1'd0) & (bytes_out_V_TREADY_int == 1'b0));
end

always @ (*) begin
    ap_predicate_op23_read_state2 = ((icmp_ln146_fu_147_p2 == 1'd1) & (icmp_ln144_fu_136_p2 == 1'd0));
end

assign bytes_out_V_TDATA_int = ap_phi_mux_p_0_1_i_i_phi_fu_117_p4[7:0];

assign bytes_out_V_TVALID = regslice_both_bytes_out_V_U_vld_out;

assign i_fu_141_p2 = (14'd1 + i_0_i_i_reg_103);

assign icmp_ln144_fu_136_p2 = ((i_0_i_i_reg_103 == bytes_out_len_loc_re_reg_179) ? 1'b1 : 1'b0);

assign icmp_ln146_fu_147_p2 = ((trunc_ln144_fu_132_p1 == 2'd0) ? 1'b1 : 1'b0);

assign trunc_ln144_fu_132_p1 = i_0_i_i_reg_103[1:0];

assign zext_ln144_fu_127_p1 = p_0_0_i_i_fu_80;

endmodule //strm_words2bytes
