-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bytestrm_dwordproc is
port (
    strm_out_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    strm_in_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    strm_len : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    strm_in_V_TVALID : IN STD_LOGIC;
    strm_in_V_TREADY : OUT STD_LOGIC;
    strm_out_V_TVALID : OUT STD_LOGIC;
    strm_out_V_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of bytestrm_dwordproc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "bytestrm_dwordproc,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.375000,HLS_SYN_LAT=746,HLS_SYN_TPT=746,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=391,HLS_SYN_LUT=884,HLS_VERSION=2020_1}";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_ap_start : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_ap_done : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_ap_continue : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_ap_idle : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_ap_ready : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_start_out : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_start_write : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_strm_len_out_din : STD_LOGIC_VECTOR (15 downto 0);
    signal bytestrm_dwordproc_e_U0_strm_len_out_write : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_strm_len_out1_din : STD_LOGIC_VECTOR (15 downto 0);
    signal bytestrm_dwordproc_e_U0_strm_len_out1_write : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_start_out : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal Block_proc_U0_strm_len_read : STD_LOGIC;
    signal Block_proc_U0_bytes_out_len_out_out_din : STD_LOGIC_VECTOR (13 downto 0);
    signal Block_proc_U0_bytes_out_len_out_out_write : STD_LOGIC;
    signal Block_proc_U0_ap_return : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_channel_done_dwords_in_len_cast_l : STD_LOGIC;
    signal dwords_in_len_cast_l_full_n : STD_LOGIC;
    signal strm_bytes2words_U0_ap_start : STD_LOGIC;
    signal strm_bytes2words_U0_ap_done : STD_LOGIC;
    signal strm_bytes2words_U0_ap_continue : STD_LOGIC;
    signal strm_bytes2words_U0_ap_idle : STD_LOGIC;
    signal strm_bytes2words_U0_ap_ready : STD_LOGIC;
    signal strm_bytes2words_U0_words_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal strm_bytes2words_U0_words_out_V_write : STD_LOGIC;
    signal strm_bytes2words_U0_bytes_in_V_TREADY : STD_LOGIC;
    signal strm_bytes2words_U0_bytestrm_len_read : STD_LOGIC;
    signal decimate_strm_U0_ap_start : STD_LOGIC;
    signal decimate_strm_U0_ap_done : STD_LOGIC;
    signal decimate_strm_U0_ap_continue : STD_LOGIC;
    signal decimate_strm_U0_ap_idle : STD_LOGIC;
    signal decimate_strm_U0_ap_ready : STD_LOGIC;
    signal decimate_strm_U0_strm_out_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal decimate_strm_U0_strm_out_V_write : STD_LOGIC;
    signal decimate_strm_U0_strm_in_V_read : STD_LOGIC;
    signal strm_words2bytes_U0_ap_start : STD_LOGIC;
    signal strm_words2bytes_U0_ap_done : STD_LOGIC;
    signal strm_words2bytes_U0_ap_continue : STD_LOGIC;
    signal strm_words2bytes_U0_ap_idle : STD_LOGIC;
    signal strm_words2bytes_U0_ap_ready : STD_LOGIC;
    signal strm_words2bytes_U0_bytes_out_V_TDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal strm_words2bytes_U0_bytes_out_V_TVALID : STD_LOGIC;
    signal strm_words2bytes_U0_words_in_V_read : STD_LOGIC;
    signal strm_words2bytes_U0_bytes_out_len_loc_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal strm_len_c_full_n : STD_LOGIC;
    signal strm_len_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal strm_len_c_empty_n : STD_LOGIC;
    signal strm_len_c2_full_n : STD_LOGIC;
    signal strm_len_c2_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal strm_len_c2_empty_n : STD_LOGIC;
    signal bytes_out_len_loc_c_full_n : STD_LOGIC;
    signal bytes_out_len_loc_c_dout : STD_LOGIC_VECTOR (13 downto 0);
    signal bytes_out_len_loc_c_empty_n : STD_LOGIC;
    signal dwords_in_len_cast_l_dout : STD_LOGIC_VECTOR (13 downto 0);
    signal dwords_in_len_cast_l_empty_n : STD_LOGIC;
    signal dwordstrm_in_V_full_n : STD_LOGIC;
    signal dwordstrm_in_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dwordstrm_in_V_empty_n : STD_LOGIC;
    signal dwordstrm_out_V_full_n : STD_LOGIC;
    signal dwordstrm_out_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal dwordstrm_out_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_bytestrm_dwordproc_e_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_bytestrm_dwordproc_e_U0_ap_ready : STD_LOGIC;
    signal bytestrm_dwordproc_e_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_strm_bytes2words_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_strm_bytes2words_U0_ap_ready : STD_LOGIC;
    signal strm_bytes2words_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Block_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_proc_U0_empty_n : STD_LOGIC;
    signal start_for_strm_words2bytes_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_strm_words2bytes_U0_full_n : STD_LOGIC;
    signal start_for_strm_words2bytes_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_strm_words2bytes_U0_empty_n : STD_LOGIC;
    signal strm_bytes2words_U0_start_full_n : STD_LOGIC;
    signal strm_bytes2words_U0_start_write : STD_LOGIC;
    signal decimate_strm_U0_start_full_n : STD_LOGIC;
    signal decimate_strm_U0_start_write : STD_LOGIC;
    signal strm_words2bytes_U0_start_full_n : STD_LOGIC;
    signal strm_words2bytes_U0_start_write : STD_LOGIC;

    component bytestrm_dwordproc_e IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        strm_len : IN STD_LOGIC_VECTOR (15 downto 0);
        strm_len_out_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        strm_len_out_full_n : IN STD_LOGIC;
        strm_len_out_write : OUT STD_LOGIC;
        strm_len_out1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        strm_len_out1_full_n : IN STD_LOGIC;
        strm_len_out1_write : OUT STD_LOGIC );
    end component;


    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        strm_len_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        strm_len_empty_n : IN STD_LOGIC;
        strm_len_read : OUT STD_LOGIC;
        bytes_out_len_out_out_din : OUT STD_LOGIC_VECTOR (13 downto 0);
        bytes_out_len_out_out_full_n : IN STD_LOGIC;
        bytes_out_len_out_out_write : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component strm_bytes2words IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        words_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        words_out_V_full_n : IN STD_LOGIC;
        words_out_V_write : OUT STD_LOGIC;
        bytes_in_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        bytes_in_V_TVALID : IN STD_LOGIC;
        bytes_in_V_TREADY : OUT STD_LOGIC;
        bytestrm_len_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bytestrm_len_empty_n : IN STD_LOGIC;
        bytestrm_len_read : OUT STD_LOGIC );
    end component;


    component decimate_strm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        strm_out_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        strm_out_V_full_n : IN STD_LOGIC;
        strm_out_V_write : OUT STD_LOGIC;
        strm_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        strm_in_V_empty_n : IN STD_LOGIC;
        strm_in_V_read : OUT STD_LOGIC;
        strm_len : IN STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component strm_words2bytes IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bytes_out_V_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        bytes_out_V_TVALID : OUT STD_LOGIC;
        bytes_out_V_TREADY : IN STD_LOGIC;
        words_in_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        words_in_V_empty_n : IN STD_LOGIC;
        words_in_V_read : OUT STD_LOGIC;
        bytes_out_len_loc_dout : IN STD_LOGIC_VECTOR (13 downto 0);
        bytes_out_len_loc_empty_n : IN STD_LOGIC;
        bytes_out_len_loc_read : OUT STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w14_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (13 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w14_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (13 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Block_pbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_strm_wocud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    bytestrm_dwordproc_e_U0 : component bytestrm_dwordproc_e
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => bytestrm_dwordproc_e_U0_ap_start,
        start_full_n => start_for_Block_proc_U0_full_n,
        ap_done => bytestrm_dwordproc_e_U0_ap_done,
        ap_continue => bytestrm_dwordproc_e_U0_ap_continue,
        ap_idle => bytestrm_dwordproc_e_U0_ap_idle,
        ap_ready => bytestrm_dwordproc_e_U0_ap_ready,
        start_out => bytestrm_dwordproc_e_U0_start_out,
        start_write => bytestrm_dwordproc_e_U0_start_write,
        strm_len => strm_len,
        strm_len_out_din => bytestrm_dwordproc_e_U0_strm_len_out_din,
        strm_len_out_full_n => strm_len_c_full_n,
        strm_len_out_write => bytestrm_dwordproc_e_U0_strm_len_out_write,
        strm_len_out1_din => bytestrm_dwordproc_e_U0_strm_len_out1_din,
        strm_len_out1_full_n => strm_len_c2_full_n,
        strm_len_out1_write => bytestrm_dwordproc_e_U0_strm_len_out1_write);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_proc_U0_ap_start,
        start_full_n => start_for_strm_words2bytes_U0_full_n,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        start_out => Block_proc_U0_start_out,
        start_write => Block_proc_U0_start_write,
        strm_len_dout => strm_len_c_dout,
        strm_len_empty_n => strm_len_c_empty_n,
        strm_len_read => Block_proc_U0_strm_len_read,
        bytes_out_len_out_out_din => Block_proc_U0_bytes_out_len_out_out_din,
        bytes_out_len_out_out_full_n => bytes_out_len_loc_c_full_n,
        bytes_out_len_out_out_write => Block_proc_U0_bytes_out_len_out_out_write,
        ap_return => Block_proc_U0_ap_return);

    strm_bytes2words_U0 : component strm_bytes2words
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => strm_bytes2words_U0_ap_start,
        ap_done => strm_bytes2words_U0_ap_done,
        ap_continue => strm_bytes2words_U0_ap_continue,
        ap_idle => strm_bytes2words_U0_ap_idle,
        ap_ready => strm_bytes2words_U0_ap_ready,
        words_out_V_din => strm_bytes2words_U0_words_out_V_din,
        words_out_V_full_n => dwordstrm_in_V_full_n,
        words_out_V_write => strm_bytes2words_U0_words_out_V_write,
        bytes_in_V_TDATA => strm_in_V_TDATA,
        bytes_in_V_TVALID => strm_in_V_TVALID,
        bytes_in_V_TREADY => strm_bytes2words_U0_bytes_in_V_TREADY,
        bytestrm_len_dout => strm_len_c2_dout,
        bytestrm_len_empty_n => strm_len_c2_empty_n,
        bytestrm_len_read => strm_bytes2words_U0_bytestrm_len_read);

    decimate_strm_U0 : component decimate_strm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => decimate_strm_U0_ap_start,
        ap_done => decimate_strm_U0_ap_done,
        ap_continue => decimate_strm_U0_ap_continue,
        ap_idle => decimate_strm_U0_ap_idle,
        ap_ready => decimate_strm_U0_ap_ready,
        strm_out_V_din => decimate_strm_U0_strm_out_V_din,
        strm_out_V_full_n => dwordstrm_out_V_full_n,
        strm_out_V_write => decimate_strm_U0_strm_out_V_write,
        strm_in_V_dout => dwordstrm_in_V_dout,
        strm_in_V_empty_n => dwordstrm_in_V_empty_n,
        strm_in_V_read => decimate_strm_U0_strm_in_V_read,
        strm_len => dwords_in_len_cast_l_dout);

    strm_words2bytes_U0 : component strm_words2bytes
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => strm_words2bytes_U0_ap_start,
        ap_done => strm_words2bytes_U0_ap_done,
        ap_continue => strm_words2bytes_U0_ap_continue,
        ap_idle => strm_words2bytes_U0_ap_idle,
        ap_ready => strm_words2bytes_U0_ap_ready,
        bytes_out_V_TDATA => strm_words2bytes_U0_bytes_out_V_TDATA,
        bytes_out_V_TVALID => strm_words2bytes_U0_bytes_out_V_TVALID,
        bytes_out_V_TREADY => strm_out_V_TREADY,
        words_in_V_dout => dwordstrm_out_V_dout,
        words_in_V_empty_n => dwordstrm_out_V_empty_n,
        words_in_V_read => strm_words2bytes_U0_words_in_V_read,
        bytes_out_len_loc_dout => bytes_out_len_loc_c_dout,
        bytes_out_len_loc_empty_n => bytes_out_len_loc_c_empty_n,
        bytes_out_len_loc_read => strm_words2bytes_U0_bytes_out_len_loc_read);

    strm_len_c_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bytestrm_dwordproc_e_U0_strm_len_out_din,
        if_full_n => strm_len_c_full_n,
        if_write => bytestrm_dwordproc_e_U0_strm_len_out_write,
        if_dout => strm_len_c_dout,
        if_empty_n => strm_len_c_empty_n,
        if_read => Block_proc_U0_strm_len_read);

    strm_len_c2_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => bytestrm_dwordproc_e_U0_strm_len_out1_din,
        if_full_n => strm_len_c2_full_n,
        if_write => bytestrm_dwordproc_e_U0_strm_len_out1_write,
        if_dout => strm_len_c2_dout,
        if_empty_n => strm_len_c2_empty_n,
        if_read => strm_bytes2words_U0_bytestrm_len_read);

    bytes_out_len_loc_c_U : component fifo_w14_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_bytes_out_len_out_out_din,
        if_full_n => bytes_out_len_loc_c_full_n,
        if_write => Block_proc_U0_bytes_out_len_out_out_write,
        if_dout => bytes_out_len_loc_c_dout,
        if_empty_n => bytes_out_len_loc_c_empty_n,
        if_read => strm_words2bytes_U0_bytes_out_len_loc_read);

    dwords_in_len_cast_l_U : component fifo_w14_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_ap_return,
        if_full_n => dwords_in_len_cast_l_full_n,
        if_write => Block_proc_U0_ap_done,
        if_dout => dwords_in_len_cast_l_dout,
        if_empty_n => dwords_in_len_cast_l_empty_n,
        if_read => decimate_strm_U0_ap_ready);

    dwordstrm_in_V_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => strm_bytes2words_U0_words_out_V_din,
        if_full_n => dwordstrm_in_V_full_n,
        if_write => strm_bytes2words_U0_words_out_V_write,
        if_dout => dwordstrm_in_V_dout,
        if_empty_n => dwordstrm_in_V_empty_n,
        if_read => decimate_strm_U0_strm_in_V_read);

    dwordstrm_out_V_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => decimate_strm_U0_strm_out_V_din,
        if_full_n => dwordstrm_out_V_full_n,
        if_write => decimate_strm_U0_strm_out_V_write,
        if_dout => dwordstrm_out_V_dout,
        if_empty_n => dwordstrm_out_V_empty_n,
        if_read => strm_words2bytes_U0_words_in_V_read);

    start_for_Block_pbkb_U : component start_for_Block_pbkb
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_proc_U0_din,
        if_full_n => start_for_Block_proc_U0_full_n,
        if_write => bytestrm_dwordproc_e_U0_start_write,
        if_dout => start_for_Block_proc_U0_dout,
        if_empty_n => start_for_Block_proc_U0_empty_n,
        if_read => Block_proc_U0_ap_ready);

    start_for_strm_wocud_U : component start_for_strm_wocud
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_strm_words2bytes_U0_din,
        if_full_n => start_for_strm_words2bytes_U0_full_n,
        if_write => Block_proc_U0_start_write,
        if_dout => start_for_strm_words2bytes_U0_dout,
        if_empty_n => start_for_strm_words2bytes_U0_empty_n,
        if_read => strm_words2bytes_U0_ap_ready);





    ap_sync_reg_bytestrm_dwordproc_e_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_bytestrm_dwordproc_e_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_bytestrm_dwordproc_e_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_bytestrm_dwordproc_e_U0_ap_ready <= ap_sync_bytestrm_dwordproc_e_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_strm_bytes2words_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_strm_bytes2words_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_strm_bytes2words_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_strm_bytes2words_U0_ap_ready <= ap_sync_strm_bytes2words_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    bytestrm_dwordproc_e_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (bytestrm_dwordproc_e_U0_ap_ready = ap_const_logic_0))) then 
                bytestrm_dwordproc_e_U0_ap_ready_count <= std_logic_vector(unsigned(bytestrm_dwordproc_e_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (bytestrm_dwordproc_e_U0_ap_ready = ap_const_logic_1))) then 
                bytestrm_dwordproc_e_U0_ap_ready_count <= std_logic_vector(unsigned(bytestrm_dwordproc_e_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    strm_bytes2words_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((strm_bytes2words_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                strm_bytes2words_U0_ap_ready_count <= std_logic_vector(unsigned(strm_bytes2words_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((strm_bytes2words_U0_ap_ready = ap_const_logic_1) and (ap_sync_ready = ap_const_logic_0))) then 
                strm_bytes2words_U0_ap_ready_count <= std_logic_vector(unsigned(strm_bytes2words_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_proc_U0_ap_continue <= dwords_in_len_cast_l_full_n;
    Block_proc_U0_ap_start <= start_for_Block_proc_U0_empty_n;
    ap_channel_done_dwords_in_len_cast_l <= Block_proc_U0_ap_done;
    ap_done <= strm_words2bytes_U0_ap_done;
    ap_idle <= (strm_words2bytes_U0_ap_idle and strm_bytes2words_U0_ap_idle and (dwords_in_len_cast_l_empty_n xor ap_const_logic_1) and decimate_strm_U0_ap_idle and bytestrm_dwordproc_e_U0_ap_idle and Block_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_bytestrm_dwordproc_e_U0_ap_ready <= (bytestrm_dwordproc_e_U0_ap_ready or ap_sync_reg_bytestrm_dwordproc_e_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= strm_words2bytes_U0_ap_done;
    ap_sync_ready <= (ap_sync_strm_bytes2words_U0_ap_ready and ap_sync_bytestrm_dwordproc_e_U0_ap_ready);
    ap_sync_strm_bytes2words_U0_ap_ready <= (strm_bytes2words_U0_ap_ready or ap_sync_reg_strm_bytes2words_U0_ap_ready);
    bytestrm_dwordproc_e_U0_ap_continue <= ap_const_logic_1;
    bytestrm_dwordproc_e_U0_ap_start <= ((ap_sync_reg_bytestrm_dwordproc_e_U0_ap_ready xor ap_const_logic_1) and ap_start);
    decimate_strm_U0_ap_continue <= ap_const_logic_1;
    decimate_strm_U0_ap_start <= dwords_in_len_cast_l_empty_n;
    decimate_strm_U0_start_full_n <= ap_const_logic_1;
    decimate_strm_U0_start_write <= ap_const_logic_0;
    start_for_Block_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_strm_words2bytes_U0_din <= (0=>ap_const_logic_1, others=>'-');
    strm_bytes2words_U0_ap_continue <= ap_const_logic_1;
    strm_bytes2words_U0_ap_start <= ((ap_sync_reg_strm_bytes2words_U0_ap_ready xor ap_const_logic_1) and ap_start);
    strm_bytes2words_U0_start_full_n <= ap_const_logic_1;
    strm_bytes2words_U0_start_write <= ap_const_logic_0;
    strm_in_V_TREADY <= strm_bytes2words_U0_bytes_in_V_TREADY;
    strm_out_V_TDATA <= strm_words2bytes_U0_bytes_out_V_TDATA;
    strm_out_V_TVALID <= strm_words2bytes_U0_bytes_out_V_TVALID;
    strm_words2bytes_U0_ap_continue <= ap_const_logic_1;
    strm_words2bytes_U0_ap_start <= start_for_strm_words2bytes_U0_empty_n;
    strm_words2bytes_U0_start_full_n <= ap_const_logic_1;
    strm_words2bytes_U0_start_write <= ap_const_logic_0;
end behav;
