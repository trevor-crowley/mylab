// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _decimate_strm_HH_
#define _decimate_strm_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct decimate_strm : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > strm_out_V_din;
    sc_in< sc_logic > strm_out_V_full_n;
    sc_out< sc_logic > strm_out_V_write;
    sc_in< sc_lv<32> > strm_in_V_dout;
    sc_in< sc_logic > strm_in_V_empty_n;
    sc_out< sc_logic > strm_in_V_read;
    sc_in< sc_lv<14> > strm_len;


    // Module declarations
    decimate_strm(sc_module_name name);
    SC_HAS_PROCESS(decimate_strm);

    ~decimate_strm();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > strm_out_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln153_reg_259;
    sc_signal< sc_logic > strm_in_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<1> > icmp_ln144_reg_239;
    sc_signal< sc_lv<14> > indvar_flatten_reg_117;
    sc_signal< sc_lv<3> > j_0_i_reg_128;
    sc_signal< sc_lv<34> > acc_0_i_reg_140;
    sc_signal< sc_lv<14> > tmp_8_fu_162_p3;
    sc_signal< sc_lv<14> > tmp_8_reg_234;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln144_fu_170_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln144_reg_239_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln144_reg_239_pp0_iter2_reg;
    sc_signal< sc_lv<14> > add_ln144_fu_175_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_reg_248;
    sc_signal< sc_lv<34> > acc_fu_206_p2;
    sc_signal< sc_lv<34> > acc_reg_253;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln153_fu_212_p2;
    sc_signal< sc_lv<3> > j_fu_218_p2;
    sc_signal< sc_lv<3> > j_reg_263;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<3> > ap_phi_mux_j_0_i_phi_fu_132_p4;
    sc_signal< sc_lv<34> > ap_phi_mux_acc_0_i_phi_fu_144_p4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<12> > tmp_7_fu_152_p4;
    sc_signal< sc_lv<1> > icmp_ln148_fu_181_p2;
    sc_signal< sc_lv<34> > sext_ln150_fu_203_p1;
    sc_signal< sc_lv<34> > select_ln148_1_fu_195_p3;
    sc_signal< sc_lv<3> > select_ln148_fu_187_p3;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<34> ap_const_lv34_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<32> ap_const_lv32_21;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_fu_206_p2();
    void thread_add_ln144_fu_175_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_acc_0_i_phi_fu_144_p4();
    void thread_ap_phi_mux_j_0_i_phi_fu_132_p4();
    void thread_ap_ready();
    void thread_icmp_ln144_fu_170_p2();
    void thread_icmp_ln148_fu_181_p2();
    void thread_icmp_ln153_fu_212_p2();
    void thread_j_fu_218_p2();
    void thread_select_ln148_1_fu_195_p3();
    void thread_select_ln148_fu_187_p3();
    void thread_sext_ln150_fu_203_p1();
    void thread_strm_in_V_blk_n();
    void thread_strm_in_V_read();
    void thread_strm_out_V_blk_n();
    void thread_strm_out_V_din();
    void thread_strm_out_V_write();
    void thread_tmp_7_fu_152_p4();
    void thread_tmp_8_fu_162_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
