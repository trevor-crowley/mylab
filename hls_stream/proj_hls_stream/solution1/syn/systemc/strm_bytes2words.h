// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _strm_bytes2words_HH_
#define _strm_bytes2words_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct strm_bytes2words : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > words_out_V_din;
    sc_in< sc_logic > words_out_V_full_n;
    sc_out< sc_logic > words_out_V_write;
    sc_in< sc_lv<8> > bytes_in_V_TDATA;
    sc_in< sc_logic > bytes_in_V_TVALID;
    sc_out< sc_logic > bytes_in_V_TREADY;
    sc_in< sc_lv<16> > bytestrm_len_dout;
    sc_in< sc_logic > bytestrm_len_empty_n;
    sc_out< sc_logic > bytestrm_len_read;


    // Module declarations
    strm_bytes2words(sc_module_name name);
    SC_HAS_PROCESS(strm_bytes2words);

    ~strm_bytes2words();

    sc_trace_file* mVcdFile;

    regslice_both<8>* regslice_both_bytes_in_V_U;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > words_out_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln117_fu_131_p2;
    sc_signal< sc_lv<1> > icmp_ln126_fu_151_p2;
    sc_signal< sc_logic > bytes_in_V_TDATA_blk_n;
    sc_signal< sc_logic > bytestrm_len_blk_n;
    sc_signal< sc_lv<16> > bytestrm_len_read_reg_175;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<16> > i_fu_136_p2;
    sc_signal< bool > ap_predicate_op22_write_state2;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<24> > trunc_ln117_1_fu_167_p3;
    sc_signal< sc_lv<24> > r_V_reg_105;
    sc_signal< sc_lv<16> > i_0_i_reg_116;
    sc_signal< sc_lv<2> > trunc_ln117_fu_127_p1;
    sc_signal< sc_lv<16> > tmp_5_fu_157_p4;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > regslice_both_bytes_in_V_U_apdone_blk;
    sc_signal< sc_lv<8> > bytes_in_V_TDATA_int;
    sc_signal< sc_logic > bytes_in_V_TVALID_int;
    sc_signal< sc_logic > bytes_in_V_TREADY_int;
    sc_signal< sc_logic > regslice_both_bytes_in_V_U_ack_in;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<24> ap_const_lv24_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_predicate_op22_write_state2();
    void thread_ap_ready();
    void thread_bytes_in_V_TDATA_blk_n();
    void thread_bytes_in_V_TREADY();
    void thread_bytes_in_V_TREADY_int();
    void thread_bytestrm_len_blk_n();
    void thread_bytestrm_len_read();
    void thread_i_fu_136_p2();
    void thread_icmp_ln117_fu_131_p2();
    void thread_icmp_ln126_fu_151_p2();
    void thread_tmp_5_fu_157_p4();
    void thread_trunc_ln117_1_fu_167_p3();
    void thread_trunc_ln117_fu_127_p1();
    void thread_words_out_V_blk_n();
    void thread_words_out_V_din();
    void thread_words_out_V_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
