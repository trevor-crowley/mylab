// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mandel_calc_HH_
#define _mandel_calc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mandel_calc_mul_mbkb.h"

namespace ap_rtl {

struct mandel_calc : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<18> > re_V;
    sc_in< sc_lv<18> > im_V;
    sc_out< sc_lv<8> > count_out_V;
    sc_out< sc_logic > count_out_V_ap_vld;


    // Module declarations
    mandel_calc(sc_module_name name);
    SC_HAS_PROCESS(mandel_calc);

    ~mandel_calc();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mandel_calc_mul_mbkb<1,1,18,18,36>* mandel_calc_mul_mbkb_U1;
    mandel_calc_mul_mbkb<1,1,18,18,36>* mandel_calc_mul_mbkb_U2;
    mandel_calc_mul_mbkb<1,1,18,18,36>* mandel_calc_mul_mbkb_U3;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > p_Val2_13_cast_fu_133_p1;
    sc_signal< sc_lv<32> > p_Val2_13_cast_reg_354;
    sc_signal< sc_lv<32> > p_Val2_8_cast_fu_145_p1;
    sc_signal< sc_lv<39> > tmp_15_cast_cast_fu_157_p1;
    sc_signal< sc_lv<39> > tmp_15_cast_cast_reg_365;
    sc_signal< sc_lv<8> > tmp_10_fu_167_p2;
    sc_signal< sc_lv<8> > tmp_10_reg_373;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > p_Val2_2_reg_378;
    sc_signal< sc_lv<1> > tmp_5_fu_161_p2;
    sc_signal< sc_lv<1> > tmp_reg_383;
    sc_signal< sc_lv<32> > p_Val2_6_reg_388;
    sc_signal< sc_lv<1> > tmp_12_reg_393;
    sc_signal< sc_lv<36> > r_V_1_fu_347_p2;
    sc_signal< sc_lv<36> > r_V_1_reg_398;
    sc_signal< sc_lv<1> > tmp_13_reg_403;
    sc_signal< sc_lv<1> > val_assign_fu_270_p2;
    sc_signal< sc_lv<1> > val_assign_reg_408;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > p_Val2_12_fu_305_p2;
    sc_signal< sc_lv<32> > p_Val2_12_reg_413;
    sc_signal< sc_lv<32> > p_Val2_14_fu_317_p2;
    sc_signal< sc_lv<32> > p_Val2_14_reg_418;
    sc_signal< sc_lv<8> > tmp_6_fu_325_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > p_Val2_4_reg_83;
    sc_signal< sc_lv<32> > p_Val2_s_reg_92;
    sc_signal< sc_lv<8> > count_V_reg_101;
    sc_signal< sc_lv<8> > t_V_reg_114;
    sc_signal< sc_lv<30> > p_Val2_13_fu_125_p3;
    sc_signal< sc_lv<30> > p_Val2_8_fu_137_p3;
    sc_signal< sc_lv<34> > tmp_2_fu_149_p3;
    sc_signal< sc_lv<18> > tmp_7_fu_173_p4;
    sc_signal< sc_lv<36> > p_Val2_1_fu_331_p2;
    sc_signal< sc_lv<18> > tmp_3_fu_203_p4;
    sc_signal< sc_lv<36> > p_Val2_5_fu_339_p2;
    sc_signal< sc_lv<32> > tmp_8_fu_240_p1;
    sc_signal< sc_lv<32> > tmp_9_fu_248_p1;
    sc_signal< sc_lv<32> > p_Val2_3_fu_243_p2;
    sc_signal< sc_lv<32> > p_Val2_7_fu_251_p2;
    sc_signal< sc_lv<33> > tmp_s_fu_256_p1;
    sc_signal< sc_lv<33> > tmp_1_fu_260_p1;
    sc_signal< sc_lv<33> > r_V_fu_264_p2;
    sc_signal< sc_lv<37> > p_Val2_9_fu_276_p3;
    sc_signal< sc_lv<39> > tmp_10_cast_fu_283_p1;
    sc_signal< sc_lv<39> > p_Val2_10_fu_287_p2;
    sc_signal< sc_lv<32> > p_Val2_11_fu_292_p4;
    sc_signal< sc_lv<32> > tmp_11_fu_302_p1;
    sc_signal< sc_lv<32> > p_Val2_s_8_fu_311_p2;
    sc_signal< sc_lv<8> > tmp_4_fu_322_p1;
    sc_signal< sc_lv<18> > p_Val2_1_fu_331_p0;
    sc_signal< sc_lv<36> > OP1_V_fu_183_p1;
    sc_signal< sc_lv<18> > p_Val2_1_fu_331_p1;
    sc_signal< sc_lv<18> > p_Val2_5_fu_339_p0;
    sc_signal< sc_lv<36> > OP1_V_1_fu_213_p1;
    sc_signal< sc_lv<18> > p_Val2_5_fu_339_p1;
    sc_signal< sc_lv<18> > r_V_1_fu_347_p0;
    sc_signal< sc_lv<18> > r_V_1_fu_347_p1;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_23;
    static const sc_lv<33> ap_const_lv33_40000001;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_OP1_V_1_fu_213_p1();
    void thread_OP1_V_fu_183_p1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_count_out_V();
    void thread_count_out_V_ap_vld();
    void thread_p_Val2_10_fu_287_p2();
    void thread_p_Val2_11_fu_292_p4();
    void thread_p_Val2_12_fu_305_p2();
    void thread_p_Val2_13_cast_fu_133_p1();
    void thread_p_Val2_13_fu_125_p3();
    void thread_p_Val2_14_fu_317_p2();
    void thread_p_Val2_1_fu_331_p0();
    void thread_p_Val2_1_fu_331_p1();
    void thread_p_Val2_3_fu_243_p2();
    void thread_p_Val2_5_fu_339_p0();
    void thread_p_Val2_5_fu_339_p1();
    void thread_p_Val2_7_fu_251_p2();
    void thread_p_Val2_8_cast_fu_145_p1();
    void thread_p_Val2_8_fu_137_p3();
    void thread_p_Val2_9_fu_276_p3();
    void thread_p_Val2_s_8_fu_311_p2();
    void thread_r_V_1_fu_347_p0();
    void thread_r_V_1_fu_347_p1();
    void thread_r_V_fu_264_p2();
    void thread_tmp_10_cast_fu_283_p1();
    void thread_tmp_10_fu_167_p2();
    void thread_tmp_11_fu_302_p1();
    void thread_tmp_15_cast_cast_fu_157_p1();
    void thread_tmp_1_fu_260_p1();
    void thread_tmp_2_fu_149_p3();
    void thread_tmp_3_fu_203_p4();
    void thread_tmp_4_fu_322_p1();
    void thread_tmp_5_fu_161_p2();
    void thread_tmp_6_fu_325_p2();
    void thread_tmp_7_fu_173_p4();
    void thread_tmp_8_fu_240_p1();
    void thread_tmp_9_fu_248_p1();
    void thread_tmp_s_fu_256_p1();
    void thread_val_assign_fu_270_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
