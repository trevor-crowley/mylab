-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mandel_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    re_V : IN STD_LOGIC_VECTOR (17 downto 0);
    im_V : IN STD_LOGIC_VECTOR (17 downto 0);
    count_out_V : OUT STD_LOGIC_VECTOR (7 downto 0);
    count_out_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of mandel_calc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mandel_calc,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35tcpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.868250,HLS_SYN_LAT=766,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=303,HLS_SYN_LUT=392}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv33_40000001 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_13_cast_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_13_cast_reg_354 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_cast_fu_145_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_cast_cast_fu_157_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_15_cast_cast_reg_365 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_10_fu_167_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_373 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_2_reg_378 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_383 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_393 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_347_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_1_reg_398 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_13_reg_403 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_Val2_12_fu_305_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_12_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_14_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_325_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal p_Val2_4_reg_83 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal count_V_reg_101 : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_reg_114 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_13_fu_125_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Val2_8_fu_137_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_2_fu_149_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_7_fu_173_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_1_fu_331_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_3_fu_203_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_339_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_8_fu_240_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_3_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_256_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_1_fu_260_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_fu_264_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Val2_9_fu_276_p3 : STD_LOGIC_VECTOR (36 downto 0);
    signal tmp_10_cast_fu_283_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_10_fu_287_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_Val2_11_fu_292_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_8_fu_311_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_322_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_1_fu_331_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal OP1_V_fu_183_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_1_fu_331_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Val2_5_fu_339_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal OP1_V_1_fu_213_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_5_fu_339_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_fu_347_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_1_fu_347_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component mandel_calc_mul_mbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    mandel_calc_mul_mbkb_U1 : component mandel_calc_mul_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        din0 => p_Val2_1_fu_331_p0,
        din1 => p_Val2_1_fu_331_p1,
        dout => p_Val2_1_fu_331_p2);

    mandel_calc_mul_mbkb_U2 : component mandel_calc_mul_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        din0 => p_Val2_5_fu_339_p0,
        din1 => p_Val2_5_fu_339_p1,
        dout => p_Val2_5_fu_339_p2);

    mandel_calc_mul_mbkb_U3 : component mandel_calc_mul_mbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        din0 => r_V_1_fu_347_p0,
        din1 => r_V_1_fu_347_p1,
        dout => r_V_1_fu_347_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    count_V_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                count_V_reg_101 <= tmp_6_fu_325_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                count_V_reg_101 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_4_reg_83 <= p_Val2_12_reg_413;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_4_reg_83 <= p_Val2_8_cast_fu_145_p1;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_s_reg_92 <= p_Val2_14_reg_418;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_92 <= p_Val2_13_cast_fu_133_p1;
            end if; 
        end if;
    end process;

    t_V_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                t_V_reg_114 <= tmp_10_reg_373;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_114 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                p_Val2_12_reg_413 <= p_Val2_12_fu_305_p2;
                p_Val2_14_reg_418 <= p_Val2_14_fu_317_p2;
                val_assign_reg_408 <= val_assign_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    p_Val2_13_cast_reg_354(31 downto 12) <= p_Val2_13_cast_fu_133_p1(31 downto 12);
                    tmp_15_cast_cast_reg_365(38 downto 16) <= tmp_15_cast_cast_fu_157_p1(38 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_161_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                p_Val2_2_reg_378 <= p_Val2_1_fu_331_p2(35 downto 4);
                p_Val2_6_reg_388 <= p_Val2_5_fu_339_p2(35 downto 4);
                r_V_1_reg_398 <= r_V_1_fu_347_p2;
                tmp_12_reg_393 <= p_Val2_5_fu_339_p2(3 downto 3);
                tmp_13_reg_403 <= r_V_1_fu_347_p2(2 downto 2);
                tmp_reg_383 <= p_Val2_1_fu_331_p2(3 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_10_reg_373 <= tmp_10_fu_167_p2;
            end if;
        end if;
    end process;
    p_Val2_13_cast_reg_354(11 downto 0) <= "000000000000";
    tmp_15_cast_cast_reg_365(15 downto 0) <= "0000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_5_fu_161_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_5_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
        OP1_V_1_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_203_p4),36));

        OP1_V_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_173_p4),36));

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_5_fu_161_p2)
    begin
        if (((tmp_5_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_5_fu_161_p2)
    begin
        if (((tmp_5_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    count_out_V <= count_V_reg_101;

    count_out_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, tmp_5_fu_161_p2)
    begin
        if (((tmp_5_fu_161_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            count_out_V_ap_vld <= ap_const_logic_1;
        else 
            count_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_10_fu_287_p2 <= std_logic_vector(signed(tmp_15_cast_cast_reg_365) + signed(tmp_10_cast_fu_283_p1));
    p_Val2_11_fu_292_p4 <= p_Val2_10_fu_287_p2(35 downto 4);
    p_Val2_12_fu_305_p2 <= std_logic_vector(unsigned(p_Val2_11_fu_292_p4) + unsigned(tmp_11_fu_302_p1));
        p_Val2_13_cast_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_125_p3),32));

    p_Val2_13_fu_125_p3 <= (re_V & ap_const_lv12_0);
    p_Val2_14_fu_317_p2 <= std_logic_vector(unsigned(p_Val2_s_8_fu_311_p2) + unsigned(p_Val2_13_cast_reg_354));
    p_Val2_1_fu_331_p0 <= OP1_V_fu_183_p1(18 - 1 downto 0);
    p_Val2_1_fu_331_p1 <= OP1_V_fu_183_p1(18 - 1 downto 0);
    p_Val2_3_fu_243_p2 <= std_logic_vector(unsigned(p_Val2_2_reg_378) + unsigned(tmp_8_fu_240_p1));
    p_Val2_5_fu_339_p0 <= OP1_V_1_fu_213_p1(18 - 1 downto 0);
    p_Val2_5_fu_339_p1 <= OP1_V_1_fu_213_p1(18 - 1 downto 0);
    p_Val2_7_fu_251_p2 <= std_logic_vector(unsigned(p_Val2_6_reg_388) + unsigned(tmp_9_fu_248_p1));
        p_Val2_8_cast_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_fu_137_p3),32));

    p_Val2_8_fu_137_p3 <= (im_V & ap_const_lv12_0);
    p_Val2_9_fu_276_p3 <= (r_V_1_reg_398 & ap_const_lv1_0);
    p_Val2_s_8_fu_311_p2 <= std_logic_vector(unsigned(p_Val2_3_fu_243_p2) - unsigned(p_Val2_7_fu_251_p2));
    r_V_1_fu_347_p0 <= OP1_V_fu_183_p1(18 - 1 downto 0);
    r_V_1_fu_347_p1 <= OP1_V_1_fu_213_p1(18 - 1 downto 0);
    r_V_fu_264_p2 <= std_logic_vector(signed(tmp_s_fu_256_p1) + signed(tmp_1_fu_260_p1));
    tmp_10_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_9_fu_276_p3),39));
    tmp_10_fu_167_p2 <= std_logic_vector(unsigned(t_V_reg_114) + unsigned(ap_const_lv8_1));
    tmp_11_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_403),32));
        tmp_15_cast_cast_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_149_p3),39));

        tmp_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_fu_251_p2),33));

    tmp_2_fu_149_p3 <= (im_V & ap_const_lv16_0);
    tmp_3_fu_203_p4 <= p_Val2_4_reg_83(29 downto 12);
    tmp_4_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(val_assign_reg_408),8));
    tmp_5_fu_161_p2 <= "1" when (t_V_reg_114 = ap_const_lv8_FF) else "0";
    tmp_6_fu_325_p2 <= std_logic_vector(unsigned(tmp_4_fu_322_p1) + unsigned(count_V_reg_101));
    tmp_7_fu_173_p4 <= p_Val2_s_reg_92(29 downto 12);
    tmp_8_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_383),32));
    tmp_9_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_393),32));
        tmp_s_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_fu_243_p2),33));

    val_assign_fu_270_p2 <= "1" when (signed(r_V_fu_264_p2) < signed(ap_const_lv33_40000001)) else "0";
end behav;
