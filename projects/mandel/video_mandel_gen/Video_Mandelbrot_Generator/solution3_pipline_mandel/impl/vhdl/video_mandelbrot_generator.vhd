-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity video_mandelbrot_generator is
generic (
    C_S_AXI_CMD_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CMD_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_cmd_AWVALID : IN STD_LOGIC;
    s_axi_cmd_AWREADY : OUT STD_LOGIC;
    s_axi_cmd_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_ADDR_WIDTH-1 downto 0);
    s_axi_cmd_WVALID : IN STD_LOGIC;
    s_axi_cmd_WREADY : OUT STD_LOGIC;
    s_axi_cmd_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH-1 downto 0);
    s_axi_cmd_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH/8-1 downto 0);
    s_axi_cmd_ARVALID : IN STD_LOGIC;
    s_axi_cmd_ARREADY : OUT STD_LOGIC;
    s_axi_cmd_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_ADDR_WIDTH-1 downto 0);
    s_axi_cmd_RVALID : OUT STD_LOGIC;
    s_axi_cmd_RREADY : IN STD_LOGIC;
    s_axi_cmd_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH-1 downto 0);
    s_axi_cmd_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cmd_BVALID : OUT STD_LOGIC;
    s_axi_cmd_BREADY : IN STD_LOGIC;
    s_axi_cmd_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of video_mandelbrot_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "video_mandelbrot_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020i-clg484-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.516375,HLS_SYN_LAT=1914,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1260,HLS_SYN_LUT=3183,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal m_axis_video_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal m_axis_video_V_data_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_data_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal m_axis_video_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal m_axis_video_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_data_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_data_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_data_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_keep_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_keep_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_strb_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_strb_V_1_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal m_axis_video_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_strb_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_strb_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_user_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_user_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_user_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_last_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_last_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_last_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_id_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_id_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_id_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_id_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_id_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_id_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_id_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_id_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_id_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_id_V_1_state_cmp_full : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_dest_V_1_vld_in : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_vld_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_ack_in : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_ack_out : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_dest_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal m_axis_video_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal m_axis_video_V_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal m_axis_video_V_dest_V_1_sel : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_load_A : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_load_B : STD_LOGIC;
    signal m_axis_video_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal m_axis_video_V_dest_V_1_state_cmp_full : STD_LOGIC;
    signal re_V : STD_LOGIC_VECTOR (17 downto 0);
    signal im_V : STD_LOGIC_VECTOR (17 downto 0);
    signal zoom_factor_V : STD_LOGIC_VECTOR (17 downto 0);
    signal zoom_factor_V_read_reg_170 : STD_LOGIC_VECTOR (17 downto 0);
    signal im_V_read_reg_175 : STD_LOGIC_VECTOR (17 downto 0);
    signal re_V_read_reg_180 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_136_ap_start : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_136_ap_done : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_136_ap_ready : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_136_ap_idle : STD_LOGIC;
    signal grp_dataflow_parent_loop_1_fu_136_ap_continue : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_ap_start : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_ap_done : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_ap_idle : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_ap_ready : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dataflow_parent_loop_1_fu_136_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready : STD_LOGIC;
    signal ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done : STD_LOGIC := '0';
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_write : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_write : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_write : STD_LOGIC;
    signal grp_Mat2AXIvideo_fu_149_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_0_read : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_read : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_read : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component dataflow_parent_loop_1 IS
    port (
        img_0_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_0_V_full_n : IN STD_LOGIC;
        img_0_data_stream_0_V_write : OUT STD_LOGIC;
        img_0_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_1_V_full_n : IN STD_LOGIC;
        img_0_data_stream_1_V_write : OUT STD_LOGIC;
        img_0_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_2_V_full_n : IN STD_LOGIC;
        img_0_data_stream_2_V_write : OUT STD_LOGIC;
        im_V : IN STD_LOGIC_VECTOR (17 downto 0);
        re_V : IN STD_LOGIC_VECTOR (17 downto 0);
        zoom_factor_V : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        im_V_ap_vld : IN STD_LOGIC;
        re_V_ap_vld : IN STD_LOGIC;
        zoom_factor_V_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component video_mandelbrot_generator_cmd_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        re_V : OUT STD_LOGIC_VECTOR (17 downto 0);
        im_V : OUT STD_LOGIC_VECTOR (17 downto 0);
        zoom_factor_V : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    video_mandelbrot_generator_cmd_s_axi_U : component video_mandelbrot_generator_cmd_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CMD_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CMD_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cmd_AWVALID,
        AWREADY => s_axi_cmd_AWREADY,
        AWADDR => s_axi_cmd_AWADDR,
        WVALID => s_axi_cmd_WVALID,
        WREADY => s_axi_cmd_WREADY,
        WDATA => s_axi_cmd_WDATA,
        WSTRB => s_axi_cmd_WSTRB,
        ARVALID => s_axi_cmd_ARVALID,
        ARREADY => s_axi_cmd_ARREADY,
        ARADDR => s_axi_cmd_ARADDR,
        RVALID => s_axi_cmd_RVALID,
        RREADY => s_axi_cmd_RREADY,
        RDATA => s_axi_cmd_RDATA,
        RRESP => s_axi_cmd_RRESP,
        BVALID => s_axi_cmd_BVALID,
        BREADY => s_axi_cmd_BREADY,
        BRESP => s_axi_cmd_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        re_V => re_V,
        im_V => im_V,
        zoom_factor_V => zoom_factor_V);

    grp_dataflow_parent_loop_1_fu_136 : component dataflow_parent_loop_1
    port map (
        img_0_data_stream_0_V_din => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din,
        img_0_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_0_data_stream_0_V_write => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write,
        img_0_data_stream_1_V_din => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din,
        img_0_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_0_data_stream_1_V_write => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write,
        img_0_data_stream_2_V_din => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din,
        img_0_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_0_data_stream_2_V_write => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write,
        im_V => im_V_read_reg_175,
        re_V => re_V_read_reg_180,
        zoom_factor_V => zoom_factor_V_read_reg_170,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        im_V_ap_vld => ap_const_logic_1,
        re_V_ap_vld => ap_const_logic_1,
        zoom_factor_V_ap_vld => ap_const_logic_1,
        ap_start => grp_dataflow_parent_loop_1_fu_136_ap_start,
        ap_done => grp_dataflow_parent_loop_1_fu_136_ap_done,
        ap_ready => grp_dataflow_parent_loop_1_fu_136_ap_ready,
        ap_idle => grp_dataflow_parent_loop_1_fu_136_ap_idle,
        ap_continue => grp_dataflow_parent_loop_1_fu_136_ap_continue);

    grp_Mat2AXIvideo_fu_149 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Mat2AXIvideo_fu_149_ap_start,
        ap_done => grp_Mat2AXIvideo_fu_149_ap_done,
        ap_idle => grp_Mat2AXIvideo_fu_149_ap_idle,
        ap_ready => grp_Mat2AXIvideo_fu_149_ap_ready,
        img_data_stream_0_V_dout => img_0_data_stream_0_dout,
        img_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        img_data_stream_0_V_read => grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_0_data_stream_1_dout,
        img_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        img_data_stream_1_V_read => grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_0_data_stream_2_dout,
        img_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        img_data_stream_2_V_read => grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read,
        m_axis_video_TDATA => grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA,
        m_axis_video_TVALID => grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID,
        m_axis_video_TREADY => grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY,
        m_axis_video_TKEEP => grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP,
        m_axis_video_TSTRB => grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB,
        m_axis_video_TUSER => grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER,
        m_axis_video_TLAST => grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST,
        m_axis_video_TID => grp_Mat2AXIvideo_fu_149_m_axis_video_TID,
        m_axis_video_TDEST => grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST);

    img_0_data_stream_0_fifo_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => img_0_data_stream_0_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => img_0_data_stream_0_read);

    img_0_data_stream_1_fifo_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => img_0_data_stream_1_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => img_0_data_stream_1_read);

    img_0_data_stream_2_fifo_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => img_0_data_stream_2_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => img_0_data_stream_2_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_1_fu_136_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready <= ap_const_logic_0;
                elsif ((grp_dataflow_parent_loop_1_fu_136_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Mat2AXIvideo_fu_149_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Mat2AXIvideo_fu_149_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_Mat2AXIvideo_fu_149_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Mat2AXIvideo_fu_149_ap_ready = ap_const_logic_1)) then 
                    grp_Mat2AXIvideo_fu_149_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dataflow_parent_loop_1_fu_136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dataflow_parent_loop_1_fu_136_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
                    grp_dataflow_parent_loop_1_fu_136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dataflow_parent_loop_1_fu_136_ap_ready = ap_const_logic_1)) then 
                    grp_dataflow_parent_loop_1_fu_136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_data_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_data_V_1_sel_rd <= not(m_axis_video_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_data_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_data_V_1_sel_wr <= not(m_axis_video_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_data_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_data_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_1) and (m_axis_video_V_data_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_2) and (m_axis_video_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_dest_V_1_sel_rd <= not(m_axis_video_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_dest_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_dest_V_1_sel_wr <= not(m_axis_video_V_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_dest_V_1_state = ap_const_lv2_2) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_dest_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_dest_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) and (m_axis_video_V_dest_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_2) and (m_axis_video_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_id_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_id_V_1_sel_rd <= not(m_axis_video_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_id_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_id_V_1_sel_wr <= not(m_axis_video_V_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_id_V_1_state = ap_const_lv2_2) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_id_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_id_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_id_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_1) and (m_axis_video_V_id_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_2) and (m_axis_video_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_keep_V_1_vld_out = ap_const_logic_1) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1))) then 
                                        m_axis_video_V_keep_V_1_sel_rd <= not(m_axis_video_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1) and (m_axis_video_V_keep_V_1_ack_in = ap_const_logic_1))) then 
                                        m_axis_video_V_keep_V_1_sel_wr <= not(m_axis_video_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_keep_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_keep_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_keep_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_1) and (m_axis_video_V_keep_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_2) and (m_axis_video_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_last_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_last_V_1_sel_rd <= not(m_axis_video_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_last_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_last_V_1_sel_wr <= not(m_axis_video_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_last_V_1_state = ap_const_lv2_2) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_last_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_last_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_last_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_1) and (m_axis_video_V_last_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_2) and (m_axis_video_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_strb_V_1_sel_rd <= not(m_axis_video_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_strb_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_strb_V_1_sel_wr <= not(m_axis_video_V_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_strb_V_1_state = ap_const_lv2_2) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_strb_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_strb_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_strb_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_1) and (m_axis_video_V_strb_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_2) and (m_axis_video_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((m_axis_video_V_user_V_1_ack_out = ap_const_logic_1) and (m_axis_video_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        m_axis_video_V_user_V_1_sel_rd <= not(m_axis_video_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((m_axis_video_V_user_V_1_ack_in = ap_const_logic_1) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        m_axis_video_V_user_V_1_sel_wr <= not(m_axis_video_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    m_axis_video_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                m_axis_video_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((m_axis_video_V_user_V_1_state = ap_const_lv2_2) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((m_axis_video_V_user_V_1_state = ap_const_lv2_1) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((m_axis_video_V_user_V_1_vld_in = ap_const_logic_0) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1))) and (m_axis_video_V_user_V_1_state = ap_const_lv2_3)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_1) and (m_axis_video_V_user_V_1_ack_out = ap_const_logic_1)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_2) and (m_axis_video_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    m_axis_video_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                im_V_read_reg_175 <= im_V;
                re_V_read_reg_180 <= re_V;
                zoom_factor_V_read_reg_170 <= zoom_factor_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_data_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_data_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_data_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_data_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_dest_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_dest_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_dest_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_dest_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_id_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_id_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_id_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_id_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_keep_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_keep_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_keep_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_keep_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_last_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_last_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_last_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_last_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_strb_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_strb_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_strb_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_strb_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_user_V_1_load_A = ap_const_logic_1)) then
                m_axis_video_V_user_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((m_axis_video_V_user_V_1_load_B = ap_const_logic_1)) then
                m_axis_video_V_user_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state, grp_Mat2AXIvideo_fu_149_ap_done, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_Mat2AXIvideo_fu_149_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state2_on_subcall_done_assign_proc : process(ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready, ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready and ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state5_assign_proc : process(m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state)
    begin
                ap_block_state5 <= ((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axis_video_TREADY, m_axis_video_V_data_V_1_state, m_axis_video_V_keep_V_1_state, m_axis_video_V_strb_V_1_state, m_axis_video_V_user_V_1_state, m_axis_video_V_last_V_1_state, m_axis_video_V_id_V_1_state, m_axis_video_V_dest_V_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((m_axis_video_V_dest_V_1_state = ap_const_lv2_1) or (m_axis_video_V_id_V_1_state = ap_const_lv2_1) or (m_axis_video_V_last_V_1_state = ap_const_lv2_1) or (m_axis_video_V_user_V_1_state = ap_const_lv2_1) or (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) or (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) or (m_axis_video_V_data_V_1_state = ap_const_lv2_1) or ((m_axis_video_V_data_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_dest_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_id_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_last_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_user_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_strb_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)) or ((m_axis_video_V_keep_V_1_state = ap_const_lv2_3) and (m_axis_video_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done <= (grp_dataflow_parent_loop_1_fu_136_ap_done or ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done);
    ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready <= (grp_dataflow_parent_loop_1_fu_136_ap_ready or ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready);
    grp_Mat2AXIvideo_fu_149_ap_start <= grp_Mat2AXIvideo_fu_149_ap_start_reg;
    grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY <= ((m_axis_video_V_dest_V_1_ack_in and ap_CS_fsm_state4) or (m_axis_video_V_data_V_1_ack_in and ap_CS_fsm_state4) or (m_axis_video_V_id_V_1_ack_in and ap_CS_fsm_state4) or (m_axis_video_V_last_V_1_ack_in and ap_CS_fsm_state4) or (m_axis_video_V_user_V_1_ack_in and ap_CS_fsm_state4) or (m_axis_video_V_strb_V_1_ack_in and ap_CS_fsm_state4) or (m_axis_video_V_keep_V_1_ack_in and ap_CS_fsm_state4));

    grp_dataflow_parent_loop_1_fu_136_ap_continue_assign_proc : process(ap_CS_fsm_state2, ap_block_state2_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            grp_dataflow_parent_loop_1_fu_136_ap_continue <= ap_const_logic_1;
        else 
            grp_dataflow_parent_loop_1_fu_136_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_dataflow_parent_loop_1_fu_136_ap_start <= grp_dataflow_parent_loop_1_fu_136_ap_start_reg;

    img_0_data_stream_0_read_assign_proc : process(grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_0_data_stream_0_read <= grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read;
        else 
            img_0_data_stream_0_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_0_write_assign_proc : process(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_0_data_stream_0_write <= grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write;
        else 
            img_0_data_stream_0_write <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_1_read_assign_proc : process(grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_0_data_stream_1_read <= grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read;
        else 
            img_0_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_1_write_assign_proc : process(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_0_data_stream_1_write <= grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write;
        else 
            img_0_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_2_read_assign_proc : process(grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            img_0_data_stream_2_read <= grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read;
        else 
            img_0_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    img_0_data_stream_2_write_assign_proc : process(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            img_0_data_stream_2_write <= grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write;
        else 
            img_0_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;

    m_axis_video_TDATA <= m_axis_video_V_data_V_1_data_out;
    m_axis_video_TDEST <= m_axis_video_V_dest_V_1_data_out;
    m_axis_video_TID <= m_axis_video_V_id_V_1_data_out;
    m_axis_video_TKEEP <= m_axis_video_V_keep_V_1_data_out;
    m_axis_video_TLAST <= m_axis_video_V_last_V_1_data_out;
    m_axis_video_TSTRB <= m_axis_video_V_strb_V_1_data_out;
    m_axis_video_TUSER <= m_axis_video_V_user_V_1_data_out;
    m_axis_video_TVALID <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_data_V_1_ack_in <= m_axis_video_V_data_V_1_state(1);
    m_axis_video_V_data_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_data_V_1_data_out_assign_proc : process(m_axis_video_V_data_V_1_payload_A, m_axis_video_V_data_V_1_payload_B, m_axis_video_V_data_V_1_sel)
    begin
        if ((m_axis_video_V_data_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_data_V_1_data_out <= m_axis_video_V_data_V_1_payload_B;
        else 
            m_axis_video_V_data_V_1_data_out <= m_axis_video_V_data_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_data_V_1_load_A <= (m_axis_video_V_data_V_1_state_cmp_full and not(m_axis_video_V_data_V_1_sel_wr));
    m_axis_video_V_data_V_1_load_B <= (m_axis_video_V_data_V_1_state_cmp_full and m_axis_video_V_data_V_1_sel_wr);
    m_axis_video_V_data_V_1_sel <= m_axis_video_V_data_V_1_sel_rd;
    m_axis_video_V_data_V_1_state_cmp_full <= '0' when (m_axis_video_V_data_V_1_state = ap_const_lv2_1) else '1';
    m_axis_video_V_data_V_1_vld_in <= grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
    m_axis_video_V_data_V_1_vld_out <= m_axis_video_V_data_V_1_state(0);
    m_axis_video_V_dest_V_1_ack_in <= m_axis_video_V_dest_V_1_state(1);
    m_axis_video_V_dest_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_dest_V_1_data_out_assign_proc : process(m_axis_video_V_dest_V_1_payload_A, m_axis_video_V_dest_V_1_payload_B, m_axis_video_V_dest_V_1_sel)
    begin
        if ((m_axis_video_V_dest_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_dest_V_1_data_out <= m_axis_video_V_dest_V_1_payload_B;
        else 
            m_axis_video_V_dest_V_1_data_out <= m_axis_video_V_dest_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_dest_V_1_load_A <= (m_axis_video_V_dest_V_1_state_cmp_full and not(m_axis_video_V_dest_V_1_sel_wr));
    m_axis_video_V_dest_V_1_load_B <= (m_axis_video_V_dest_V_1_state_cmp_full and m_axis_video_V_dest_V_1_sel_wr);
    m_axis_video_V_dest_V_1_sel <= m_axis_video_V_dest_V_1_sel_rd;
    m_axis_video_V_dest_V_1_state_cmp_full <= '0' when (m_axis_video_V_dest_V_1_state = ap_const_lv2_1) else '1';
    m_axis_video_V_dest_V_1_vld_in <= grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
    m_axis_video_V_dest_V_1_vld_out <= m_axis_video_V_dest_V_1_state(0);
    m_axis_video_V_id_V_1_ack_in <= m_axis_video_V_id_V_1_state(1);
    m_axis_video_V_id_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_id_V_1_data_out_assign_proc : process(m_axis_video_V_id_V_1_payload_A, m_axis_video_V_id_V_1_payload_B, m_axis_video_V_id_V_1_sel)
    begin
        if ((m_axis_video_V_id_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_id_V_1_data_out <= m_axis_video_V_id_V_1_payload_B;
        else 
            m_axis_video_V_id_V_1_data_out <= m_axis_video_V_id_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_id_V_1_load_A <= (m_axis_video_V_id_V_1_state_cmp_full and not(m_axis_video_V_id_V_1_sel_wr));
    m_axis_video_V_id_V_1_load_B <= (m_axis_video_V_id_V_1_state_cmp_full and m_axis_video_V_id_V_1_sel_wr);
    m_axis_video_V_id_V_1_sel <= m_axis_video_V_id_V_1_sel_rd;
    m_axis_video_V_id_V_1_state_cmp_full <= '0' when (m_axis_video_V_id_V_1_state = ap_const_lv2_1) else '1';
    m_axis_video_V_id_V_1_vld_in <= grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
    m_axis_video_V_id_V_1_vld_out <= m_axis_video_V_id_V_1_state(0);
    m_axis_video_V_keep_V_1_ack_in <= m_axis_video_V_keep_V_1_state(1);
    m_axis_video_V_keep_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_keep_V_1_data_out_assign_proc : process(m_axis_video_V_keep_V_1_payload_A, m_axis_video_V_keep_V_1_payload_B, m_axis_video_V_keep_V_1_sel)
    begin
        if ((m_axis_video_V_keep_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_keep_V_1_data_out <= m_axis_video_V_keep_V_1_payload_B;
        else 
            m_axis_video_V_keep_V_1_data_out <= m_axis_video_V_keep_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_keep_V_1_load_A <= (m_axis_video_V_keep_V_1_state_cmp_full and not(m_axis_video_V_keep_V_1_sel_wr));
    m_axis_video_V_keep_V_1_load_B <= (m_axis_video_V_keep_V_1_state_cmp_full and m_axis_video_V_keep_V_1_sel_wr);
    m_axis_video_V_keep_V_1_sel <= m_axis_video_V_keep_V_1_sel_rd;
    m_axis_video_V_keep_V_1_state_cmp_full <= '0' when (m_axis_video_V_keep_V_1_state = ap_const_lv2_1) else '1';
    m_axis_video_V_keep_V_1_vld_in <= grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
    m_axis_video_V_keep_V_1_vld_out <= m_axis_video_V_keep_V_1_state(0);
    m_axis_video_V_last_V_1_ack_in <= m_axis_video_V_last_V_1_state(1);
    m_axis_video_V_last_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_last_V_1_data_out_assign_proc : process(m_axis_video_V_last_V_1_payload_A, m_axis_video_V_last_V_1_payload_B, m_axis_video_V_last_V_1_sel)
    begin
        if ((m_axis_video_V_last_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_B;
        else 
            m_axis_video_V_last_V_1_data_out <= m_axis_video_V_last_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_last_V_1_load_A <= (m_axis_video_V_last_V_1_state_cmp_full and not(m_axis_video_V_last_V_1_sel_wr));
    m_axis_video_V_last_V_1_load_B <= (m_axis_video_V_last_V_1_state_cmp_full and m_axis_video_V_last_V_1_sel_wr);
    m_axis_video_V_last_V_1_sel <= m_axis_video_V_last_V_1_sel_rd;
    m_axis_video_V_last_V_1_state_cmp_full <= '0' when (m_axis_video_V_last_V_1_state = ap_const_lv2_1) else '1';
    m_axis_video_V_last_V_1_vld_in <= grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
    m_axis_video_V_last_V_1_vld_out <= m_axis_video_V_last_V_1_state(0);
    m_axis_video_V_strb_V_1_ack_in <= m_axis_video_V_strb_V_1_state(1);
    m_axis_video_V_strb_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_strb_V_1_data_out_assign_proc : process(m_axis_video_V_strb_V_1_payload_A, m_axis_video_V_strb_V_1_payload_B, m_axis_video_V_strb_V_1_sel)
    begin
        if ((m_axis_video_V_strb_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_strb_V_1_data_out <= m_axis_video_V_strb_V_1_payload_B;
        else 
            m_axis_video_V_strb_V_1_data_out <= m_axis_video_V_strb_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_strb_V_1_load_A <= (m_axis_video_V_strb_V_1_state_cmp_full and not(m_axis_video_V_strb_V_1_sel_wr));
    m_axis_video_V_strb_V_1_load_B <= (m_axis_video_V_strb_V_1_state_cmp_full and m_axis_video_V_strb_V_1_sel_wr);
    m_axis_video_V_strb_V_1_sel <= m_axis_video_V_strb_V_1_sel_rd;
    m_axis_video_V_strb_V_1_state_cmp_full <= '0' when (m_axis_video_V_strb_V_1_state = ap_const_lv2_1) else '1';
    m_axis_video_V_strb_V_1_vld_in <= grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
    m_axis_video_V_strb_V_1_vld_out <= m_axis_video_V_strb_V_1_state(0);
    m_axis_video_V_user_V_1_ack_in <= m_axis_video_V_user_V_1_state(1);
    m_axis_video_V_user_V_1_ack_out <= m_axis_video_TREADY;

    m_axis_video_V_user_V_1_data_out_assign_proc : process(m_axis_video_V_user_V_1_payload_A, m_axis_video_V_user_V_1_payload_B, m_axis_video_V_user_V_1_sel)
    begin
        if ((m_axis_video_V_user_V_1_sel = ap_const_logic_1)) then 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_B;
        else 
            m_axis_video_V_user_V_1_data_out <= m_axis_video_V_user_V_1_payload_A;
        end if; 
    end process;

    m_axis_video_V_user_V_1_load_A <= (m_axis_video_V_user_V_1_state_cmp_full and not(m_axis_video_V_user_V_1_sel_wr));
    m_axis_video_V_user_V_1_load_B <= (m_axis_video_V_user_V_1_state_cmp_full and m_axis_video_V_user_V_1_sel_wr);
    m_axis_video_V_user_V_1_sel <= m_axis_video_V_user_V_1_sel_rd;
    m_axis_video_V_user_V_1_state_cmp_full <= '0' when (m_axis_video_V_user_V_1_state = ap_const_lv2_1) else '1';
    m_axis_video_V_user_V_1_vld_in <= grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
    m_axis_video_V_user_V_1_vld_out <= m_axis_video_V_user_V_1_state(0);
end behav;
