// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dataflow_parent_loop_1 (
        img_0_data_stream_0_V_din,
        img_0_data_stream_0_V_full_n,
        img_0_data_stream_0_V_write,
        img_0_data_stream_1_V_din,
        img_0_data_stream_1_V_full_n,
        img_0_data_stream_1_V_write,
        img_0_data_stream_2_V_din,
        img_0_data_stream_2_V_full_n,
        img_0_data_stream_2_V_write,
        im_V,
        re_V,
        zoom_factor_V,
        ap_clk,
        ap_rst,
        im_V_ap_vld,
        re_V_ap_vld,
        zoom_factor_V_ap_vld,
        ap_start,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


output  [7:0] img_0_data_stream_0_V_din;
input   img_0_data_stream_0_V_full_n;
output   img_0_data_stream_0_V_write;
output  [7:0] img_0_data_stream_1_V_din;
input   img_0_data_stream_1_V_full_n;
output   img_0_data_stream_1_V_write;
output  [7:0] img_0_data_stream_2_V_din;
input   img_0_data_stream_2_V_full_n;
output   img_0_data_stream_2_V_write;
input  [17:0] im_V;
input  [17:0] re_V;
input  [17:0] zoom_factor_V;
input   ap_clk;
input   ap_rst;
input   im_V_ap_vld;
input   re_V_ap_vld;
input   zoom_factor_V_ap_vld;
input   ap_start;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg ap_done;
reg ap_ready;
reg ap_idle;

wire   [7:0] dataflow_in_loop_out_U0_img_0_data_stream_0_V_din;
wire    dataflow_in_loop_out_U0_img_0_data_stream_0_V_write;
wire   [7:0] dataflow_in_loop_out_U0_img_0_data_stream_1_V_din;
wire    dataflow_in_loop_out_U0_img_0_data_stream_1_V_write;
wire   [7:0] dataflow_in_loop_out_U0_img_0_data_stream_2_V_din;
wire    dataflow_in_loop_out_U0_img_0_data_stream_2_V_write;
wire    dataflow_in_loop_out_U0_ap_start;
wire    dataflow_in_loop_out_U0_ap_done;
wire    dataflow_in_loop_out_U0_ap_ready;
wire    dataflow_in_loop_out_U0_ap_idle;
reg    dataflow_in_loop_out_U0_ap_continue;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
reg   [2:0] loop_dataflow_input_count;
reg   [2:0] loop_dataflow_output_count;
wire   [2:0] bound_minus_1;
wire    dataflow_in_loop_out_U0_start_full_n;
wire    dataflow_in_loop_out_U0_start_write;

// power-on initialization
initial begin
#0 loop_dataflow_input_count = 3'd0;
#0 loop_dataflow_output_count = 3'd0;
end

dataflow_in_loop_out dataflow_in_loop_out_U0(
    .img_0_data_stream_0_V_din(dataflow_in_loop_out_U0_img_0_data_stream_0_V_din),
    .img_0_data_stream_0_V_full_n(img_0_data_stream_0_V_full_n),
    .img_0_data_stream_0_V_write(dataflow_in_loop_out_U0_img_0_data_stream_0_V_write),
    .img_0_data_stream_1_V_din(dataflow_in_loop_out_U0_img_0_data_stream_1_V_din),
    .img_0_data_stream_1_V_full_n(img_0_data_stream_1_V_full_n),
    .img_0_data_stream_1_V_write(dataflow_in_loop_out_U0_img_0_data_stream_1_V_write),
    .img_0_data_stream_2_V_din(dataflow_in_loop_out_U0_img_0_data_stream_2_V_din),
    .img_0_data_stream_2_V_full_n(img_0_data_stream_2_V_full_n),
    .img_0_data_stream_2_V_write(dataflow_in_loop_out_U0_img_0_data_stream_2_V_write),
    .im_V(im_V),
    .v_assign(loop_dataflow_input_count),
    .re_V(re_V),
    .zoom_factor_V(zoom_factor_V),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .im_V_ap_vld(im_V_ap_vld),
    .v_assign_ap_vld(1'b0),
    .re_V_ap_vld(re_V_ap_vld),
    .zoom_factor_V_ap_vld(zoom_factor_V_ap_vld),
    .ap_start(dataflow_in_loop_out_U0_ap_start),
    .ap_done(dataflow_in_loop_out_U0_ap_done),
    .ap_ready(dataflow_in_loop_out_U0_ap_ready),
    .ap_idle(dataflow_in_loop_out_U0_ap_idle),
    .ap_continue(dataflow_in_loop_out_U0_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_input_count <= 3'd0;
    end else begin
        if ((~(loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_out_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= (loop_dataflow_input_count + 3'd1);
        end else if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_out_U0_ap_ready == 1'b1))) begin
            loop_dataflow_input_count <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        loop_dataflow_output_count <= 3'd0;
    end else begin
        if ((~(loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_out_U0_ap_continue == 1'b1) & (dataflow_in_loop_out_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= (loop_dataflow_output_count + 3'd1);
        end else if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_out_U0_ap_continue == 1'b1) & (dataflow_in_loop_out_U0_ap_done == 1'b1))) begin
            loop_dataflow_output_count <= 3'd0;
        end
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == bound_minus_1) & (dataflow_in_loop_out_U0_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_output_count == 3'd0) & (ap_start == 1'b0) & (dataflow_in_loop_out_U0_ap_idle == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((loop_dataflow_input_count == bound_minus_1) & (ap_start == 1'b1) & (dataflow_in_loop_out_U0_ap_ready == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~(loop_dataflow_output_count == bound_minus_1) | (ap_continue == 1'b1))) begin
        dataflow_in_loop_out_U0_ap_continue = 1'b1;
    end else begin
        dataflow_in_loop_out_U0_ap_continue = 1'b0;
    end
end

assign ap_sync_continue = ap_continue;

assign ap_sync_done = dataflow_in_loop_out_U0_ap_done;

assign ap_sync_ready = dataflow_in_loop_out_U0_ap_ready;

assign bound_minus_1 = (3'd6 - 3'd1);

assign dataflow_in_loop_out_U0_ap_start = ap_start;

assign dataflow_in_loop_out_U0_start_full_n = 1'b1;

assign dataflow_in_loop_out_U0_start_write = 1'b0;

assign img_0_data_stream_0_V_din = dataflow_in_loop_out_U0_img_0_data_stream_0_V_din;

assign img_0_data_stream_0_V_write = dataflow_in_loop_out_U0_img_0_data_stream_0_V_write;

assign img_0_data_stream_1_V_din = dataflow_in_loop_out_U0_img_0_data_stream_1_V_din;

assign img_0_data_stream_1_V_write = dataflow_in_loop_out_U0_img_0_data_stream_1_V_write;

assign img_0_data_stream_2_V_din = dataflow_in_loop_out_U0_img_0_data_stream_2_V_din;

assign img_0_data_stream_2_V_write = dataflow_in_loop_out_U0_img_0_data_stream_2_V_write;

endmodule //dataflow_parent_loop_1
