// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="video_mandelbrot_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020i-clg484-1L,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.516375,HLS_SYN_LAT=1914,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=6,HLS_SYN_FF=1260,HLS_SYN_LUT=3183,HLS_VERSION=2019_1}" *)

module video_mandelbrot_generator (
        ap_clk,
        ap_rst_n,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        s_axi_cmd_AWVALID,
        s_axi_cmd_AWREADY,
        s_axi_cmd_AWADDR,
        s_axi_cmd_WVALID,
        s_axi_cmd_WREADY,
        s_axi_cmd_WDATA,
        s_axi_cmd_WSTRB,
        s_axi_cmd_ARVALID,
        s_axi_cmd_ARREADY,
        s_axi_cmd_ARADDR,
        s_axi_cmd_RVALID,
        s_axi_cmd_RREADY,
        s_axi_cmd_RDATA,
        s_axi_cmd_RRESP,
        s_axi_cmd_BVALID,
        s_axi_cmd_BREADY,
        s_axi_cmd_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CMD_DATA_WIDTH = 32;
parameter    C_S_AXI_CMD_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CMD_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input   s_axi_cmd_AWVALID;
output   s_axi_cmd_AWREADY;
input  [C_S_AXI_CMD_ADDR_WIDTH - 1:0] s_axi_cmd_AWADDR;
input   s_axi_cmd_WVALID;
output   s_axi_cmd_WREADY;
input  [C_S_AXI_CMD_DATA_WIDTH - 1:0] s_axi_cmd_WDATA;
input  [C_S_AXI_CMD_WSTRB_WIDTH - 1:0] s_axi_cmd_WSTRB;
input   s_axi_cmd_ARVALID;
output   s_axi_cmd_ARREADY;
input  [C_S_AXI_CMD_ADDR_WIDTH - 1:0] s_axi_cmd_ARADDR;
output   s_axi_cmd_RVALID;
input   s_axi_cmd_RREADY;
output  [C_S_AXI_CMD_DATA_WIDTH - 1:0] s_axi_cmd_RDATA;
output  [1:0] s_axi_cmd_RRESP;
output   s_axi_cmd_BVALID;
input   s_axi_cmd_BREADY;
output  [1:0] s_axi_cmd_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [23:0] m_axis_video_V_data_V_1_data_out;
wire    m_axis_video_V_data_V_1_vld_in;
wire    m_axis_video_V_data_V_1_vld_out;
wire    m_axis_video_V_data_V_1_ack_in;
wire    m_axis_video_V_data_V_1_ack_out;
reg   [23:0] m_axis_video_V_data_V_1_payload_A;
reg   [23:0] m_axis_video_V_data_V_1_payload_B;
reg    m_axis_video_V_data_V_1_sel_rd;
reg    m_axis_video_V_data_V_1_sel_wr;
wire    m_axis_video_V_data_V_1_sel;
wire    m_axis_video_V_data_V_1_load_A;
wire    m_axis_video_V_data_V_1_load_B;
reg   [1:0] m_axis_video_V_data_V_1_state;
wire    m_axis_video_V_data_V_1_state_cmp_full;
reg   [2:0] m_axis_video_V_keep_V_1_data_out;
wire    m_axis_video_V_keep_V_1_vld_in;
wire    m_axis_video_V_keep_V_1_vld_out;
wire    m_axis_video_V_keep_V_1_ack_in;
wire    m_axis_video_V_keep_V_1_ack_out;
reg   [2:0] m_axis_video_V_keep_V_1_payload_A;
reg   [2:0] m_axis_video_V_keep_V_1_payload_B;
reg    m_axis_video_V_keep_V_1_sel_rd;
reg    m_axis_video_V_keep_V_1_sel_wr;
wire    m_axis_video_V_keep_V_1_sel;
wire    m_axis_video_V_keep_V_1_load_A;
wire    m_axis_video_V_keep_V_1_load_B;
reg   [1:0] m_axis_video_V_keep_V_1_state;
wire    m_axis_video_V_keep_V_1_state_cmp_full;
reg   [2:0] m_axis_video_V_strb_V_1_data_out;
wire    m_axis_video_V_strb_V_1_vld_in;
wire    m_axis_video_V_strb_V_1_vld_out;
wire    m_axis_video_V_strb_V_1_ack_in;
wire    m_axis_video_V_strb_V_1_ack_out;
reg   [2:0] m_axis_video_V_strb_V_1_payload_A;
reg   [2:0] m_axis_video_V_strb_V_1_payload_B;
reg    m_axis_video_V_strb_V_1_sel_rd;
reg    m_axis_video_V_strb_V_1_sel_wr;
wire    m_axis_video_V_strb_V_1_sel;
wire    m_axis_video_V_strb_V_1_load_A;
wire    m_axis_video_V_strb_V_1_load_B;
reg   [1:0] m_axis_video_V_strb_V_1_state;
wire    m_axis_video_V_strb_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_user_V_1_data_out;
wire    m_axis_video_V_user_V_1_vld_in;
wire    m_axis_video_V_user_V_1_vld_out;
wire    m_axis_video_V_user_V_1_ack_in;
wire    m_axis_video_V_user_V_1_ack_out;
reg   [0:0] m_axis_video_V_user_V_1_payload_A;
reg   [0:0] m_axis_video_V_user_V_1_payload_B;
reg    m_axis_video_V_user_V_1_sel_rd;
reg    m_axis_video_V_user_V_1_sel_wr;
wire    m_axis_video_V_user_V_1_sel;
wire    m_axis_video_V_user_V_1_load_A;
wire    m_axis_video_V_user_V_1_load_B;
reg   [1:0] m_axis_video_V_user_V_1_state;
wire    m_axis_video_V_user_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_last_V_1_data_out;
wire    m_axis_video_V_last_V_1_vld_in;
wire    m_axis_video_V_last_V_1_vld_out;
wire    m_axis_video_V_last_V_1_ack_in;
wire    m_axis_video_V_last_V_1_ack_out;
reg   [0:0] m_axis_video_V_last_V_1_payload_A;
reg   [0:0] m_axis_video_V_last_V_1_payload_B;
reg    m_axis_video_V_last_V_1_sel_rd;
reg    m_axis_video_V_last_V_1_sel_wr;
wire    m_axis_video_V_last_V_1_sel;
wire    m_axis_video_V_last_V_1_load_A;
wire    m_axis_video_V_last_V_1_load_B;
reg   [1:0] m_axis_video_V_last_V_1_state;
wire    m_axis_video_V_last_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_id_V_1_data_out;
wire    m_axis_video_V_id_V_1_vld_in;
wire    m_axis_video_V_id_V_1_vld_out;
wire    m_axis_video_V_id_V_1_ack_in;
wire    m_axis_video_V_id_V_1_ack_out;
reg   [0:0] m_axis_video_V_id_V_1_payload_A;
reg   [0:0] m_axis_video_V_id_V_1_payload_B;
reg    m_axis_video_V_id_V_1_sel_rd;
reg    m_axis_video_V_id_V_1_sel_wr;
wire    m_axis_video_V_id_V_1_sel;
wire    m_axis_video_V_id_V_1_load_A;
wire    m_axis_video_V_id_V_1_load_B;
reg   [1:0] m_axis_video_V_id_V_1_state;
wire    m_axis_video_V_id_V_1_state_cmp_full;
reg   [0:0] m_axis_video_V_dest_V_1_data_out;
wire    m_axis_video_V_dest_V_1_vld_in;
wire    m_axis_video_V_dest_V_1_vld_out;
wire    m_axis_video_V_dest_V_1_ack_in;
wire    m_axis_video_V_dest_V_1_ack_out;
reg   [0:0] m_axis_video_V_dest_V_1_payload_A;
reg   [0:0] m_axis_video_V_dest_V_1_payload_B;
reg    m_axis_video_V_dest_V_1_sel_rd;
reg    m_axis_video_V_dest_V_1_sel_wr;
wire    m_axis_video_V_dest_V_1_sel;
wire    m_axis_video_V_dest_V_1_load_A;
wire    m_axis_video_V_dest_V_1_load_B;
reg   [1:0] m_axis_video_V_dest_V_1_state;
wire    m_axis_video_V_dest_V_1_state_cmp_full;
wire   [17:0] re_V;
wire   [17:0] im_V;
wire   [17:0] zoom_factor_V;
reg   [17:0] zoom_factor_V_read_reg_170;
reg   [17:0] im_V_read_reg_175;
reg   [17:0] re_V_read_reg_180;
wire   [7:0] grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din;
wire    grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write;
wire   [7:0] grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din;
wire    grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write;
wire   [7:0] grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din;
wire    grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write;
wire    grp_dataflow_parent_loop_1_fu_136_ap_start;
wire    grp_dataflow_parent_loop_1_fu_136_ap_done;
wire    grp_dataflow_parent_loop_1_fu_136_ap_ready;
wire    grp_dataflow_parent_loop_1_fu_136_ap_idle;
reg    grp_dataflow_parent_loop_1_fu_136_ap_continue;
wire    grp_Mat2AXIvideo_fu_149_ap_start;
wire    grp_Mat2AXIvideo_fu_149_ap_done;
wire    grp_Mat2AXIvideo_fu_149_ap_idle;
wire    grp_Mat2AXIvideo_fu_149_ap_ready;
wire    grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read;
wire    grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read;
wire    grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read;
wire   [23:0] grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA;
wire    grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;
wire    grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY;
wire   [2:0] grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP;
wire   [2:0] grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB;
wire   [0:0] grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER;
wire   [0:0] grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST;
wire   [0:0] grp_Mat2AXIvideo_fu_149_m_axis_video_TID;
wire   [0:0] grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST;
reg    grp_dataflow_parent_loop_1_fu_136_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready;
wire    ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready;
reg    ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done;
wire    img_0_data_stream_0_full_n;
reg    img_0_data_stream_0_write;
wire    img_0_data_stream_1_full_n;
reg    img_0_data_stream_1_write;
wire    img_0_data_stream_2_full_n;
reg    img_0_data_stream_2_write;
reg    grp_Mat2AXIvideo_fu_149_ap_start_reg;
wire    ap_CS_fsm_state3;
wire   [7:0] img_0_data_stream_0_dout;
wire    img_0_data_stream_0_empty_n;
reg    img_0_data_stream_0_read;
wire    ap_CS_fsm_state4;
wire   [7:0] img_0_data_stream_1_dout;
wire    img_0_data_stream_1_empty_n;
reg    img_0_data_stream_1_read;
wire   [7:0] img_0_data_stream_2_dout;
wire    img_0_data_stream_2_empty_n;
reg    img_0_data_stream_2_read;
wire    ap_CS_fsm_state5;
reg    ap_block_state5;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 m_axis_video_V_data_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_data_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_data_V_1_state = 2'd0;
#0 m_axis_video_V_keep_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_keep_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_keep_V_1_state = 2'd0;
#0 m_axis_video_V_strb_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_strb_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_strb_V_1_state = 2'd0;
#0 m_axis_video_V_user_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_user_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_user_V_1_state = 2'd0;
#0 m_axis_video_V_last_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_last_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_last_V_1_state = 2'd0;
#0 m_axis_video_V_id_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_id_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_id_V_1_state = 2'd0;
#0 m_axis_video_V_dest_V_1_sel_rd = 1'b0;
#0 m_axis_video_V_dest_V_1_sel_wr = 1'b0;
#0 m_axis_video_V_dest_V_1_state = 2'd0;
#0 grp_dataflow_parent_loop_1_fu_136_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready = 1'b0;
#0 ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done = 1'b0;
#0 grp_Mat2AXIvideo_fu_149_ap_start_reg = 1'b0;
end

video_mandelbrot_generator_cmd_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CMD_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CMD_DATA_WIDTH ))
video_mandelbrot_generator_cmd_s_axi_U(
    .AWVALID(s_axi_cmd_AWVALID),
    .AWREADY(s_axi_cmd_AWREADY),
    .AWADDR(s_axi_cmd_AWADDR),
    .WVALID(s_axi_cmd_WVALID),
    .WREADY(s_axi_cmd_WREADY),
    .WDATA(s_axi_cmd_WDATA),
    .WSTRB(s_axi_cmd_WSTRB),
    .ARVALID(s_axi_cmd_ARVALID),
    .ARREADY(s_axi_cmd_ARREADY),
    .ARADDR(s_axi_cmd_ARADDR),
    .RVALID(s_axi_cmd_RVALID),
    .RREADY(s_axi_cmd_RREADY),
    .RDATA(s_axi_cmd_RDATA),
    .RRESP(s_axi_cmd_RRESP),
    .BVALID(s_axi_cmd_BVALID),
    .BREADY(s_axi_cmd_BREADY),
    .BRESP(s_axi_cmd_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .re_V(re_V),
    .im_V(im_V),
    .zoom_factor_V(zoom_factor_V)
);

dataflow_parent_loop_1 grp_dataflow_parent_loop_1_fu_136(
    .img_0_data_stream_0_V_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din),
    .img_0_data_stream_0_V_full_n(img_0_data_stream_0_full_n),
    .img_0_data_stream_0_V_write(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write),
    .img_0_data_stream_1_V_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din),
    .img_0_data_stream_1_V_full_n(img_0_data_stream_1_full_n),
    .img_0_data_stream_1_V_write(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write),
    .img_0_data_stream_2_V_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din),
    .img_0_data_stream_2_V_full_n(img_0_data_stream_2_full_n),
    .img_0_data_stream_2_V_write(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write),
    .im_V(im_V_read_reg_175),
    .re_V(re_V_read_reg_180),
    .zoom_factor_V(zoom_factor_V_read_reg_170),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .im_V_ap_vld(1'b1),
    .re_V_ap_vld(1'b1),
    .zoom_factor_V_ap_vld(1'b1),
    .ap_start(grp_dataflow_parent_loop_1_fu_136_ap_start),
    .ap_done(grp_dataflow_parent_loop_1_fu_136_ap_done),
    .ap_ready(grp_dataflow_parent_loop_1_fu_136_ap_ready),
    .ap_idle(grp_dataflow_parent_loop_1_fu_136_ap_idle),
    .ap_continue(grp_dataflow_parent_loop_1_fu_136_ap_continue)
);

Mat2AXIvideo grp_Mat2AXIvideo_fu_149(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_Mat2AXIvideo_fu_149_ap_start),
    .ap_done(grp_Mat2AXIvideo_fu_149_ap_done),
    .ap_idle(grp_Mat2AXIvideo_fu_149_ap_idle),
    .ap_ready(grp_Mat2AXIvideo_fu_149_ap_ready),
    .img_data_stream_0_V_dout(img_0_data_stream_0_dout),
    .img_data_stream_0_V_empty_n(img_0_data_stream_0_empty_n),
    .img_data_stream_0_V_read(grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read),
    .img_data_stream_1_V_dout(img_0_data_stream_1_dout),
    .img_data_stream_1_V_empty_n(img_0_data_stream_1_empty_n),
    .img_data_stream_1_V_read(grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read),
    .img_data_stream_2_V_dout(img_0_data_stream_2_dout),
    .img_data_stream_2_V_empty_n(img_0_data_stream_2_empty_n),
    .img_data_stream_2_V_read(grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read),
    .m_axis_video_TDATA(grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA),
    .m_axis_video_TVALID(grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID),
    .m_axis_video_TREADY(grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY),
    .m_axis_video_TKEEP(grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP),
    .m_axis_video_TSTRB(grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB),
    .m_axis_video_TUSER(grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER),
    .m_axis_video_TLAST(grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST),
    .m_axis_video_TID(grp_Mat2AXIvideo_fu_149_m_axis_video_TID),
    .m_axis_video_TDEST(grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST)
);

fifo_w8_d2_A img_0_data_stream_0_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_din),
    .if_full_n(img_0_data_stream_0_full_n),
    .if_write(img_0_data_stream_0_write),
    .if_dout(img_0_data_stream_0_dout),
    .if_empty_n(img_0_data_stream_0_empty_n),
    .if_read(img_0_data_stream_0_read)
);

fifo_w8_d2_A img_0_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_din),
    .if_full_n(img_0_data_stream_1_full_n),
    .if_write(img_0_data_stream_1_write),
    .if_dout(img_0_data_stream_1_dout),
    .if_empty_n(img_0_data_stream_1_empty_n),
    .if_read(img_0_data_stream_1_read)
);

fifo_w8_d2_A img_0_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_din),
    .if_full_n(img_0_data_stream_2_full_n),
    .if_write(img_0_data_stream_2_write),
    .if_dout(img_0_data_stream_2_dout),
    .if_empty_n(img_0_data_stream_2_empty_n),
    .if_read(img_0_data_stream_2_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done <= 1'b0;
        end else if ((grp_dataflow_parent_loop_1_fu_136_ap_done == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready <= 1'b0;
        end else if ((grp_dataflow_parent_loop_1_fu_136_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_Mat2AXIvideo_fu_149_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_Mat2AXIvideo_fu_149_ap_start_reg <= 1'b1;
        end else if ((grp_Mat2AXIvideo_fu_149_ap_ready == 1'b1)) begin
            grp_Mat2AXIvideo_fu_149_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_dataflow_parent_loop_1_fu_136_ap_start_reg <= 1'b0;
    end else begin
        if ((((ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state2)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_dataflow_parent_loop_1_fu_136_ap_start_reg <= 1'b1;
        end else if ((grp_dataflow_parent_loop_1_fu_136_ap_ready == 1'b1)) begin
            grp_dataflow_parent_loop_1_fu_136_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_out == 1'b1) & (m_axis_video_V_data_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_rd <= ~m_axis_video_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_data_V_1_ack_in == 1'b1) & (m_axis_video_V_data_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_data_V_1_sel_wr <= ~m_axis_video_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_data_V_1_vld_in == 1'b0) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_data_V_1_vld_in == 1'b1)) & (m_axis_video_V_data_V_1_state == 2'd3)) | ((m_axis_video_V_data_V_1_state == 2'd1) & (m_axis_video_V_data_V_1_ack_out == 1'b1)) | ((m_axis_video_V_data_V_1_state == 2'd2) & (m_axis_video_V_data_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_data_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_out == 1'b1) & (m_axis_video_V_dest_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_rd <= ~m_axis_video_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_dest_V_1_ack_in == 1'b1) & (m_axis_video_V_dest_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_dest_V_1_sel_wr <= ~m_axis_video_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_dest_V_1_vld_in == 1'b0) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)) & (m_axis_video_V_dest_V_1_state == 2'd3)) | ((m_axis_video_V_dest_V_1_state == 2'd1) & (m_axis_video_V_dest_V_1_ack_out == 1'b1)) | ((m_axis_video_V_dest_V_1_state == 2'd2) & (m_axis_video_V_dest_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_dest_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_out == 1'b1) & (m_axis_video_V_id_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_rd <= ~m_axis_video_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_id_V_1_ack_in == 1'b1) & (m_axis_video_V_id_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_id_V_1_sel_wr <= ~m_axis_video_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_id_V_1_vld_in == 1'b0) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_id_V_1_vld_in == 1'b1)) & (m_axis_video_V_id_V_1_state == 2'd3)) | ((m_axis_video_V_id_V_1_state == 2'd1) & (m_axis_video_V_id_V_1_ack_out == 1'b1)) | ((m_axis_video_V_id_V_1_state == 2'd2) & (m_axis_video_V_id_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_id_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_vld_out == 1'b1) & (m_axis_video_V_keep_V_1_ack_out == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_rd <= ~m_axis_video_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_keep_V_1_vld_in == 1'b1) & (m_axis_video_V_keep_V_1_ack_in == 1'b1))) begin
            m_axis_video_V_keep_V_1_sel_wr <= ~m_axis_video_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_keep_V_1_vld_in == 1'b0) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)) & (m_axis_video_V_keep_V_1_state == 2'd3)) | ((m_axis_video_V_keep_V_1_state == 2'd1) & (m_axis_video_V_keep_V_1_ack_out == 1'b1)) | ((m_axis_video_V_keep_V_1_state == 2'd2) & (m_axis_video_V_keep_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_keep_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_out == 1'b1) & (m_axis_video_V_last_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_rd <= ~m_axis_video_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_last_V_1_ack_in == 1'b1) & (m_axis_video_V_last_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_last_V_1_sel_wr <= ~m_axis_video_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_last_V_1_vld_in == 1'b0) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_last_V_1_vld_in == 1'b1)) & (m_axis_video_V_last_V_1_state == 2'd3)) | ((m_axis_video_V_last_V_1_state == 2'd1) & (m_axis_video_V_last_V_1_ack_out == 1'b1)) | ((m_axis_video_V_last_V_1_state == 2'd2) & (m_axis_video_V_last_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_last_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_out == 1'b1) & (m_axis_video_V_strb_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_rd <= ~m_axis_video_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_strb_V_1_ack_in == 1'b1) & (m_axis_video_V_strb_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_strb_V_1_sel_wr <= ~m_axis_video_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_strb_V_1_vld_in == 1'b0) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)) & (m_axis_video_V_strb_V_1_state == 2'd3)) | ((m_axis_video_V_strb_V_1_state == 2'd1) & (m_axis_video_V_strb_V_1_ack_out == 1'b1)) | ((m_axis_video_V_strb_V_1_state == 2'd2) & (m_axis_video_V_strb_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_strb_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_out == 1'b1) & (m_axis_video_V_user_V_1_vld_out == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_rd <= ~m_axis_video_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((m_axis_video_V_user_V_1_ack_in == 1'b1) & (m_axis_video_V_user_V_1_vld_in == 1'b1))) begin
            m_axis_video_V_user_V_1_sel_wr <= ~m_axis_video_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        m_axis_video_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end else if ((((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd1;
        end else if (((~((m_axis_video_V_user_V_1_vld_in == 1'b0) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) & ~((m_axis_video_TREADY == 1'b0) & (m_axis_video_V_user_V_1_vld_in == 1'b1)) & (m_axis_video_V_user_V_1_state == 2'd3)) | ((m_axis_video_V_user_V_1_state == 2'd1) & (m_axis_video_V_user_V_1_ack_out == 1'b1)) | ((m_axis_video_V_user_V_1_state == 2'd2) & (m_axis_video_V_user_V_1_vld_in == 1'b1)))) begin
            m_axis_video_V_user_V_1_state <= 2'd3;
        end else begin
            m_axis_video_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        im_V_read_reg_175 <= im_V;
        re_V_read_reg_180 <= re_V;
        zoom_factor_V_read_reg_170 <= zoom_factor_V;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_A == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_data_V_1_load_B == 1'b1)) begin
        m_axis_video_V_data_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_dest_V_1_load_A == 1'b1)) begin
        m_axis_video_V_dest_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_dest_V_1_load_B == 1'b1)) begin
        m_axis_video_V_dest_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_id_V_1_load_A == 1'b1)) begin
        m_axis_video_V_id_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_id_V_1_load_B == 1'b1)) begin
        m_axis_video_V_id_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_keep_V_1_load_A == 1'b1)) begin
        m_axis_video_V_keep_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_keep_V_1_load_B == 1'b1)) begin
        m_axis_video_V_keep_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_A == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_last_V_1_load_B == 1'b1)) begin
        m_axis_video_V_last_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_strb_V_1_load_A == 1'b1)) begin
        m_axis_video_V_strb_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_strb_V_1_load_B == 1'b1)) begin
        m_axis_video_V_strb_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_A == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_A <= grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((m_axis_video_V_user_V_1_load_B == 1'b1)) begin
        m_axis_video_V_user_V_1_payload_B <= grp_Mat2AXIvideo_fu_149_m_axis_video_TUSER;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        grp_dataflow_parent_loop_1_fu_136_ap_continue = 1'b1;
    end else begin
        grp_dataflow_parent_loop_1_fu_136_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_0_data_stream_0_read = grp_Mat2AXIvideo_fu_149_img_data_stream_0_V_read;
    end else begin
        img_0_data_stream_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_0_data_stream_0_write = grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_0_V_write;
    end else begin
        img_0_data_stream_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_0_data_stream_1_read = grp_Mat2AXIvideo_fu_149_img_data_stream_1_V_read;
    end else begin
        img_0_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_0_data_stream_1_write = grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_1_V_write;
    end else begin
        img_0_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        img_0_data_stream_2_read = grp_Mat2AXIvideo_fu_149_img_data_stream_2_V_read;
    end else begin
        img_0_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        img_0_data_stream_2_write = grp_dataflow_parent_loop_1_fu_136_img_0_data_stream_2_V_write;
    end else begin
        img_0_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((m_axis_video_V_data_V_1_sel == 1'b1)) begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_B;
    end else begin
        m_axis_video_V_data_V_1_data_out = m_axis_video_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((m_axis_video_V_dest_V_1_sel == 1'b1)) begin
        m_axis_video_V_dest_V_1_data_out = m_axis_video_V_dest_V_1_payload_B;
    end else begin
        m_axis_video_V_dest_V_1_data_out = m_axis_video_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((m_axis_video_V_id_V_1_sel == 1'b1)) begin
        m_axis_video_V_id_V_1_data_out = m_axis_video_V_id_V_1_payload_B;
    end else begin
        m_axis_video_V_id_V_1_data_out = m_axis_video_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((m_axis_video_V_keep_V_1_sel == 1'b1)) begin
        m_axis_video_V_keep_V_1_data_out = m_axis_video_V_keep_V_1_payload_B;
    end else begin
        m_axis_video_V_keep_V_1_data_out = m_axis_video_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((m_axis_video_V_last_V_1_sel == 1'b1)) begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_B;
    end else begin
        m_axis_video_V_last_V_1_data_out = m_axis_video_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((m_axis_video_V_strb_V_1_sel == 1'b1)) begin
        m_axis_video_V_strb_V_1_data_out = m_axis_video_V_strb_V_1_payload_B;
    end else begin
        m_axis_video_V_strb_V_1_data_out = m_axis_video_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((m_axis_video_V_user_V_1_sel == 1'b1)) begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_B;
    end else begin
        m_axis_video_V_user_V_1_data_out = m_axis_video_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_Mat2AXIvideo_fu_149_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready & ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done) == 1'b0);
end

always @ (*) begin
    ap_block_state5 = ((m_axis_video_V_dest_V_1_state == 2'd1) | (m_axis_video_V_id_V_1_state == 2'd1) | (m_axis_video_V_last_V_1_state == 2'd1) | (m_axis_video_V_user_V_1_state == 2'd1) | (m_axis_video_V_strb_V_1_state == 2'd1) | (m_axis_video_V_keep_V_1_state == 2'd1) | (m_axis_video_V_data_V_1_state == 2'd1) | ((m_axis_video_V_data_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_dest_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_id_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_last_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_user_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_strb_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)) | ((m_axis_video_V_keep_V_1_state == 2'd3) & (m_axis_video_TREADY == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_done = (grp_dataflow_parent_loop_1_fu_136_ap_done | ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_done);

assign ap_sync_grp_dataflow_parent_loop_1_fu_136_ap_ready = (grp_dataflow_parent_loop_1_fu_136_ap_ready | ap_sync_reg_grp_dataflow_parent_loop_1_fu_136_ap_ready);

assign grp_Mat2AXIvideo_fu_149_ap_start = grp_Mat2AXIvideo_fu_149_ap_start_reg;

assign grp_Mat2AXIvideo_fu_149_m_axis_video_TREADY = ((m_axis_video_V_dest_V_1_ack_in & ap_CS_fsm_state4) | (m_axis_video_V_data_V_1_ack_in & ap_CS_fsm_state4) | (m_axis_video_V_id_V_1_ack_in & ap_CS_fsm_state4) | (m_axis_video_V_last_V_1_ack_in & ap_CS_fsm_state4) | (m_axis_video_V_user_V_1_ack_in & ap_CS_fsm_state4) | (m_axis_video_V_strb_V_1_ack_in & ap_CS_fsm_state4) | (m_axis_video_V_keep_V_1_ack_in & ap_CS_fsm_state4));

assign grp_dataflow_parent_loop_1_fu_136_ap_start = grp_dataflow_parent_loop_1_fu_136_ap_start_reg;

assign m_axis_video_TDATA = m_axis_video_V_data_V_1_data_out;

assign m_axis_video_TDEST = m_axis_video_V_dest_V_1_data_out;

assign m_axis_video_TID = m_axis_video_V_id_V_1_data_out;

assign m_axis_video_TKEEP = m_axis_video_V_keep_V_1_data_out;

assign m_axis_video_TLAST = m_axis_video_V_last_V_1_data_out;

assign m_axis_video_TSTRB = m_axis_video_V_strb_V_1_data_out;

assign m_axis_video_TUSER = m_axis_video_V_user_V_1_data_out;

assign m_axis_video_TVALID = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_data_V_1_ack_in = m_axis_video_V_data_V_1_state[1'd1];

assign m_axis_video_V_data_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_data_V_1_load_A = (m_axis_video_V_data_V_1_state_cmp_full & ~m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_load_B = (m_axis_video_V_data_V_1_state_cmp_full & m_axis_video_V_data_V_1_sel_wr);

assign m_axis_video_V_data_V_1_sel = m_axis_video_V_data_V_1_sel_rd;

assign m_axis_video_V_data_V_1_state_cmp_full = ((m_axis_video_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_data_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;

assign m_axis_video_V_data_V_1_vld_out = m_axis_video_V_data_V_1_state[1'd0];

assign m_axis_video_V_dest_V_1_ack_in = m_axis_video_V_dest_V_1_state[1'd1];

assign m_axis_video_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_dest_V_1_load_A = (m_axis_video_V_dest_V_1_state_cmp_full & ~m_axis_video_V_dest_V_1_sel_wr);

assign m_axis_video_V_dest_V_1_load_B = (m_axis_video_V_dest_V_1_state_cmp_full & m_axis_video_V_dest_V_1_sel_wr);

assign m_axis_video_V_dest_V_1_sel = m_axis_video_V_dest_V_1_sel_rd;

assign m_axis_video_V_dest_V_1_state_cmp_full = ((m_axis_video_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_dest_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;

assign m_axis_video_V_dest_V_1_vld_out = m_axis_video_V_dest_V_1_state[1'd0];

assign m_axis_video_V_id_V_1_ack_in = m_axis_video_V_id_V_1_state[1'd1];

assign m_axis_video_V_id_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_id_V_1_load_A = (m_axis_video_V_id_V_1_state_cmp_full & ~m_axis_video_V_id_V_1_sel_wr);

assign m_axis_video_V_id_V_1_load_B = (m_axis_video_V_id_V_1_state_cmp_full & m_axis_video_V_id_V_1_sel_wr);

assign m_axis_video_V_id_V_1_sel = m_axis_video_V_id_V_1_sel_rd;

assign m_axis_video_V_id_V_1_state_cmp_full = ((m_axis_video_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_id_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;

assign m_axis_video_V_id_V_1_vld_out = m_axis_video_V_id_V_1_state[1'd0];

assign m_axis_video_V_keep_V_1_ack_in = m_axis_video_V_keep_V_1_state[1'd1];

assign m_axis_video_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_keep_V_1_load_A = (m_axis_video_V_keep_V_1_state_cmp_full & ~m_axis_video_V_keep_V_1_sel_wr);

assign m_axis_video_V_keep_V_1_load_B = (m_axis_video_V_keep_V_1_state_cmp_full & m_axis_video_V_keep_V_1_sel_wr);

assign m_axis_video_V_keep_V_1_sel = m_axis_video_V_keep_V_1_sel_rd;

assign m_axis_video_V_keep_V_1_state_cmp_full = ((m_axis_video_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_keep_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;

assign m_axis_video_V_keep_V_1_vld_out = m_axis_video_V_keep_V_1_state[1'd0];

assign m_axis_video_V_last_V_1_ack_in = m_axis_video_V_last_V_1_state[1'd1];

assign m_axis_video_V_last_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_last_V_1_load_A = (m_axis_video_V_last_V_1_state_cmp_full & ~m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_load_B = (m_axis_video_V_last_V_1_state_cmp_full & m_axis_video_V_last_V_1_sel_wr);

assign m_axis_video_V_last_V_1_sel = m_axis_video_V_last_V_1_sel_rd;

assign m_axis_video_V_last_V_1_state_cmp_full = ((m_axis_video_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_last_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;

assign m_axis_video_V_last_V_1_vld_out = m_axis_video_V_last_V_1_state[1'd0];

assign m_axis_video_V_strb_V_1_ack_in = m_axis_video_V_strb_V_1_state[1'd1];

assign m_axis_video_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_strb_V_1_load_A = (m_axis_video_V_strb_V_1_state_cmp_full & ~m_axis_video_V_strb_V_1_sel_wr);

assign m_axis_video_V_strb_V_1_load_B = (m_axis_video_V_strb_V_1_state_cmp_full & m_axis_video_V_strb_V_1_sel_wr);

assign m_axis_video_V_strb_V_1_sel = m_axis_video_V_strb_V_1_sel_rd;

assign m_axis_video_V_strb_V_1_state_cmp_full = ((m_axis_video_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_strb_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;

assign m_axis_video_V_strb_V_1_vld_out = m_axis_video_V_strb_V_1_state[1'd0];

assign m_axis_video_V_user_V_1_ack_in = m_axis_video_V_user_V_1_state[1'd1];

assign m_axis_video_V_user_V_1_ack_out = m_axis_video_TREADY;

assign m_axis_video_V_user_V_1_load_A = (m_axis_video_V_user_V_1_state_cmp_full & ~m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_load_B = (m_axis_video_V_user_V_1_state_cmp_full & m_axis_video_V_user_V_1_sel_wr);

assign m_axis_video_V_user_V_1_sel = m_axis_video_V_user_V_1_sel_rd;

assign m_axis_video_V_user_V_1_state_cmp_full = ((m_axis_video_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign m_axis_video_V_user_V_1_vld_in = grp_Mat2AXIvideo_fu_149_m_axis_video_TVALID;

assign m_axis_video_V_user_V_1_vld_out = m_axis_video_V_user_V_1_state[1'd0];

endmodule //video_mandelbrot_generator
