-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dataflow_parent_loop_1 is
port (
    img_0_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_0_V_full_n : IN STD_LOGIC;
    img_0_data_stream_0_V_write : OUT STD_LOGIC;
    img_0_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_1_V_full_n : IN STD_LOGIC;
    img_0_data_stream_1_V_write : OUT STD_LOGIC;
    img_0_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    img_0_data_stream_2_V_full_n : IN STD_LOGIC;
    img_0_data_stream_2_V_write : OUT STD_LOGIC;
    im_V : IN STD_LOGIC_VECTOR (17 downto 0);
    re_V : IN STD_LOGIC_VECTOR (17 downto 0);
    zoom_factor_V : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    im_V_ap_vld : IN STD_LOGIC;
    re_V_ap_vld : IN STD_LOGIC;
    zoom_factor_V_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of dataflow_parent_loop_1 is 
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal dataflow_in_loop_out_U0_img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_out_U0_img_0_data_stream_0_V_write : STD_LOGIC;
    signal dataflow_in_loop_out_U0_img_0_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_out_U0_img_0_data_stream_1_V_write : STD_LOGIC;
    signal dataflow_in_loop_out_U0_img_0_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal dataflow_in_loop_out_U0_img_0_data_stream_2_V_write : STD_LOGIC;
    signal dataflow_in_loop_out_U0_ap_start : STD_LOGIC;
    signal dataflow_in_loop_out_U0_ap_done : STD_LOGIC;
    signal dataflow_in_loop_out_U0_ap_ready : STD_LOGIC;
    signal dataflow_in_loop_out_U0_ap_idle : STD_LOGIC;
    signal dataflow_in_loop_out_U0_ap_continue : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal loop_dataflow_input_count : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal loop_dataflow_output_count : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal bound_minus_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dataflow_in_loop_out_U0_start_full_n : STD_LOGIC;
    signal dataflow_in_loop_out_U0_start_write : STD_LOGIC;

    component dataflow_in_loop_out IS
    port (
        img_0_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_0_V_full_n : IN STD_LOGIC;
        img_0_data_stream_0_V_write : OUT STD_LOGIC;
        img_0_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_1_V_full_n : IN STD_LOGIC;
        img_0_data_stream_1_V_write : OUT STD_LOGIC;
        img_0_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_2_V_full_n : IN STD_LOGIC;
        img_0_data_stream_2_V_write : OUT STD_LOGIC;
        im_V : IN STD_LOGIC_VECTOR (17 downto 0);
        v_assign : IN STD_LOGIC_VECTOR (2 downto 0);
        re_V : IN STD_LOGIC_VECTOR (17 downto 0);
        zoom_factor_V : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        im_V_ap_vld : IN STD_LOGIC;
        v_assign_ap_vld : IN STD_LOGIC;
        re_V_ap_vld : IN STD_LOGIC;
        zoom_factor_V_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    dataflow_in_loop_out_U0 : component dataflow_in_loop_out
    port map (
        img_0_data_stream_0_V_din => dataflow_in_loop_out_U0_img_0_data_stream_0_V_din,
        img_0_data_stream_0_V_full_n => img_0_data_stream_0_V_full_n,
        img_0_data_stream_0_V_write => dataflow_in_loop_out_U0_img_0_data_stream_0_V_write,
        img_0_data_stream_1_V_din => dataflow_in_loop_out_U0_img_0_data_stream_1_V_din,
        img_0_data_stream_1_V_full_n => img_0_data_stream_1_V_full_n,
        img_0_data_stream_1_V_write => dataflow_in_loop_out_U0_img_0_data_stream_1_V_write,
        img_0_data_stream_2_V_din => dataflow_in_loop_out_U0_img_0_data_stream_2_V_din,
        img_0_data_stream_2_V_full_n => img_0_data_stream_2_V_full_n,
        img_0_data_stream_2_V_write => dataflow_in_loop_out_U0_img_0_data_stream_2_V_write,
        im_V => im_V,
        v_assign => loop_dataflow_input_count,
        re_V => re_V,
        zoom_factor_V => zoom_factor_V,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        im_V_ap_vld => im_V_ap_vld,
        v_assign_ap_vld => ap_const_logic_0,
        re_V_ap_vld => re_V_ap_vld,
        zoom_factor_V_ap_vld => zoom_factor_V_ap_vld,
        ap_start => dataflow_in_loop_out_U0_ap_start,
        ap_done => dataflow_in_loop_out_U0_ap_done,
        ap_ready => dataflow_in_loop_out_U0_ap_ready,
        ap_idle => dataflow_in_loop_out_U0_ap_idle,
        ap_continue => dataflow_in_loop_out_U0_ap_continue);





    loop_dataflow_input_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_input_count <= ap_const_lv3_0;
            else
                if ((not((loop_dataflow_input_count = bound_minus_1)) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_out_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= std_logic_vector(unsigned(loop_dataflow_input_count) + unsigned(ap_const_lv3_1));
                elsif (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_out_U0_ap_ready = ap_const_logic_1))) then 
                    loop_dataflow_input_count <= ap_const_lv3_0;
                end if; 
            end if;
        end if;
    end process;


    loop_dataflow_output_count_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                loop_dataflow_output_count <= ap_const_lv3_0;
            else
                if ((not((loop_dataflow_output_count = bound_minus_1)) and (dataflow_in_loop_out_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_out_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= std_logic_vector(unsigned(loop_dataflow_output_count) + unsigned(ap_const_lv3_1));
                elsif (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_out_U0_ap_continue = ap_const_logic_1) and (dataflow_in_loop_out_U0_ap_done = ap_const_logic_1))) then 
                    loop_dataflow_output_count <= ap_const_lv3_0;
                end if; 
            end if;
        end if;
    end process;


    ap_done_assign_proc : process(dataflow_in_loop_out_U0_ap_done, loop_dataflow_output_count, bound_minus_1)
    begin
        if (((loop_dataflow_output_count = bound_minus_1) and (dataflow_in_loop_out_U0_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(dataflow_in_loop_out_U0_ap_idle, ap_start, loop_dataflow_output_count)
    begin
        if (((loop_dataflow_output_count = ap_const_lv3_0) and (ap_start = ap_const_logic_0) and (dataflow_in_loop_out_U0_ap_idle = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(dataflow_in_loop_out_U0_ap_ready, ap_start, loop_dataflow_input_count, bound_minus_1)
    begin
        if (((loop_dataflow_input_count = bound_minus_1) and (ap_start = ap_const_logic_1) and (dataflow_in_loop_out_U0_ap_ready = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_sync_continue <= ap_continue;
    ap_sync_done <= dataflow_in_loop_out_U0_ap_done;
    ap_sync_ready <= dataflow_in_loop_out_U0_ap_ready;
    bound_minus_1 <= std_logic_vector(unsigned(ap_const_lv3_6) - unsigned(ap_const_lv3_1));

    dataflow_in_loop_out_U0_ap_continue_assign_proc : process(ap_continue, loop_dataflow_output_count, bound_minus_1)
    begin
        if ((not((loop_dataflow_output_count = bound_minus_1)) or (ap_continue = ap_const_logic_1))) then 
            dataflow_in_loop_out_U0_ap_continue <= ap_const_logic_1;
        else 
            dataflow_in_loop_out_U0_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    dataflow_in_loop_out_U0_ap_start <= ap_start;
    dataflow_in_loop_out_U0_start_full_n <= ap_const_logic_1;
    dataflow_in_loop_out_U0_start_write <= ap_const_logic_0;
    img_0_data_stream_0_V_din <= dataflow_in_loop_out_U0_img_0_data_stream_0_V_din;
    img_0_data_stream_0_V_write <= dataflow_in_loop_out_U0_img_0_data_stream_0_V_write;
    img_0_data_stream_1_V_din <= dataflow_in_loop_out_U0_img_0_data_stream_1_V_din;
    img_0_data_stream_1_V_write <= dataflow_in_loop_out_U0_img_0_data_stream_1_V_write;
    img_0_data_stream_2_V_din <= dataflow_in_loop_out_U0_img_0_data_stream_2_V_din;
    img_0_data_stream_2_V_write <= dataflow_in_loop_out_U0_img_0_data_stream_2_V_write;
end behav;
