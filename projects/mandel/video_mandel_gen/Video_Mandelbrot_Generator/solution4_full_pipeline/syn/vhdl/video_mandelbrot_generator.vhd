-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity video_mandelbrot_generator is
generic (
    C_S_AXI_CMD_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CMD_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_cmd_AWVALID : IN STD_LOGIC;
    s_axi_cmd_AWREADY : OUT STD_LOGIC;
    s_axi_cmd_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_ADDR_WIDTH-1 downto 0);
    s_axi_cmd_WVALID : IN STD_LOGIC;
    s_axi_cmd_WREADY : OUT STD_LOGIC;
    s_axi_cmd_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH-1 downto 0);
    s_axi_cmd_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH/8-1 downto 0);
    s_axi_cmd_ARVALID : IN STD_LOGIC;
    s_axi_cmd_ARREADY : OUT STD_LOGIC;
    s_axi_cmd_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_ADDR_WIDTH-1 downto 0);
    s_axi_cmd_RVALID : OUT STD_LOGIC;
    s_axi_cmd_RREADY : IN STD_LOGIC;
    s_axi_cmd_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH-1 downto 0);
    s_axi_cmd_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cmd_BVALID : OUT STD_LOGIC;
    s_axi_cmd_BREADY : IN STD_LOGIC;
    s_axi_cmd_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC );
end;


architecture behav of video_mandelbrot_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "video_mandelbrot_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.665750,HLS_SYN_LAT=137,HLS_SYN_TPT=75,HLS_SYN_MEM=0,HLS_SYN_DSP=15,HLS_SYN_FF=3044,HLS_SYN_LUT=5475,HLS_VERSION=2019_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal re_V : STD_LOGIC_VECTOR (17 downto 0);
    signal im_V : STD_LOGIC_VECTOR (17 downto 0);
    signal zoom_factor_V : STD_LOGIC_VECTOR (17 downto 0);
    signal Loop_out_proc24_U0_ap_start : STD_LOGIC;
    signal Loop_out_proc24_U0_ap_done : STD_LOGIC;
    signal Loop_out_proc24_U0_ap_continue : STD_LOGIC;
    signal Loop_out_proc24_U0_ap_idle : STD_LOGIC;
    signal Loop_out_proc24_U0_ap_ready : STD_LOGIC;
    signal Loop_out_proc24_U0_start_out : STD_LOGIC;
    signal Loop_out_proc24_U0_start_write : STD_LOGIC;
    signal Loop_out_proc24_U0_img_0_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_out_proc24_U0_img_0_data_stream_0_V_write : STD_LOGIC;
    signal Loop_out_proc24_U0_img_0_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_out_proc24_U0_img_0_data_stream_1_V_write : STD_LOGIC;
    signal Loop_out_proc24_U0_img_0_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_out_proc24_U0_img_0_data_stream_2_V_write : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal img_0_data_stream_0_full_n : STD_LOGIC;
    signal img_0_data_stream_0_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_0_empty_n : STD_LOGIC;
    signal img_0_data_stream_1_full_n : STD_LOGIC;
    signal img_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_1_empty_n : STD_LOGIC;
    signal img_0_data_stream_2_full_n : STD_LOGIC;
    signal img_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal img_0_data_stream_2_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal Mat2AXIvideo_U0_start_write : STD_LOGIC;

    component Loop_out_proc24 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_0_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_0_V_full_n : IN STD_LOGIC;
        img_0_data_stream_0_V_write : OUT STD_LOGIC;
        img_0_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_1_V_full_n : IN STD_LOGIC;
        img_0_data_stream_1_V_write : OUT STD_LOGIC;
        img_0_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_0_data_stream_2_V_full_n : IN STD_LOGIC;
        img_0_data_stream_2_V_write : OUT STD_LOGIC;
        im_V : IN STD_LOGIC_VECTOR (17 downto 0);
        re_V : IN STD_LOGIC_VECTOR (17 downto 0);
        zoom_factor_V : IN STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIvideo_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component video_mandelbrot_generator_cmd_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        re_V : OUT STD_LOGIC_VECTOR (17 downto 0);
        im_V : OUT STD_LOGIC_VECTOR (17 downto 0);
        zoom_factor_V : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    video_mandelbrot_generator_cmd_s_axi_U : component video_mandelbrot_generator_cmd_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CMD_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CMD_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cmd_AWVALID,
        AWREADY => s_axi_cmd_AWREADY,
        AWADDR => s_axi_cmd_AWADDR,
        WVALID => s_axi_cmd_WVALID,
        WREADY => s_axi_cmd_WREADY,
        WDATA => s_axi_cmd_WDATA,
        WSTRB => s_axi_cmd_WSTRB,
        ARVALID => s_axi_cmd_ARVALID,
        ARREADY => s_axi_cmd_ARREADY,
        ARADDR => s_axi_cmd_ARADDR,
        RVALID => s_axi_cmd_RVALID,
        RREADY => s_axi_cmd_RREADY,
        RDATA => s_axi_cmd_RDATA,
        RRESP => s_axi_cmd_RRESP,
        BVALID => s_axi_cmd_BVALID,
        BREADY => s_axi_cmd_BREADY,
        BRESP => s_axi_cmd_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        re_V => re_V,
        im_V => im_V,
        zoom_factor_V => zoom_factor_V);

    Loop_out_proc24_U0 : component Loop_out_proc24
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_out_proc24_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => Loop_out_proc24_U0_ap_done,
        ap_continue => Loop_out_proc24_U0_ap_continue,
        ap_idle => Loop_out_proc24_U0_ap_idle,
        ap_ready => Loop_out_proc24_U0_ap_ready,
        start_out => Loop_out_proc24_U0_start_out,
        start_write => Loop_out_proc24_U0_start_write,
        img_0_data_stream_0_V_din => Loop_out_proc24_U0_img_0_data_stream_0_V_din,
        img_0_data_stream_0_V_full_n => img_0_data_stream_0_full_n,
        img_0_data_stream_0_V_write => Loop_out_proc24_U0_img_0_data_stream_0_V_write,
        img_0_data_stream_1_V_din => Loop_out_proc24_U0_img_0_data_stream_1_V_din,
        img_0_data_stream_1_V_full_n => img_0_data_stream_1_full_n,
        img_0_data_stream_1_V_write => Loop_out_proc24_U0_img_0_data_stream_1_V_write,
        img_0_data_stream_2_V_din => Loop_out_proc24_U0_img_0_data_stream_2_V_din,
        img_0_data_stream_2_V_full_n => img_0_data_stream_2_full_n,
        img_0_data_stream_2_V_write => Loop_out_proc24_U0_img_0_data_stream_2_V_write,
        im_V => im_V,
        re_V => re_V,
        zoom_factor_V => zoom_factor_V);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_data_stream_0_V_dout => img_0_data_stream_0_dout,
        img_data_stream_0_V_empty_n => img_0_data_stream_0_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => img_0_data_stream_1_dout,
        img_data_stream_1_V_empty_n => img_0_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => img_0_data_stream_2_dout,
        img_data_stream_2_V_empty_n => img_0_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        m_axis_video_TDATA => Mat2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => Mat2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => Mat2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => Mat2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => Mat2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => Mat2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => Mat2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => Mat2AXIvideo_U0_m_axis_video_TDEST);

    img_0_data_stream_0_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_out_proc24_U0_img_0_data_stream_0_V_din,
        if_full_n => img_0_data_stream_0_full_n,
        if_write => Loop_out_proc24_U0_img_0_data_stream_0_V_write,
        if_dout => img_0_data_stream_0_dout,
        if_empty_n => img_0_data_stream_0_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    img_0_data_stream_1_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_out_proc24_U0_img_0_data_stream_1_V_din,
        if_full_n => img_0_data_stream_1_full_n,
        if_write => Loop_out_proc24_U0_img_0_data_stream_1_V_write,
        if_dout => img_0_data_stream_1_dout,
        if_empty_n => img_0_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    img_0_data_stream_2_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_out_proc24_U0_img_0_data_stream_2_V_din,
        if_full_n => img_0_data_stream_2_full_n,
        if_write => Loop_out_proc24_U0_img_0_data_stream_2_V_write,
        if_dout => img_0_data_stream_2_dout,
        if_empty_n => img_0_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_Mat2AXIvideo_U0_U : component start_for_Mat2AXIvideo_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Loop_out_proc24_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);




    Loop_out_proc24_U0_ap_continue <= ap_const_logic_1;
    Loop_out_proc24_U0_ap_start <= ap_start;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    Mat2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    Mat2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_idle <= (Mat2AXIvideo_U0_ap_idle and Loop_out_proc24_U0_ap_idle);
    ap_ready <= Loop_out_proc24_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Mat2AXIvideo_U0_ap_done;
    ap_sync_ready <= Loop_out_proc24_U0_ap_ready;
    m_axis_video_TDATA <= Mat2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= Mat2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= Mat2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= Mat2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= Mat2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= Mat2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= Mat2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= Mat2AXIvideo_U0_m_axis_video_TVALID;
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
