// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_out_proc27 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_0_data_stream_V_s_din,
        img_0_data_stream_V_s_full_n,
        img_0_data_stream_V_s_write,
        img_0_data_stream_V_1_din,
        img_0_data_stream_V_1_full_n,
        img_0_data_stream_V_1_write,
        img_0_data_stream_V_2_din,
        img_0_data_stream_V_2_full_n,
        img_0_data_stream_V_2_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [7:0] img_0_data_stream_V_s_din;
input   img_0_data_stream_V_s_full_n;
output   img_0_data_stream_V_s_write;
output  [7:0] img_0_data_stream_V_1_din;
input   img_0_data_stream_V_1_full_n;
output   img_0_data_stream_V_1_write;
output  [7:0] img_0_data_stream_V_2_din;
input   img_0_data_stream_V_2_full_n;
output   img_0_data_stream_V_2_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_0_data_stream_V_s_write;
reg img_0_data_stream_V_1_write;
reg img_0_data_stream_V_2_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_0_data_stream_V_s_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln25_fu_111_p2;
reg    img_0_data_stream_V_1_blk_n;
reg    img_0_data_stream_V_2_blk_n;
wire   [2:0] row_fu_105_p2;
reg   [2:0] row_reg_131;
wire    ap_CS_fsm_state2;
wire   [3:0] col_fu_117_p2;
reg    ap_block_state3;
reg   [2:0] row_0_i_i_reg_77;
reg    ap_block_state1;
reg   [3:0] col_0_i_i_reg_88;
wire   [0:0] icmp_ln23_fu_99_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln23_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0))) & (icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        col_0_i_i_reg_88 <= col_fu_117_p2;
    end else if (((icmp_ln23_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        col_0_i_i_reg_88 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0))) & (icmp_ln25_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        row_0_i_i_reg_77 <= row_reg_131;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        row_0_i_i_reg_77 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_reg_131 <= row_fu_105_p2;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_0_data_stream_V_1_blk_n = img_0_data_stream_V_1_full_n;
    end else begin
        img_0_data_stream_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0))) & (icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_0_data_stream_V_1_write = 1'b1;
    end else begin
        img_0_data_stream_V_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_0_data_stream_V_2_blk_n = img_0_data_stream_V_2_full_n;
    end else begin
        img_0_data_stream_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0))) & (icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_0_data_stream_V_2_write = 1'b1;
    end else begin
        img_0_data_stream_V_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_0_data_stream_V_s_blk_n = img_0_data_stream_V_s_full_n;
    end else begin
        img_0_data_stream_V_s_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0))) & (icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        img_0_data_stream_V_s_write = 1'b1;
    end else begin
        img_0_data_stream_V_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln23_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~(((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0))) & (icmp_ln25_fu_111_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if ((~(((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0))) & (icmp_ln25_fu_111_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3 = (((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_2_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_1_full_n == 1'b0)) | ((icmp_ln25_fu_111_p2 == 1'd0) & (img_0_data_stream_V_s_full_n == 1'b0)));
end

assign ap_ready = internal_ap_ready;

assign col_fu_117_p2 = (col_0_i_i_reg_88 + 4'd1);

assign icmp_ln23_fu_99_p2 = ((row_0_i_i_reg_77 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_111_p2 = ((col_0_i_i_reg_88 == 4'd8) ? 1'b1 : 1'b0);

assign img_0_data_stream_V_1_din = 8'd0;

assign img_0_data_stream_V_2_din = 8'd0;

assign img_0_data_stream_V_s_din = col_0_i_i_reg_88;

assign row_fu_105_p2 = (row_0_i_i_reg_77 + 3'd1);

assign start_out = real_start;

endmodule //Loop_out_proc27
