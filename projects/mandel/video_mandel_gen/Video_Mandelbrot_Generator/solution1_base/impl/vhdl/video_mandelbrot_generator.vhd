-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity video_mandelbrot_generator is
generic (
    C_S_AXI_CMD_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CMD_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_cmd_AWVALID : IN STD_LOGIC;
    s_axi_cmd_AWREADY : OUT STD_LOGIC;
    s_axi_cmd_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_ADDR_WIDTH-1 downto 0);
    s_axi_cmd_WVALID : IN STD_LOGIC;
    s_axi_cmd_WREADY : OUT STD_LOGIC;
    s_axi_cmd_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH-1 downto 0);
    s_axi_cmd_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH/8-1 downto 0);
    s_axi_cmd_ARVALID : IN STD_LOGIC;
    s_axi_cmd_ARREADY : OUT STD_LOGIC;
    s_axi_cmd_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CMD_ADDR_WIDTH-1 downto 0);
    s_axi_cmd_RVALID : OUT STD_LOGIC;
    s_axi_cmd_RREADY : IN STD_LOGIC;
    s_axi_cmd_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CMD_DATA_WIDTH-1 downto 0);
    s_axi_cmd_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_cmd_BVALID : OUT STD_LOGIC;
    s_axi_cmd_BREADY : IN STD_LOGIC;
    s_axi_cmd_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of video_mandelbrot_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "video_mandelbrot_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.777000,HLS_SYN_LAT=109,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=202,HLS_SYN_LUT=440,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal VIDEO_OUT_V_data_V_1_vld_in : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_vld_out : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_ack_in : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_ack_out : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal VIDEO_OUT_V_data_V_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal VIDEO_OUT_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal VIDEO_OUT_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal VIDEO_OUT_V_data_V_1_sel : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_load_A : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_load_B : STD_LOGIC;
    signal VIDEO_OUT_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VIDEO_OUT_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal VIDEO_OUT_V_keep_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal VIDEO_OUT_V_keep_V_1_vld_in : STD_LOGIC;
    signal VIDEO_OUT_V_keep_V_1_vld_out : STD_LOGIC;
    signal VIDEO_OUT_V_keep_V_1_ack_out : STD_LOGIC;
    signal VIDEO_OUT_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal VIDEO_OUT_V_keep_V_1_sel : STD_LOGIC;
    signal VIDEO_OUT_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VIDEO_OUT_V_strb_V_1_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal VIDEO_OUT_V_strb_V_1_vld_in : STD_LOGIC;
    signal VIDEO_OUT_V_strb_V_1_vld_out : STD_LOGIC;
    signal VIDEO_OUT_V_strb_V_1_ack_out : STD_LOGIC;
    signal VIDEO_OUT_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal VIDEO_OUT_V_strb_V_1_sel : STD_LOGIC;
    signal VIDEO_OUT_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VIDEO_OUT_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_user_V_1_vld_in : STD_LOGIC;
    signal VIDEO_OUT_V_user_V_1_vld_out : STD_LOGIC;
    signal VIDEO_OUT_V_user_V_1_ack_in : STD_LOGIC;
    signal VIDEO_OUT_V_user_V_1_ack_out : STD_LOGIC;
    signal VIDEO_OUT_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal VIDEO_OUT_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal VIDEO_OUT_V_user_V_1_sel : STD_LOGIC;
    signal VIDEO_OUT_V_user_V_1_load_A : STD_LOGIC;
    signal VIDEO_OUT_V_user_V_1_load_B : STD_LOGIC;
    signal VIDEO_OUT_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VIDEO_OUT_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_last_V_1_vld_in : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_vld_out : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_ack_in : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_ack_out : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal VIDEO_OUT_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal VIDEO_OUT_V_last_V_1_sel : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_load_A : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_load_B : STD_LOGIC;
    signal VIDEO_OUT_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VIDEO_OUT_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal VIDEO_OUT_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_id_V_1_vld_in : STD_LOGIC;
    signal VIDEO_OUT_V_id_V_1_vld_out : STD_LOGIC;
    signal VIDEO_OUT_V_id_V_1_ack_out : STD_LOGIC;
    signal VIDEO_OUT_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal VIDEO_OUT_V_id_V_1_sel : STD_LOGIC;
    signal VIDEO_OUT_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal VIDEO_OUT_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal VIDEO_OUT_V_dest_V_1_vld_in : STD_LOGIC;
    signal VIDEO_OUT_V_dest_V_1_vld_out : STD_LOGIC;
    signal VIDEO_OUT_V_dest_V_1_ack_out : STD_LOGIC;
    signal VIDEO_OUT_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal VIDEO_OUT_V_dest_V_1_sel : STD_LOGIC;
    signal VIDEO_OUT_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal re_V : STD_LOGIC_VECTOR (17 downto 0);
    signal im_V : STD_LOGIC_VECTOR (17 downto 0);
    signal zoom_factor_V : STD_LOGIC_VECTOR (17 downto 0);
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln27_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal row_fu_142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_reg_200 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal col_fu_158_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal col_reg_208 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal tmp_user_V_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_out_V_fu_188_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_1_reg_113 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_reg_125 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln25_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln27_fu_148_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln30_fu_164_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal pixel_G_fu_184_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component video_mandelbrot_generator_cmd_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        re_V : OUT STD_LOGIC_VECTOR (17 downto 0);
        im_V : OUT STD_LOGIC_VECTOR (17 downto 0);
        zoom_factor_V : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    video_mandelbrot_generator_cmd_s_axi_U : component video_mandelbrot_generator_cmd_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CMD_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CMD_DATA_WIDTH)
    port map (
        AWVALID => s_axi_cmd_AWVALID,
        AWREADY => s_axi_cmd_AWREADY,
        AWADDR => s_axi_cmd_AWADDR,
        WVALID => s_axi_cmd_WVALID,
        WREADY => s_axi_cmd_WREADY,
        WDATA => s_axi_cmd_WDATA,
        WSTRB => s_axi_cmd_WSTRB,
        ARVALID => s_axi_cmd_ARVALID,
        ARREADY => s_axi_cmd_ARREADY,
        ARADDR => s_axi_cmd_ARADDR,
        RVALID => s_axi_cmd_RVALID,
        RREADY => s_axi_cmd_RREADY,
        RDATA => s_axi_cmd_RDATA,
        RRESP => s_axi_cmd_RRESP,
        BVALID => s_axi_cmd_BVALID,
        BREADY => s_axi_cmd_BREADY,
        BRESP => s_axi_cmd_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        re_V => re_V,
        im_V => im_V,
        zoom_factor_V => zoom_factor_V);





    VIDEO_OUT_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_data_V_1_ack_out) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_vld_out))) then 
                                        VIDEO_OUT_V_data_V_1_sel_rd <= not(VIDEO_OUT_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_data_V_1_ack_in) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_vld_in))) then 
                                        VIDEO_OUT_V_data_V_1_sel_wr <= not(VIDEO_OUT_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VIDEO_OUT_V_data_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_data_V_1_vld_in)) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_data_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_ack_out)))) then 
                    VIDEO_OUT_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_vld_in)))) then 
                    VIDEO_OUT_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VIDEO_OUT_V_data_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_ack_out))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_vld_in))) and (ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state)) or ((ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_ack_out)) or ((ap_const_lv2_2 = VIDEO_OUT_V_data_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_data_V_1_vld_in)))) then 
                    VIDEO_OUT_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    VIDEO_OUT_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_ack_out) and (ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_vld_out))) then 
                                        VIDEO_OUT_V_dest_V_1_sel_rd <= not(VIDEO_OUT_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VIDEO_OUT_V_dest_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_dest_V_1_vld_in)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_dest_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_ack_out)))) then 
                    VIDEO_OUT_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_vld_in)))) then 
                    VIDEO_OUT_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VIDEO_OUT_V_dest_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_ack_out))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_vld_in))) and (ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state)) or ((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_ack_out)) or ((ap_const_lv2_2 = VIDEO_OUT_V_dest_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_dest_V_1_vld_in)))) then 
                    VIDEO_OUT_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    VIDEO_OUT_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_id_V_1_ack_out) and (ap_const_logic_1 = VIDEO_OUT_V_id_V_1_vld_out))) then 
                                        VIDEO_OUT_V_id_V_1_sel_rd <= not(VIDEO_OUT_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VIDEO_OUT_V_id_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_id_V_1_vld_in)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_id_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_id_V_1_ack_out)))) then 
                    VIDEO_OUT_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_id_V_1_vld_in)))) then 
                    VIDEO_OUT_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VIDEO_OUT_V_id_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_id_V_1_ack_out))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_id_V_1_vld_in))) and (ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state)) or ((ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_id_V_1_ack_out)) or ((ap_const_lv2_2 = VIDEO_OUT_V_id_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_id_V_1_vld_in)))) then 
                    VIDEO_OUT_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    VIDEO_OUT_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_vld_out) and (ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_ack_out))) then 
                                        VIDEO_OUT_V_keep_V_1_sel_rd <= not(VIDEO_OUT_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VIDEO_OUT_V_keep_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_keep_V_1_vld_in)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_keep_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_ack_out)))) then 
                    VIDEO_OUT_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_vld_in)))) then 
                    VIDEO_OUT_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VIDEO_OUT_V_keep_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_ack_out))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_vld_in))) and (ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state)) or ((ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_ack_out)) or ((ap_const_lv2_2 = VIDEO_OUT_V_keep_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_keep_V_1_vld_in)))) then 
                    VIDEO_OUT_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    VIDEO_OUT_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_last_V_1_ack_out) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_vld_out))) then 
                                        VIDEO_OUT_V_last_V_1_sel_rd <= not(VIDEO_OUT_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_last_V_1_ack_in) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_vld_in))) then 
                                        VIDEO_OUT_V_last_V_1_sel_wr <= not(VIDEO_OUT_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VIDEO_OUT_V_last_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_last_V_1_vld_in)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_last_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_ack_out)))) then 
                    VIDEO_OUT_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_vld_in)))) then 
                    VIDEO_OUT_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VIDEO_OUT_V_last_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_ack_out))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_vld_in))) and (ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state)) or ((ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_ack_out)) or ((ap_const_lv2_2 = VIDEO_OUT_V_last_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_last_V_1_vld_in)))) then 
                    VIDEO_OUT_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    VIDEO_OUT_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_ack_out) and (ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_vld_out))) then 
                                        VIDEO_OUT_V_strb_V_1_sel_rd <= not(VIDEO_OUT_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VIDEO_OUT_V_strb_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_strb_V_1_vld_in)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_strb_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_ack_out)))) then 
                    VIDEO_OUT_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_vld_in)))) then 
                    VIDEO_OUT_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VIDEO_OUT_V_strb_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_ack_out))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_vld_in))) and (ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state)) or ((ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_ack_out)) or ((ap_const_lv2_2 = VIDEO_OUT_V_strb_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_strb_V_1_vld_in)))) then 
                    VIDEO_OUT_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    VIDEO_OUT_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_user_V_1_ack_out) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_vld_out))) then 
                                        VIDEO_OUT_V_user_V_1_sel_rd <= not(VIDEO_OUT_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = VIDEO_OUT_V_user_V_1_ack_in) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_vld_in))) then 
                                        VIDEO_OUT_V_user_V_1_sel_wr <= not(VIDEO_OUT_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    VIDEO_OUT_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                VIDEO_OUT_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = VIDEO_OUT_V_user_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_user_V_1_vld_in)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (ap_const_logic_0 = VIDEO_OUT_V_user_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_ack_out)))) then 
                    VIDEO_OUT_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_vld_in)))) then 
                    VIDEO_OUT_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = VIDEO_OUT_V_user_V_1_vld_in) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_ack_out))) and not(((m_axis_video_TREADY = ap_const_logic_0) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_vld_in))) and (ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state)) or ((ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_ack_out)) or ((ap_const_lv2_2 = VIDEO_OUT_V_user_V_1_state) and (ap_const_logic_1 = VIDEO_OUT_V_user_V_1_vld_in)))) then 
                    VIDEO_OUT_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    VIDEO_OUT_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_Val2_1_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_Val2_1_reg_113 <= row_reg_200;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_1_reg_113 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = VIDEO_OUT_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_125 <= col_reg_208;
            elsif ((not(((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)))) and (icmp_ln25_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_125 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VIDEO_OUT_V_data_V_1_load_A)) then
                VIDEO_OUT_V_data_V_1_payload_A <= pixel_out_V_fu_188_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VIDEO_OUT_V_data_V_1_load_B)) then
                VIDEO_OUT_V_data_V_1_payload_B <= pixel_out_V_fu_188_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VIDEO_OUT_V_last_V_1_load_A)) then
                VIDEO_OUT_V_last_V_1_payload_A <= tmp_last_V_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VIDEO_OUT_V_last_V_1_load_B)) then
                VIDEO_OUT_V_last_V_1_payload_B <= tmp_last_V_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VIDEO_OUT_V_user_V_1_load_A)) then
                VIDEO_OUT_V_user_V_1_payload_A <= tmp_user_V_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = VIDEO_OUT_V_user_V_1_load_B)) then
                VIDEO_OUT_V_user_V_1_payload_B <= tmp_user_V_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                col_reg_208 <= col_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                row_reg_200 <= row_fu_142_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axis_video_TREADY, VIDEO_OUT_V_data_V_1_ack_in, VIDEO_OUT_V_data_V_1_state, VIDEO_OUT_V_keep_V_1_state, VIDEO_OUT_V_strb_V_1_state, VIDEO_OUT_V_user_V_1_state, VIDEO_OUT_V_last_V_1_state, VIDEO_OUT_V_id_V_1_state, VIDEO_OUT_V_dest_V_1_state, ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_block_state3_io, icmp_ln25_fu_136_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)))) and (icmp_ln25_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)))) and (icmp_ln25_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = VIDEO_OUT_V_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    VIDEO_OUT_V_data_V_1_ack_in <= VIDEO_OUT_V_data_V_1_state(1);
    VIDEO_OUT_V_data_V_1_ack_out <= m_axis_video_TREADY;

    VIDEO_OUT_V_data_V_1_data_out_assign_proc : process(VIDEO_OUT_V_data_V_1_payload_A, VIDEO_OUT_V_data_V_1_payload_B, VIDEO_OUT_V_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = VIDEO_OUT_V_data_V_1_sel)) then 
            VIDEO_OUT_V_data_V_1_data_out <= VIDEO_OUT_V_data_V_1_payload_B;
        else 
            VIDEO_OUT_V_data_V_1_data_out <= VIDEO_OUT_V_data_V_1_payload_A;
        end if; 
    end process;

    VIDEO_OUT_V_data_V_1_load_A <= (not(VIDEO_OUT_V_data_V_1_sel_wr) and VIDEO_OUT_V_data_V_1_state_cmp_full);
    VIDEO_OUT_V_data_V_1_load_B <= (VIDEO_OUT_V_data_V_1_state_cmp_full and VIDEO_OUT_V_data_V_1_sel_wr);
    VIDEO_OUT_V_data_V_1_sel <= VIDEO_OUT_V_data_V_1_sel_rd;
    VIDEO_OUT_V_data_V_1_state_cmp_full <= '0' when (VIDEO_OUT_V_data_V_1_state = ap_const_lv2_1) else '1';

    VIDEO_OUT_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            VIDEO_OUT_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            VIDEO_OUT_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    VIDEO_OUT_V_data_V_1_vld_out <= VIDEO_OUT_V_data_V_1_state(0);
    VIDEO_OUT_V_dest_V_1_ack_out <= m_axis_video_TREADY;
    VIDEO_OUT_V_dest_V_1_data_out <= ap_const_lv1_0;
    VIDEO_OUT_V_dest_V_1_sel <= VIDEO_OUT_V_dest_V_1_sel_rd;

    VIDEO_OUT_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            VIDEO_OUT_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            VIDEO_OUT_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    VIDEO_OUT_V_dest_V_1_vld_out <= VIDEO_OUT_V_dest_V_1_state(0);
    VIDEO_OUT_V_id_V_1_ack_out <= m_axis_video_TREADY;
    VIDEO_OUT_V_id_V_1_data_out <= ap_const_lv1_0;
    VIDEO_OUT_V_id_V_1_sel <= VIDEO_OUT_V_id_V_1_sel_rd;

    VIDEO_OUT_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            VIDEO_OUT_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            VIDEO_OUT_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    VIDEO_OUT_V_id_V_1_vld_out <= VIDEO_OUT_V_id_V_1_state(0);
    VIDEO_OUT_V_keep_V_1_ack_out <= m_axis_video_TREADY;
    VIDEO_OUT_V_keep_V_1_data_out <= ap_const_lv3_0;
    VIDEO_OUT_V_keep_V_1_sel <= VIDEO_OUT_V_keep_V_1_sel_rd;

    VIDEO_OUT_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            VIDEO_OUT_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            VIDEO_OUT_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    VIDEO_OUT_V_keep_V_1_vld_out <= VIDEO_OUT_V_keep_V_1_state(0);
    VIDEO_OUT_V_last_V_1_ack_in <= VIDEO_OUT_V_last_V_1_state(1);
    VIDEO_OUT_V_last_V_1_ack_out <= m_axis_video_TREADY;

    VIDEO_OUT_V_last_V_1_data_out_assign_proc : process(VIDEO_OUT_V_last_V_1_payload_A, VIDEO_OUT_V_last_V_1_payload_B, VIDEO_OUT_V_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = VIDEO_OUT_V_last_V_1_sel)) then 
            VIDEO_OUT_V_last_V_1_data_out <= VIDEO_OUT_V_last_V_1_payload_B;
        else 
            VIDEO_OUT_V_last_V_1_data_out <= VIDEO_OUT_V_last_V_1_payload_A;
        end if; 
    end process;

    VIDEO_OUT_V_last_V_1_load_A <= (not(VIDEO_OUT_V_last_V_1_sel_wr) and VIDEO_OUT_V_last_V_1_state_cmp_full);
    VIDEO_OUT_V_last_V_1_load_B <= (VIDEO_OUT_V_last_V_1_state_cmp_full and VIDEO_OUT_V_last_V_1_sel_wr);
    VIDEO_OUT_V_last_V_1_sel <= VIDEO_OUT_V_last_V_1_sel_rd;
    VIDEO_OUT_V_last_V_1_state_cmp_full <= '0' when (VIDEO_OUT_V_last_V_1_state = ap_const_lv2_1) else '1';

    VIDEO_OUT_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            VIDEO_OUT_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            VIDEO_OUT_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    VIDEO_OUT_V_last_V_1_vld_out <= VIDEO_OUT_V_last_V_1_state(0);
    VIDEO_OUT_V_strb_V_1_ack_out <= m_axis_video_TREADY;
    VIDEO_OUT_V_strb_V_1_data_out <= ap_const_lv3_0;
    VIDEO_OUT_V_strb_V_1_sel <= VIDEO_OUT_V_strb_V_1_sel_rd;

    VIDEO_OUT_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            VIDEO_OUT_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            VIDEO_OUT_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    VIDEO_OUT_V_strb_V_1_vld_out <= VIDEO_OUT_V_strb_V_1_state(0);
    VIDEO_OUT_V_user_V_1_ack_in <= VIDEO_OUT_V_user_V_1_state(1);
    VIDEO_OUT_V_user_V_1_ack_out <= m_axis_video_TREADY;

    VIDEO_OUT_V_user_V_1_data_out_assign_proc : process(VIDEO_OUT_V_user_V_1_payload_A, VIDEO_OUT_V_user_V_1_payload_B, VIDEO_OUT_V_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = VIDEO_OUT_V_user_V_1_sel)) then 
            VIDEO_OUT_V_user_V_1_data_out <= VIDEO_OUT_V_user_V_1_payload_B;
        else 
            VIDEO_OUT_V_user_V_1_data_out <= VIDEO_OUT_V_user_V_1_payload_A;
        end if; 
    end process;

    VIDEO_OUT_V_user_V_1_load_A <= (not(VIDEO_OUT_V_user_V_1_sel_wr) and VIDEO_OUT_V_user_V_1_state_cmp_full);
    VIDEO_OUT_V_user_V_1_load_B <= (VIDEO_OUT_V_user_V_1_state_cmp_full and VIDEO_OUT_V_user_V_1_sel_wr);
    VIDEO_OUT_V_user_V_1_sel <= VIDEO_OUT_V_user_V_1_sel_rd;
    VIDEO_OUT_V_user_V_1_state_cmp_full <= '0' when (VIDEO_OUT_V_user_V_1_state = ap_const_lv2_1) else '1';

    VIDEO_OUT_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_block_state3_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state3_io) and (icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            VIDEO_OUT_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            VIDEO_OUT_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    VIDEO_OUT_V_user_V_1_vld_out <= VIDEO_OUT_V_user_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state2_assign_proc : process(m_axis_video_TREADY, VIDEO_OUT_V_data_V_1_state, VIDEO_OUT_V_keep_V_1_state, VIDEO_OUT_V_strb_V_1_state, VIDEO_OUT_V_user_V_1_state, VIDEO_OUT_V_last_V_1_state, VIDEO_OUT_V_id_V_1_state, VIDEO_OUT_V_dest_V_1_state)
    begin
                ap_block_state2 <= ((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(VIDEO_OUT_V_data_V_1_ack_in, icmp_ln27_fu_152_p2)
    begin
                ap_block_state3_io <= ((icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_0 = VIDEO_OUT_V_data_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(m_axis_video_TREADY, VIDEO_OUT_V_data_V_1_state, VIDEO_OUT_V_keep_V_1_state, VIDEO_OUT_V_strb_V_1_state, VIDEO_OUT_V_user_V_1_state, VIDEO_OUT_V_last_V_1_state, VIDEO_OUT_V_id_V_1_state, VIDEO_OUT_V_dest_V_1_state, ap_CS_fsm_state2, icmp_ln25_fu_136_p2)
    begin
        if ((not(((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)))) and (icmp_ln25_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axis_video_TREADY, VIDEO_OUT_V_data_V_1_state, VIDEO_OUT_V_keep_V_1_state, VIDEO_OUT_V_strb_V_1_state, VIDEO_OUT_V_user_V_1_state, VIDEO_OUT_V_last_V_1_state, VIDEO_OUT_V_id_V_1_state, VIDEO_OUT_V_dest_V_1_state, ap_CS_fsm_state2, icmp_ln25_fu_136_p2)
    begin
        if ((not(((ap_const_lv2_1 = VIDEO_OUT_V_dest_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_id_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_last_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_user_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_strb_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_keep_V_1_state) or (ap_const_lv2_1 = VIDEO_OUT_V_data_V_1_state) or ((ap_const_lv2_3 = VIDEO_OUT_V_data_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_dest_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_id_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_last_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_user_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_strb_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)) or ((ap_const_lv2_3 = VIDEO_OUT_V_keep_V_1_state) and (m_axis_video_TREADY = ap_const_logic_0)))) and (icmp_ln25_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    col_fu_158_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(p_Val2_s_reg_125));
    icmp_ln25_fu_136_p2 <= "1" when (p_Val2_1_reg_113 = ap_const_lv3_6) else "0";
    icmp_ln27_fu_152_p2 <= "1" when (p_Val2_s_reg_125 = ap_const_lv4_8) else "0";
    m_axis_video_TDATA <= VIDEO_OUT_V_data_V_1_data_out;

    m_axis_video_TDATA_blk_n_assign_proc : process(VIDEO_OUT_V_data_V_1_state, ap_CS_fsm_state3, icmp_ln27_fu_152_p2, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((icmp_ln27_fu_152_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            m_axis_video_TDATA_blk_n <= VIDEO_OUT_V_data_V_1_state(1);
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDEST <= VIDEO_OUT_V_dest_V_1_data_out;
    m_axis_video_TID <= VIDEO_OUT_V_id_V_1_data_out;
    m_axis_video_TKEEP <= VIDEO_OUT_V_keep_V_1_data_out;
    m_axis_video_TLAST <= VIDEO_OUT_V_last_V_1_data_out;
    m_axis_video_TSTRB <= VIDEO_OUT_V_strb_V_1_data_out;
    m_axis_video_TUSER <= VIDEO_OUT_V_user_V_1_data_out;
    m_axis_video_TVALID <= VIDEO_OUT_V_dest_V_1_state(0);
    or_ln30_fu_164_p2 <= (trunc_ln27_fu_148_p1 or p_Val2_1_reg_113);
    pixel_G_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_125),8));
    pixel_out_V_fu_188_p3 <= (ap_const_lv16_0 & pixel_G_fu_184_p1);
    row_fu_142_p2 <= std_logic_vector(unsigned(p_Val2_1_reg_113) + unsigned(ap_const_lv3_1));
    tmp_last_V_fu_177_p2 <= "1" when (p_Val2_s_reg_125 = ap_const_lv4_7) else "0";
    tmp_user_V_fu_170_p2 <= "1" when (or_ln30_fu_164_p2 = ap_const_lv3_0) else "0";
    trunc_ln27_fu_148_p1 <= p_Val2_s_reg_125(3 - 1 downto 0);
end behav;
