// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="video_mandelbrot_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.777000,HLS_SYN_LAT=109,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=202,HLS_SYN_LUT=440,HLS_VERSION=2019_1}" *)

module video_mandelbrot_generator (
        ap_clk,
        ap_rst_n,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        s_axi_cmd_AWVALID,
        s_axi_cmd_AWREADY,
        s_axi_cmd_AWADDR,
        s_axi_cmd_WVALID,
        s_axi_cmd_WREADY,
        s_axi_cmd_WDATA,
        s_axi_cmd_WSTRB,
        s_axi_cmd_ARVALID,
        s_axi_cmd_ARREADY,
        s_axi_cmd_ARADDR,
        s_axi_cmd_RVALID,
        s_axi_cmd_RREADY,
        s_axi_cmd_RDATA,
        s_axi_cmd_RRESP,
        s_axi_cmd_BVALID,
        s_axi_cmd_BREADY,
        s_axi_cmd_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;
parameter    C_S_AXI_CMD_DATA_WIDTH = 32;
parameter    C_S_AXI_CMD_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CMD_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [23:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [2:0] m_axis_video_TKEEP;
output  [2:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input   s_axi_cmd_AWVALID;
output   s_axi_cmd_AWREADY;
input  [C_S_AXI_CMD_ADDR_WIDTH - 1:0] s_axi_cmd_AWADDR;
input   s_axi_cmd_WVALID;
output   s_axi_cmd_WREADY;
input  [C_S_AXI_CMD_DATA_WIDTH - 1:0] s_axi_cmd_WDATA;
input  [C_S_AXI_CMD_WSTRB_WIDTH - 1:0] s_axi_cmd_WSTRB;
input   s_axi_cmd_ARVALID;
output   s_axi_cmd_ARREADY;
input  [C_S_AXI_CMD_ADDR_WIDTH - 1:0] s_axi_cmd_ARADDR;
output   s_axi_cmd_RVALID;
input   s_axi_cmd_RREADY;
output  [C_S_AXI_CMD_DATA_WIDTH - 1:0] s_axi_cmd_RDATA;
output  [1:0] s_axi_cmd_RRESP;
output   s_axi_cmd_BVALID;
input   s_axi_cmd_BREADY;
output  [1:0] s_axi_cmd_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [23:0] VIDEO_OUT_V_data_V_1_data_out;
reg    VIDEO_OUT_V_data_V_1_vld_in;
wire    VIDEO_OUT_V_data_V_1_vld_out;
wire    VIDEO_OUT_V_data_V_1_ack_in;
wire    VIDEO_OUT_V_data_V_1_ack_out;
reg   [23:0] VIDEO_OUT_V_data_V_1_payload_A;
reg   [23:0] VIDEO_OUT_V_data_V_1_payload_B;
reg    VIDEO_OUT_V_data_V_1_sel_rd;
reg    VIDEO_OUT_V_data_V_1_sel_wr;
wire    VIDEO_OUT_V_data_V_1_sel;
wire    VIDEO_OUT_V_data_V_1_load_A;
wire    VIDEO_OUT_V_data_V_1_load_B;
reg   [1:0] VIDEO_OUT_V_data_V_1_state;
wire    VIDEO_OUT_V_data_V_1_state_cmp_full;
wire   [2:0] VIDEO_OUT_V_keep_V_1_data_out;
reg    VIDEO_OUT_V_keep_V_1_vld_in;
wire    VIDEO_OUT_V_keep_V_1_vld_out;
wire    VIDEO_OUT_V_keep_V_1_ack_out;
reg    VIDEO_OUT_V_keep_V_1_sel_rd;
wire    VIDEO_OUT_V_keep_V_1_sel;
reg   [1:0] VIDEO_OUT_V_keep_V_1_state;
wire   [2:0] VIDEO_OUT_V_strb_V_1_data_out;
reg    VIDEO_OUT_V_strb_V_1_vld_in;
wire    VIDEO_OUT_V_strb_V_1_vld_out;
wire    VIDEO_OUT_V_strb_V_1_ack_out;
reg    VIDEO_OUT_V_strb_V_1_sel_rd;
wire    VIDEO_OUT_V_strb_V_1_sel;
reg   [1:0] VIDEO_OUT_V_strb_V_1_state;
reg   [0:0] VIDEO_OUT_V_user_V_1_data_out;
reg    VIDEO_OUT_V_user_V_1_vld_in;
wire    VIDEO_OUT_V_user_V_1_vld_out;
wire    VIDEO_OUT_V_user_V_1_ack_in;
wire    VIDEO_OUT_V_user_V_1_ack_out;
reg   [0:0] VIDEO_OUT_V_user_V_1_payload_A;
reg   [0:0] VIDEO_OUT_V_user_V_1_payload_B;
reg    VIDEO_OUT_V_user_V_1_sel_rd;
reg    VIDEO_OUT_V_user_V_1_sel_wr;
wire    VIDEO_OUT_V_user_V_1_sel;
wire    VIDEO_OUT_V_user_V_1_load_A;
wire    VIDEO_OUT_V_user_V_1_load_B;
reg   [1:0] VIDEO_OUT_V_user_V_1_state;
wire    VIDEO_OUT_V_user_V_1_state_cmp_full;
reg   [0:0] VIDEO_OUT_V_last_V_1_data_out;
reg    VIDEO_OUT_V_last_V_1_vld_in;
wire    VIDEO_OUT_V_last_V_1_vld_out;
wire    VIDEO_OUT_V_last_V_1_ack_in;
wire    VIDEO_OUT_V_last_V_1_ack_out;
reg   [0:0] VIDEO_OUT_V_last_V_1_payload_A;
reg   [0:0] VIDEO_OUT_V_last_V_1_payload_B;
reg    VIDEO_OUT_V_last_V_1_sel_rd;
reg    VIDEO_OUT_V_last_V_1_sel_wr;
wire    VIDEO_OUT_V_last_V_1_sel;
wire    VIDEO_OUT_V_last_V_1_load_A;
wire    VIDEO_OUT_V_last_V_1_load_B;
reg   [1:0] VIDEO_OUT_V_last_V_1_state;
wire    VIDEO_OUT_V_last_V_1_state_cmp_full;
wire   [0:0] VIDEO_OUT_V_id_V_1_data_out;
reg    VIDEO_OUT_V_id_V_1_vld_in;
wire    VIDEO_OUT_V_id_V_1_vld_out;
wire    VIDEO_OUT_V_id_V_1_ack_out;
reg    VIDEO_OUT_V_id_V_1_sel_rd;
wire    VIDEO_OUT_V_id_V_1_sel;
reg   [1:0] VIDEO_OUT_V_id_V_1_state;
wire   [0:0] VIDEO_OUT_V_dest_V_1_data_out;
reg    VIDEO_OUT_V_dest_V_1_vld_in;
wire    VIDEO_OUT_V_dest_V_1_vld_out;
wire    VIDEO_OUT_V_dest_V_1_ack_out;
reg    VIDEO_OUT_V_dest_V_1_sel_rd;
wire    VIDEO_OUT_V_dest_V_1_sel;
reg   [1:0] VIDEO_OUT_V_dest_V_1_state;
wire   [17:0] re_V;
wire   [17:0] im_V;
wire   [17:0] zoom_factor_V;
reg    m_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln27_fu_152_p2;
wire    ap_CS_fsm_state4;
wire   [2:0] row_fu_142_p2;
reg   [2:0] row_reg_200;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [3:0] col_fu_158_p2;
reg   [3:0] col_reg_208;
reg    ap_block_state3_io;
wire   [0:0] tmp_user_V_fu_170_p2;
wire   [0:0] tmp_last_V_fu_177_p2;
wire   [23:0] pixel_out_V_fu_188_p3;
reg   [2:0] p_Val2_1_reg_113;
reg   [3:0] p_Val2_s_reg_125;
wire   [0:0] icmp_ln25_fu_136_p2;
wire   [2:0] trunc_ln27_fu_148_p1;
wire   [2:0] or_ln30_fu_164_p2;
wire   [7:0] pixel_G_fu_184_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 VIDEO_OUT_V_data_V_1_sel_rd = 1'b0;
#0 VIDEO_OUT_V_data_V_1_sel_wr = 1'b0;
#0 VIDEO_OUT_V_data_V_1_state = 2'd0;
#0 VIDEO_OUT_V_keep_V_1_sel_rd = 1'b0;
#0 VIDEO_OUT_V_keep_V_1_state = 2'd0;
#0 VIDEO_OUT_V_strb_V_1_sel_rd = 1'b0;
#0 VIDEO_OUT_V_strb_V_1_state = 2'd0;
#0 VIDEO_OUT_V_user_V_1_sel_rd = 1'b0;
#0 VIDEO_OUT_V_user_V_1_sel_wr = 1'b0;
#0 VIDEO_OUT_V_user_V_1_state = 2'd0;
#0 VIDEO_OUT_V_last_V_1_sel_rd = 1'b0;
#0 VIDEO_OUT_V_last_V_1_sel_wr = 1'b0;
#0 VIDEO_OUT_V_last_V_1_state = 2'd0;
#0 VIDEO_OUT_V_id_V_1_sel_rd = 1'b0;
#0 VIDEO_OUT_V_id_V_1_state = 2'd0;
#0 VIDEO_OUT_V_dest_V_1_sel_rd = 1'b0;
#0 VIDEO_OUT_V_dest_V_1_state = 2'd0;
end

video_mandelbrot_generator_cmd_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CMD_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CMD_DATA_WIDTH ))
video_mandelbrot_generator_cmd_s_axi_U(
    .AWVALID(s_axi_cmd_AWVALID),
    .AWREADY(s_axi_cmd_AWREADY),
    .AWADDR(s_axi_cmd_AWADDR),
    .WVALID(s_axi_cmd_WVALID),
    .WREADY(s_axi_cmd_WREADY),
    .WDATA(s_axi_cmd_WDATA),
    .WSTRB(s_axi_cmd_WSTRB),
    .ARVALID(s_axi_cmd_ARVALID),
    .ARREADY(s_axi_cmd_ARREADY),
    .ARADDR(s_axi_cmd_ARADDR),
    .RVALID(s_axi_cmd_RVALID),
    .RREADY(s_axi_cmd_RREADY),
    .RDATA(s_axi_cmd_RDATA),
    .RRESP(s_axi_cmd_RRESP),
    .BVALID(s_axi_cmd_BVALID),
    .BREADY(s_axi_cmd_BREADY),
    .BRESP(s_axi_cmd_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .re_V(re_V),
    .im_V(im_V),
    .zoom_factor_V(zoom_factor_V)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_data_V_1_ack_out) & (1'b1 == VIDEO_OUT_V_data_V_1_vld_out))) begin
            VIDEO_OUT_V_data_V_1_sel_rd <= ~VIDEO_OUT_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_data_V_1_ack_in) & (1'b1 == VIDEO_OUT_V_data_V_1_vld_in))) begin
            VIDEO_OUT_V_data_V_1_sel_wr <= ~VIDEO_OUT_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == VIDEO_OUT_V_data_V_1_state) & (1'b0 == VIDEO_OUT_V_data_V_1_vld_in)) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (1'b0 == VIDEO_OUT_V_data_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_data_V_1_ack_out)))) begin
            VIDEO_OUT_V_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_data_V_1_vld_in)))) begin
            VIDEO_OUT_V_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == VIDEO_OUT_V_data_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_data_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_data_V_1_vld_in)) & (2'd3 == VIDEO_OUT_V_data_V_1_state)) | ((2'd1 == VIDEO_OUT_V_data_V_1_state) & (1'b1 == VIDEO_OUT_V_data_V_1_ack_out)) | ((2'd2 == VIDEO_OUT_V_data_V_1_state) & (1'b1 == VIDEO_OUT_V_data_V_1_vld_in)))) begin
            VIDEO_OUT_V_data_V_1_state <= 2'd3;
        end else begin
            VIDEO_OUT_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_dest_V_1_ack_out) & (1'b1 == VIDEO_OUT_V_dest_V_1_vld_out))) begin
            VIDEO_OUT_V_dest_V_1_sel_rd <= ~VIDEO_OUT_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == VIDEO_OUT_V_dest_V_1_state) & (1'b0 == VIDEO_OUT_V_dest_V_1_vld_in)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (1'b0 == VIDEO_OUT_V_dest_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_dest_V_1_ack_out)))) begin
            VIDEO_OUT_V_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_dest_V_1_vld_in)))) begin
            VIDEO_OUT_V_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == VIDEO_OUT_V_dest_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_dest_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_dest_V_1_vld_in)) & (2'd3 == VIDEO_OUT_V_dest_V_1_state)) | ((2'd1 == VIDEO_OUT_V_dest_V_1_state) & (1'b1 == VIDEO_OUT_V_dest_V_1_ack_out)) | ((2'd2 == VIDEO_OUT_V_dest_V_1_state) & (1'b1 == VIDEO_OUT_V_dest_V_1_vld_in)))) begin
            VIDEO_OUT_V_dest_V_1_state <= 2'd3;
        end else begin
            VIDEO_OUT_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_id_V_1_ack_out) & (1'b1 == VIDEO_OUT_V_id_V_1_vld_out))) begin
            VIDEO_OUT_V_id_V_1_sel_rd <= ~VIDEO_OUT_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == VIDEO_OUT_V_id_V_1_state) & (1'b0 == VIDEO_OUT_V_id_V_1_vld_in)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (1'b0 == VIDEO_OUT_V_id_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_id_V_1_ack_out)))) begin
            VIDEO_OUT_V_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_id_V_1_vld_in)))) begin
            VIDEO_OUT_V_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == VIDEO_OUT_V_id_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_id_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_id_V_1_vld_in)) & (2'd3 == VIDEO_OUT_V_id_V_1_state)) | ((2'd1 == VIDEO_OUT_V_id_V_1_state) & (1'b1 == VIDEO_OUT_V_id_V_1_ack_out)) | ((2'd2 == VIDEO_OUT_V_id_V_1_state) & (1'b1 == VIDEO_OUT_V_id_V_1_vld_in)))) begin
            VIDEO_OUT_V_id_V_1_state <= 2'd3;
        end else begin
            VIDEO_OUT_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_keep_V_1_vld_out) & (1'b1 == VIDEO_OUT_V_keep_V_1_ack_out))) begin
            VIDEO_OUT_V_keep_V_1_sel_rd <= ~VIDEO_OUT_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == VIDEO_OUT_V_keep_V_1_state) & (1'b0 == VIDEO_OUT_V_keep_V_1_vld_in)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (1'b0 == VIDEO_OUT_V_keep_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_keep_V_1_ack_out)))) begin
            VIDEO_OUT_V_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_keep_V_1_vld_in)))) begin
            VIDEO_OUT_V_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == VIDEO_OUT_V_keep_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_keep_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_keep_V_1_vld_in)) & (2'd3 == VIDEO_OUT_V_keep_V_1_state)) | ((2'd1 == VIDEO_OUT_V_keep_V_1_state) & (1'b1 == VIDEO_OUT_V_keep_V_1_ack_out)) | ((2'd2 == VIDEO_OUT_V_keep_V_1_state) & (1'b1 == VIDEO_OUT_V_keep_V_1_vld_in)))) begin
            VIDEO_OUT_V_keep_V_1_state <= 2'd3;
        end else begin
            VIDEO_OUT_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_last_V_1_ack_out) & (1'b1 == VIDEO_OUT_V_last_V_1_vld_out))) begin
            VIDEO_OUT_V_last_V_1_sel_rd <= ~VIDEO_OUT_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_last_V_1_ack_in) & (1'b1 == VIDEO_OUT_V_last_V_1_vld_in))) begin
            VIDEO_OUT_V_last_V_1_sel_wr <= ~VIDEO_OUT_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == VIDEO_OUT_V_last_V_1_state) & (1'b0 == VIDEO_OUT_V_last_V_1_vld_in)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (1'b0 == VIDEO_OUT_V_last_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_last_V_1_ack_out)))) begin
            VIDEO_OUT_V_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_last_V_1_vld_in)))) begin
            VIDEO_OUT_V_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == VIDEO_OUT_V_last_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_last_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_last_V_1_vld_in)) & (2'd3 == VIDEO_OUT_V_last_V_1_state)) | ((2'd1 == VIDEO_OUT_V_last_V_1_state) & (1'b1 == VIDEO_OUT_V_last_V_1_ack_out)) | ((2'd2 == VIDEO_OUT_V_last_V_1_state) & (1'b1 == VIDEO_OUT_V_last_V_1_vld_in)))) begin
            VIDEO_OUT_V_last_V_1_state <= 2'd3;
        end else begin
            VIDEO_OUT_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_strb_V_1_ack_out) & (1'b1 == VIDEO_OUT_V_strb_V_1_vld_out))) begin
            VIDEO_OUT_V_strb_V_1_sel_rd <= ~VIDEO_OUT_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == VIDEO_OUT_V_strb_V_1_state) & (1'b0 == VIDEO_OUT_V_strb_V_1_vld_in)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (1'b0 == VIDEO_OUT_V_strb_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_strb_V_1_ack_out)))) begin
            VIDEO_OUT_V_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_strb_V_1_vld_in)))) begin
            VIDEO_OUT_V_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == VIDEO_OUT_V_strb_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_strb_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_strb_V_1_vld_in)) & (2'd3 == VIDEO_OUT_V_strb_V_1_state)) | ((2'd1 == VIDEO_OUT_V_strb_V_1_state) & (1'b1 == VIDEO_OUT_V_strb_V_1_ack_out)) | ((2'd2 == VIDEO_OUT_V_strb_V_1_state) & (1'b1 == VIDEO_OUT_V_strb_V_1_vld_in)))) begin
            VIDEO_OUT_V_strb_V_1_state <= 2'd3;
        end else begin
            VIDEO_OUT_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_user_V_1_ack_out) & (1'b1 == VIDEO_OUT_V_user_V_1_vld_out))) begin
            VIDEO_OUT_V_user_V_1_sel_rd <= ~VIDEO_OUT_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == VIDEO_OUT_V_user_V_1_ack_in) & (1'b1 == VIDEO_OUT_V_user_V_1_vld_in))) begin
            VIDEO_OUT_V_user_V_1_sel_wr <= ~VIDEO_OUT_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        VIDEO_OUT_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == VIDEO_OUT_V_user_V_1_state) & (1'b0 == VIDEO_OUT_V_user_V_1_vld_in)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (1'b0 == VIDEO_OUT_V_user_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_user_V_1_ack_out)))) begin
            VIDEO_OUT_V_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_user_V_1_vld_in)))) begin
            VIDEO_OUT_V_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == VIDEO_OUT_V_user_V_1_vld_in) & (1'b1 == VIDEO_OUT_V_user_V_1_ack_out)) & ~((m_axis_video_TREADY == 1'b0) & (1'b1 == VIDEO_OUT_V_user_V_1_vld_in)) & (2'd3 == VIDEO_OUT_V_user_V_1_state)) | ((2'd1 == VIDEO_OUT_V_user_V_1_state) & (1'b1 == VIDEO_OUT_V_user_V_1_ack_out)) | ((2'd2 == VIDEO_OUT_V_user_V_1_state) & (1'b1 == VIDEO_OUT_V_user_V_1_vld_in)))) begin
            VIDEO_OUT_V_user_V_1_state <= 2'd3;
        end else begin
            VIDEO_OUT_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        p_Val2_1_reg_113 <= row_reg_200;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_1_reg_113 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == VIDEO_OUT_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state4))) begin
        p_Val2_s_reg_125 <= col_reg_208;
    end else if ((~((2'd1 == VIDEO_OUT_V_dest_V_1_state) | (2'd1 == VIDEO_OUT_V_id_V_1_state) | (2'd1 == VIDEO_OUT_V_last_V_1_state) | (2'd1 == VIDEO_OUT_V_user_V_1_state) | (2'd1 == VIDEO_OUT_V_strb_V_1_state) | (2'd1 == VIDEO_OUT_V_keep_V_1_state) | (2'd1 == VIDEO_OUT_V_data_V_1_state) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln25_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_125 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == VIDEO_OUT_V_data_V_1_load_A)) begin
        VIDEO_OUT_V_data_V_1_payload_A <= pixel_out_V_fu_188_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == VIDEO_OUT_V_data_V_1_load_B)) begin
        VIDEO_OUT_V_data_V_1_payload_B <= pixel_out_V_fu_188_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == VIDEO_OUT_V_last_V_1_load_A)) begin
        VIDEO_OUT_V_last_V_1_payload_A <= tmp_last_V_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == VIDEO_OUT_V_last_V_1_load_B)) begin
        VIDEO_OUT_V_last_V_1_payload_B <= tmp_last_V_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == VIDEO_OUT_V_user_V_1_load_A)) begin
        VIDEO_OUT_V_user_V_1_payload_A <= tmp_user_V_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == VIDEO_OUT_V_user_V_1_load_B)) begin
        VIDEO_OUT_V_user_V_1_payload_B <= tmp_user_V_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_io) & (1'b1 == ap_CS_fsm_state3))) begin
        col_reg_208 <= col_fu_158_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((2'd1 == VIDEO_OUT_V_dest_V_1_state) | (2'd1 == VIDEO_OUT_V_id_V_1_state) | (2'd1 == VIDEO_OUT_V_last_V_1_state) | (2'd1 == VIDEO_OUT_V_user_V_1_state) | (2'd1 == VIDEO_OUT_V_strb_V_1_state) | (2'd1 == VIDEO_OUT_V_keep_V_1_state) | (2'd1 == VIDEO_OUT_V_data_V_1_state) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        row_reg_200 <= row_fu_142_p2;
    end
end

always @ (*) begin
    if ((1'b1 == VIDEO_OUT_V_data_V_1_sel)) begin
        VIDEO_OUT_V_data_V_1_data_out = VIDEO_OUT_V_data_V_1_payload_B;
    end else begin
        VIDEO_OUT_V_data_V_1_data_out = VIDEO_OUT_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        VIDEO_OUT_V_data_V_1_vld_in = 1'b1;
    end else begin
        VIDEO_OUT_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        VIDEO_OUT_V_dest_V_1_vld_in = 1'b1;
    end else begin
        VIDEO_OUT_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        VIDEO_OUT_V_id_V_1_vld_in = 1'b1;
    end else begin
        VIDEO_OUT_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        VIDEO_OUT_V_keep_V_1_vld_in = 1'b1;
    end else begin
        VIDEO_OUT_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == VIDEO_OUT_V_last_V_1_sel)) begin
        VIDEO_OUT_V_last_V_1_data_out = VIDEO_OUT_V_last_V_1_payload_B;
    end else begin
        VIDEO_OUT_V_last_V_1_data_out = VIDEO_OUT_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        VIDEO_OUT_V_last_V_1_vld_in = 1'b1;
    end else begin
        VIDEO_OUT_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        VIDEO_OUT_V_strb_V_1_vld_in = 1'b1;
    end else begin
        VIDEO_OUT_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == VIDEO_OUT_V_user_V_1_sel)) begin
        VIDEO_OUT_V_user_V_1_data_out = VIDEO_OUT_V_user_V_1_payload_B;
    end else begin
        VIDEO_OUT_V_user_V_1_data_out = VIDEO_OUT_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        VIDEO_OUT_V_user_V_1_vld_in = 1'b1;
    end else begin
        VIDEO_OUT_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == VIDEO_OUT_V_dest_V_1_state) | (2'd1 == VIDEO_OUT_V_id_V_1_state) | (2'd1 == VIDEO_OUT_V_last_V_1_state) | (2'd1 == VIDEO_OUT_V_user_V_1_state) | (2'd1 == VIDEO_OUT_V_strb_V_1_state) | (2'd1 == VIDEO_OUT_V_keep_V_1_state) | (2'd1 == VIDEO_OUT_V_data_V_1_state) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln25_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((2'd1 == VIDEO_OUT_V_dest_V_1_state) | (2'd1 == VIDEO_OUT_V_id_V_1_state) | (2'd1 == VIDEO_OUT_V_last_V_1_state) | (2'd1 == VIDEO_OUT_V_user_V_1_state) | (2'd1 == VIDEO_OUT_V_strb_V_1_state) | (2'd1 == VIDEO_OUT_V_keep_V_1_state) | (2'd1 == VIDEO_OUT_V_data_V_1_state) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln25_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)))) begin
        m_axis_video_TDATA_blk_n = VIDEO_OUT_V_data_V_1_state[1'd1];
    end else begin
        m_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((2'd1 == VIDEO_OUT_V_dest_V_1_state) | (2'd1 == VIDEO_OUT_V_id_V_1_state) | (2'd1 == VIDEO_OUT_V_last_V_1_state) | (2'd1 == VIDEO_OUT_V_user_V_1_state) | (2'd1 == VIDEO_OUT_V_strb_V_1_state) | (2'd1 == VIDEO_OUT_V_keep_V_1_state) | (2'd1 == VIDEO_OUT_V_data_V_1_state) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln25_fu_136_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((2'd1 == VIDEO_OUT_V_dest_V_1_state) | (2'd1 == VIDEO_OUT_V_id_V_1_state) | (2'd1 == VIDEO_OUT_V_last_V_1_state) | (2'd1 == VIDEO_OUT_V_user_V_1_state) | (2'd1 == VIDEO_OUT_V_strb_V_1_state) | (2'd1 == VIDEO_OUT_V_keep_V_1_state) | (2'd1 == VIDEO_OUT_V_data_V_1_state) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0))) & (icmp_ln25_fu_136_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b0 == ap_block_state3_io) & (icmp_ln27_fu_152_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == VIDEO_OUT_V_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign VIDEO_OUT_V_data_V_1_ack_in = VIDEO_OUT_V_data_V_1_state[1'd1];

assign VIDEO_OUT_V_data_V_1_ack_out = m_axis_video_TREADY;

assign VIDEO_OUT_V_data_V_1_load_A = (~VIDEO_OUT_V_data_V_1_sel_wr & VIDEO_OUT_V_data_V_1_state_cmp_full);

assign VIDEO_OUT_V_data_V_1_load_B = (VIDEO_OUT_V_data_V_1_state_cmp_full & VIDEO_OUT_V_data_V_1_sel_wr);

assign VIDEO_OUT_V_data_V_1_sel = VIDEO_OUT_V_data_V_1_sel_rd;

assign VIDEO_OUT_V_data_V_1_state_cmp_full = ((VIDEO_OUT_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign VIDEO_OUT_V_data_V_1_vld_out = VIDEO_OUT_V_data_V_1_state[1'd0];

assign VIDEO_OUT_V_dest_V_1_ack_out = m_axis_video_TREADY;

assign VIDEO_OUT_V_dest_V_1_data_out = 1'd0;

assign VIDEO_OUT_V_dest_V_1_sel = VIDEO_OUT_V_dest_V_1_sel_rd;

assign VIDEO_OUT_V_dest_V_1_vld_out = VIDEO_OUT_V_dest_V_1_state[1'd0];

assign VIDEO_OUT_V_id_V_1_ack_out = m_axis_video_TREADY;

assign VIDEO_OUT_V_id_V_1_data_out = 1'd0;

assign VIDEO_OUT_V_id_V_1_sel = VIDEO_OUT_V_id_V_1_sel_rd;

assign VIDEO_OUT_V_id_V_1_vld_out = VIDEO_OUT_V_id_V_1_state[1'd0];

assign VIDEO_OUT_V_keep_V_1_ack_out = m_axis_video_TREADY;

assign VIDEO_OUT_V_keep_V_1_data_out = 3'd0;

assign VIDEO_OUT_V_keep_V_1_sel = VIDEO_OUT_V_keep_V_1_sel_rd;

assign VIDEO_OUT_V_keep_V_1_vld_out = VIDEO_OUT_V_keep_V_1_state[1'd0];

assign VIDEO_OUT_V_last_V_1_ack_in = VIDEO_OUT_V_last_V_1_state[1'd1];

assign VIDEO_OUT_V_last_V_1_ack_out = m_axis_video_TREADY;

assign VIDEO_OUT_V_last_V_1_load_A = (~VIDEO_OUT_V_last_V_1_sel_wr & VIDEO_OUT_V_last_V_1_state_cmp_full);

assign VIDEO_OUT_V_last_V_1_load_B = (VIDEO_OUT_V_last_V_1_state_cmp_full & VIDEO_OUT_V_last_V_1_sel_wr);

assign VIDEO_OUT_V_last_V_1_sel = VIDEO_OUT_V_last_V_1_sel_rd;

assign VIDEO_OUT_V_last_V_1_state_cmp_full = ((VIDEO_OUT_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign VIDEO_OUT_V_last_V_1_vld_out = VIDEO_OUT_V_last_V_1_state[1'd0];

assign VIDEO_OUT_V_strb_V_1_ack_out = m_axis_video_TREADY;

assign VIDEO_OUT_V_strb_V_1_data_out = 3'd0;

assign VIDEO_OUT_V_strb_V_1_sel = VIDEO_OUT_V_strb_V_1_sel_rd;

assign VIDEO_OUT_V_strb_V_1_vld_out = VIDEO_OUT_V_strb_V_1_state[1'd0];

assign VIDEO_OUT_V_user_V_1_ack_in = VIDEO_OUT_V_user_V_1_state[1'd1];

assign VIDEO_OUT_V_user_V_1_ack_out = m_axis_video_TREADY;

assign VIDEO_OUT_V_user_V_1_load_A = (~VIDEO_OUT_V_user_V_1_sel_wr & VIDEO_OUT_V_user_V_1_state_cmp_full);

assign VIDEO_OUT_V_user_V_1_load_B = (VIDEO_OUT_V_user_V_1_state_cmp_full & VIDEO_OUT_V_user_V_1_sel_wr);

assign VIDEO_OUT_V_user_V_1_sel = VIDEO_OUT_V_user_V_1_sel_rd;

assign VIDEO_OUT_V_user_V_1_state_cmp_full = ((VIDEO_OUT_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign VIDEO_OUT_V_user_V_1_vld_out = VIDEO_OUT_V_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((2'd1 == VIDEO_OUT_V_dest_V_1_state) | (2'd1 == VIDEO_OUT_V_id_V_1_state) | (2'd1 == VIDEO_OUT_V_last_V_1_state) | (2'd1 == VIDEO_OUT_V_user_V_1_state) | (2'd1 == VIDEO_OUT_V_strb_V_1_state) | (2'd1 == VIDEO_OUT_V_keep_V_1_state) | (2'd1 == VIDEO_OUT_V_data_V_1_state) | ((2'd3 == VIDEO_OUT_V_data_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_dest_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_id_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_last_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_user_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_strb_V_1_state) & (m_axis_video_TREADY == 1'b0)) | ((2'd3 == VIDEO_OUT_V_keep_V_1_state) & (m_axis_video_TREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state3_io = ((icmp_ln27_fu_152_p2 == 1'd0) & (1'b0 == VIDEO_OUT_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign col_fu_158_p2 = (4'd1 + p_Val2_s_reg_125);

assign icmp_ln25_fu_136_p2 = ((p_Val2_1_reg_113 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_152_p2 = ((p_Val2_s_reg_125 == 4'd8) ? 1'b1 : 1'b0);

assign m_axis_video_TDATA = VIDEO_OUT_V_data_V_1_data_out;

assign m_axis_video_TDEST = VIDEO_OUT_V_dest_V_1_data_out;

assign m_axis_video_TID = VIDEO_OUT_V_id_V_1_data_out;

assign m_axis_video_TKEEP = VIDEO_OUT_V_keep_V_1_data_out;

assign m_axis_video_TLAST = VIDEO_OUT_V_last_V_1_data_out;

assign m_axis_video_TSTRB = VIDEO_OUT_V_strb_V_1_data_out;

assign m_axis_video_TUSER = VIDEO_OUT_V_user_V_1_data_out;

assign m_axis_video_TVALID = VIDEO_OUT_V_dest_V_1_state[1'd0];

assign or_ln30_fu_164_p2 = (trunc_ln27_fu_148_p1 | p_Val2_1_reg_113);

assign pixel_G_fu_184_p1 = p_Val2_s_reg_125;

assign pixel_out_V_fu_188_p3 = {{16'd0}, {pixel_G_fu_184_p1}};

assign row_fu_142_p2 = (p_Val2_1_reg_113 + 3'd1);

assign tmp_last_V_fu_177_p2 = ((p_Val2_s_reg_125 == 4'd7) ? 1'b1 : 1'b0);

assign tmp_user_V_fu_170_p2 = ((or_ln30_fu_164_p2 == 3'd0) ? 1'b1 : 1'b0);

assign trunc_ln27_fu_148_p1 = p_Val2_s_reg_125[2:0];

endmodule //video_mandelbrot_generator
