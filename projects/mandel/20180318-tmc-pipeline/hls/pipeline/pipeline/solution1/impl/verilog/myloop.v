// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myloop,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232500,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=150,HLS_SYN_LUT=63}" *)

module myloop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V,
        b_V,
        outp,
        outp_ap_vld
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] a_V;
input  [17:0] b_V;
output  [63:0] outp;
output   outp_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg outp_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
(* use_dsp48 = "no" *) wire  signed [17:0] tmp_fu_35_p2;
reg  signed [17:0] tmp_reg_88;
wire  signed [17:0] tmp3_fu_51_p2;
reg  signed [17:0] tmp3_reg_94;
wire  signed [17:0] tmp7_fu_57_p2;
reg  signed [17:0] tmp7_reg_102;
wire    ap_CS_fsm_state2;
wire  signed [17:0] tmp2_fu_61_p2;
reg  signed [17:0] tmp2_reg_107;
wire    ap_CS_fsm_state3;
wire  signed [17:0] tmp5_fu_65_p2;
reg  signed [17:0] tmp5_reg_112;
wire  signed [17:0] tmp1_fu_69_p2;
reg  signed [17:0] tmp1_reg_119;
wire    ap_CS_fsm_state4;
wire  signed [17:0] tmp9_fu_73_p2;
reg  signed [17:0] tmp9_reg_124;
wire  signed [17:0] r_V_s_fu_77_p2;
reg  signed [17:0] r_V_s_reg_129;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [35:0] r_V_1_fu_81_p2;
wire   [17:0] r_V_1_fu_81_p0;
wire   [17:0] r_V_1_fu_81_p1;
reg   [5:0] ap_NS_fsm;
wire   [35:0] r_V_1_fu_81_p00;
wire   [35:0] r_V_1_fu_81_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

myloop_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myloop_mul_mul_18bkb_U1(
    .din0(tmp_fu_35_p2),
    .din1(tmp_fu_35_p2),
    .dout(tmp3_fu_51_p2)
);

myloop_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myloop_mul_mul_18bkb_U2(
    .din0(tmp3_reg_94),
    .din1(tmp_reg_88),
    .dout(tmp7_fu_57_p2)
);

myloop_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myloop_mul_mul_18bkb_U3(
    .din0(tmp3_reg_94),
    .din1(tmp3_reg_94),
    .dout(tmp2_fu_61_p2)
);

myloop_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myloop_mul_mul_18bkb_U4(
    .din0(tmp7_reg_102),
    .din1(tmp3_reg_94),
    .dout(tmp5_fu_65_p2)
);

myloop_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myloop_mul_mul_18bkb_U5(
    .din0(tmp5_reg_112),
    .din1(tmp2_reg_107),
    .dout(tmp1_fu_69_p2)
);

myloop_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myloop_mul_mul_18bkb_U6(
    .din0(tmp5_reg_112),
    .din1(tmp5_reg_112),
    .dout(tmp9_fu_73_p2)
);

myloop_mul_mul_18bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
myloop_mul_mul_18bkb_U7(
    .din0(tmp9_reg_124),
    .din1(tmp1_reg_119),
    .dout(r_V_s_fu_77_p2)
);

myloop_mul_mul_18cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
myloop_mul_mul_18cud_U8(
    .din0(r_V_1_fu_81_p0),
    .din1(r_V_1_fu_81_p1),
    .dout(r_V_1_fu_81_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_V_s_reg_129 <= r_V_s_fu_77_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp1_reg_119 <= tmp1_fu_69_p2;
        tmp9_reg_124 <= tmp9_fu_73_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp2_reg_107 <= tmp2_fu_61_p2;
        tmp5_reg_112 <= tmp5_fu_65_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp3_reg_94 <= tmp3_fu_51_p2;
        tmp_reg_88 <= tmp_fu_35_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp7_reg_102 <= tmp7_fu_57_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        outp_ap_vld = 1'b1;
    end else begin
        outp_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign outp = r_V_1_fu_81_p2;

assign r_V_1_fu_81_p0 = r_V_1_fu_81_p00;

assign r_V_1_fu_81_p00 = $unsigned(r_V_s_reg_129);

assign r_V_1_fu_81_p1 = r_V_1_fu_81_p10;

assign r_V_1_fu_81_p10 = $unsigned(tmp_reg_88);

assign tmp_fu_35_p2 = (b_V + a_V);

endmodule //myloop
