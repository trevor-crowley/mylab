// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myloop_HH_
#define _myloop_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "myloop_mul_mul_18bkb.h"
#include "myloop_mul_mul_18cud.h"

namespace ap_rtl {

struct myloop : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<18> > a_V;
    sc_in< sc_lv<18> > b_V;
    sc_out< sc_lv<64> > outp;
    sc_out< sc_logic > outp_ap_vld;


    // Module declarations
    myloop(sc_module_name name);
    SC_HAS_PROCESS(myloop);

    ~myloop();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    myloop_mul_mul_18bkb<1,1,18,18,18>* myloop_mul_mul_18bkb_U1;
    myloop_mul_mul_18bkb<1,1,18,18,18>* myloop_mul_mul_18bkb_U2;
    myloop_mul_mul_18bkb<1,1,18,18,18>* myloop_mul_mul_18bkb_U3;
    myloop_mul_mul_18bkb<1,1,18,18,18>* myloop_mul_mul_18bkb_U4;
    myloop_mul_mul_18bkb<1,1,18,18,18>* myloop_mul_mul_18bkb_U5;
    myloop_mul_mul_18bkb<1,1,18,18,18>* myloop_mul_mul_18bkb_U6;
    myloop_mul_mul_18bkb<1,1,18,18,18>* myloop_mul_mul_18bkb_U7;
    myloop_mul_mul_18cud<1,1,18,18,36>* myloop_mul_mul_18cud_U8;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<18> > tmp_fu_35_p2;
    sc_signal< sc_lv<18> > tmp_reg_88;
    sc_signal< sc_lv<18> > tmp3_fu_51_p2;
    sc_signal< sc_lv<18> > tmp3_reg_94;
    sc_signal< sc_lv<18> > tmp7_fu_57_p2;
    sc_signal< sc_lv<18> > tmp7_reg_102;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<18> > tmp2_fu_61_p2;
    sc_signal< sc_lv<18> > tmp2_reg_107;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<18> > tmp5_fu_65_p2;
    sc_signal< sc_lv<18> > tmp5_reg_112;
    sc_signal< sc_lv<18> > tmp1_fu_69_p2;
    sc_signal< sc_lv<18> > tmp1_reg_119;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<18> > tmp9_fu_73_p2;
    sc_signal< sc_lv<18> > tmp9_reg_124;
    sc_signal< sc_lv<18> > r_V_s_fu_77_p2;
    sc_signal< sc_lv<18> > r_V_s_reg_129;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<36> > r_V_1_fu_81_p2;
    sc_signal< sc_lv<18> > r_V_1_fu_81_p0;
    sc_signal< sc_lv<18> > r_V_1_fu_81_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_lv<36> > r_V_1_fu_81_p00;
    sc_signal< sc_lv<36> > r_V_1_fu_81_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_outp();
    void thread_outp_ap_vld();
    void thread_r_V_1_fu_81_p0();
    void thread_r_V_1_fu_81_p00();
    void thread_r_V_1_fu_81_p1();
    void thread_r_V_1_fu_81_p10();
    void thread_tmp_fu_35_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
