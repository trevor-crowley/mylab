// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_tpg_0_0_tpgPatternDPColorRam (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        y,
        x,
        color,
        ap_return_0,
        ap_return_1,
        ap_return_2
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] y;
input  [15:0] x;
input  [7:0] color;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [15:0] rampVal_2;
wire   [0:0] tmp_s_fu_62_p2;
reg   [0:0] tmp_s_reg_253;
reg   [1:0] Sel_reg_258;
wire   [0:0] sel_tmp8_fu_126_p2;
reg   [0:0] sel_tmp8_reg_265;
reg    ap_block_pp0_stage0_subdone;
wire   [15:0] tmp_79_fu_223_p2;
wire   [7:0] tmp_84_fu_58_p1;
wire   [6:0] tmp_85_fu_78_p4;
wire   [6:0] tmp_86_fu_94_p4;
wire   [0:0] tmp_88_fu_110_p1;
wire   [0:0] icmp6_fu_104_p2;
wire   [0:0] sel_tmp6_fu_114_p2;
wire   [0:0] icmp_fu_88_p2;
wire   [0:0] sel_tmp7_fu_120_p2;
wire   [15:0] p_rampVal_2_load_fu_136_p3;
wire   [0:0] sel_tmp_fu_147_p2;
wire   [7:0] tmp_val_1_V_fu_143_p1;
wire   [0:0] sel_tmp2_fu_160_p2;
wire   [7:0] sel_tmp1_fu_152_p3;
wire   [0:0] sel_tmp4_fu_173_p2;
wire   [7:0] sel_tmp3_fu_165_p3;
wire   [0:0] tmp_fu_186_p2;
wire   [7:0] sel_tmp5_fu_200_p3;
wire   [7:0] tmp_val_V_1_fu_178_p3;
wire   [7:0] tmp_val_2_V_fu_192_p3;
wire   [7:0] Scalar_val_0_V_writ_fu_208_p3;
wire   [7:0] Scalar_val_1_V_writ_fu_216_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 rampVal_2 = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Sel_reg_258 <= {{y[7:6]}};
        sel_tmp8_reg_265 <= sel_tmp8_fu_126_p2;
        tmp_s_reg_253 <= tmp_s_fu_62_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        rampVal_2 <= tmp_79_fu_223_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Scalar_val_0_V_writ_fu_208_p3 = ((sel_tmp4_fu_173_p2[0:0] === 1'b1) ? tmp_val_1_V_fu_143_p1 : sel_tmp5_fu_200_p3);

assign Scalar_val_1_V_writ_fu_216_p3 = ((sel_tmp8_reg_265[0:0] === 1'b1) ? tmp_val_V_1_fu_178_p3 : tmp_val_2_V_fu_192_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = Scalar_val_0_V_writ_fu_208_p3;

assign ap_return_1 = Scalar_val_1_V_writ_fu_216_p3;

assign ap_return_2 = tmp_val_2_V_fu_192_p3;

assign icmp6_fu_104_p2 = ((tmp_86_fu_94_p4 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_fu_88_p2 = ((tmp_85_fu_78_p4 == 7'd0) ? 1'b1 : 1'b0);

assign p_rampVal_2_load_fu_136_p3 = ((tmp_s_reg_253[0:0] === 1'b1) ? 16'd0 : rampVal_2);

assign sel_tmp1_fu_152_p3 = ((sel_tmp_fu_147_p2[0:0] === 1'b1) ? 8'd0 : tmp_val_1_V_fu_143_p1);

assign sel_tmp2_fu_160_p2 = ((Sel_reg_258 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_165_p3 = ((sel_tmp2_fu_160_p2[0:0] === 1'b1) ? tmp_val_1_V_fu_143_p1 : sel_tmp1_fu_152_p3);

assign sel_tmp4_fu_173_p2 = ((Sel_reg_258 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_200_p3 = ((sel_tmp2_fu_160_p2[0:0] === 1'b1) ? 8'd0 : sel_tmp1_fu_152_p3);

assign sel_tmp6_fu_114_p2 = (tmp_88_fu_110_p1 ^ 1'd1);

assign sel_tmp7_fu_120_p2 = (sel_tmp6_fu_114_p2 & icmp6_fu_104_p2);

assign sel_tmp8_fu_126_p2 = (sel_tmp7_fu_120_p2 | icmp_fu_88_p2);

assign sel_tmp_fu_147_p2 = ((Sel_reg_258 == 2'd2) ? 1'b1 : 1'b0);

assign tmp_79_fu_223_p2 = (16'd1 + p_rampVal_2_load_fu_136_p3);

assign tmp_84_fu_58_p1 = x[7:0];

assign tmp_85_fu_78_p4 = {{color[7:1]}};

assign tmp_86_fu_94_p4 = {{color[7:1]}};

assign tmp_88_fu_110_p1 = x[0:0];

assign tmp_fu_186_p2 = (sel_tmp4_fu_173_p2 | sel_tmp2_fu_160_p2);

assign tmp_s_fu_62_p2 = ((tmp_84_fu_58_p1 == 8'd0) ? 1'b1 : 1'b0);

assign tmp_val_1_V_fu_143_p1 = p_rampVal_2_load_fu_136_p3[7:0];

assign tmp_val_2_V_fu_192_p3 = ((tmp_fu_186_p2[0:0] === 1'b1) ? 8'd0 : tmp_val_1_V_fu_143_p1);

assign tmp_val_V_1_fu_178_p3 = ((sel_tmp4_fu_173_p2[0:0] === 1'b1) ? 8'd0 : sel_tmp3_fu_165_p3);

endmodule //design_1_v_tpg_0_0_tpgPatternDPColorRam
