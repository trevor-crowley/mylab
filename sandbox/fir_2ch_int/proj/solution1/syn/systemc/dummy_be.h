// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dummy_be_HH_
#define _dummy_be_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct dummy_be : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<40> > in_V_dout;
    sc_in< sc_logic > in_V_empty_n;
    sc_out< sc_logic > in_V_read;
    sc_out< sc_lv<40> > dout_i_V_din;
    sc_in< sc_logic > dout_i_V_full_n;
    sc_out< sc_logic > dout_i_V_write;
    sc_out< sc_lv<40> > dout_q_V_din;
    sc_in< sc_logic > dout_q_V_full_n;
    sc_out< sc_logic > dout_q_V_write;


    // Module declarations
    dummy_be(sc_module_name name);
    SC_HAS_PROCESS(dummy_be);

    ~dummy_be();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > in_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln149_fu_66_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > dout_i_V_blk_n;
    sc_signal< sc_logic > dout_q_V_blk_n;
    sc_signal< sc_lv<12> > i_fu_72_p2;
    sc_signal< sc_lv<12> > i_reg_81;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_lv<40> > in_V_read_reg_86;
    sc_signal< sc_lv<12> > i_0_reg_55;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_9C4;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_dout_i_V_blk_n();
    void thread_dout_i_V_din();
    void thread_dout_i_V_write();
    void thread_dout_q_V_blk_n();
    void thread_dout_q_V_din();
    void thread_dout_q_V_write();
    void thread_i_fu_72_p2();
    void thread_icmp_ln149_fu_66_p2();
    void thread_in_V_blk_n();
    void thread_in_V_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
