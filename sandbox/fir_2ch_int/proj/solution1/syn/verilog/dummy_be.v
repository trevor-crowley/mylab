// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dummy_be (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_dout,
        in_V_empty_n,
        in_V_read,
        dout_i_V_din,
        dout_i_V_full_n,
        dout_i_V_write,
        dout_q_V_din,
        dout_q_V_full_n,
        dout_q_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [39:0] in_V_dout;
input   in_V_empty_n;
output   in_V_read;
output  [39:0] dout_i_V_din;
input   dout_i_V_full_n;
output   dout_i_V_write;
output  [39:0] dout_q_V_din;
input   dout_q_V_full_n;
output   dout_q_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_read;
reg dout_i_V_write;
reg dout_q_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln149_fu_66_p2;
wire    ap_CS_fsm_state3;
reg    dout_i_V_blk_n;
reg    dout_q_V_blk_n;
wire   [11:0] i_fu_72_p2;
reg   [11:0] i_reg_81;
reg    ap_block_state2;
reg   [39:0] in_V_read_reg_86;
reg   [11:0] i_0_reg_55;
reg    ap_block_state1;
reg    ap_block_state3;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (icmp_ln149_fu_66_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((dout_q_V_full_n == 1'b0) | (dout_i_V_full_n == 1'b0) | (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_55 <= i_reg_81;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_55 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_81 <= i_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (icmp_ln149_fu_66_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        in_V_read_reg_86 <= in_V_dout;
    end
end

always @ (*) begin
    if ((~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (icmp_ln149_fu_66_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (icmp_ln149_fu_66_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_i_V_blk_n = dout_i_V_full_n;
    end else begin
        dout_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dout_q_V_full_n == 1'b0) | (dout_i_V_full_n == 1'b0) | (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        dout_i_V_write = 1'b1;
    end else begin
        dout_i_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dout_q_V_blk_n = dout_q_V_full_n;
    end else begin
        dout_q_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((dout_q_V_full_n == 1'b0) | (dout_i_V_full_n == 1'b0) | (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
        dout_q_V_write = 1'b1;
    end else begin
        dout_q_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((icmp_ln149_fu_66_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_blk_n = in_V_empty_n;
    end else begin
        in_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((dout_q_V_full_n == 1'b0) | (dout_i_V_full_n == 1'b0) | (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3)) | (~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (icmp_ln149_fu_66_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        in_V_read = 1'b1;
    end else begin
        in_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (icmp_ln149_fu_66_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0)) & (icmp_ln149_fu_66_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((dout_q_V_full_n == 1'b0) | (dout_i_V_full_n == 1'b0) | (in_V_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln149_fu_66_p2 == 1'd0) & (in_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((dout_q_V_full_n == 1'b0) | (dout_i_V_full_n == 1'b0) | (in_V_empty_n == 1'b0));
end

assign dout_i_V_din = in_V_read_reg_86;

assign dout_q_V_din = in_V_dout;

assign i_fu_72_p2 = (i_0_reg_55 + 12'd1);

assign icmp_ln149_fu_66_p2 = ((i_0_reg_55 == 12'd2500) ? 1'b1 : 1'b0);

endmodule //dummy_be
