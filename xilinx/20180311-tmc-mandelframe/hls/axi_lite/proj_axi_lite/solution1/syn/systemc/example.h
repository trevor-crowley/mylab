// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _example_HH_
#define _example_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "example_BUS_A_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_BUS_A_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_BUS_A_DATA_WIDTH = 32>
struct example : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_BUS_A_AWVALID;
    sc_out< sc_logic > s_axi_BUS_A_AWREADY;
    sc_in< sc_uint<C_S_AXI_BUS_A_ADDR_WIDTH> > s_axi_BUS_A_AWADDR;
    sc_in< sc_logic > s_axi_BUS_A_WVALID;
    sc_out< sc_logic > s_axi_BUS_A_WREADY;
    sc_in< sc_uint<C_S_AXI_BUS_A_DATA_WIDTH> > s_axi_BUS_A_WDATA;
    sc_in< sc_uint<C_S_AXI_BUS_A_DATA_WIDTH/8> > s_axi_BUS_A_WSTRB;
    sc_in< sc_logic > s_axi_BUS_A_ARVALID;
    sc_out< sc_logic > s_axi_BUS_A_ARREADY;
    sc_in< sc_uint<C_S_AXI_BUS_A_ADDR_WIDTH> > s_axi_BUS_A_ARADDR;
    sc_out< sc_logic > s_axi_BUS_A_RVALID;
    sc_in< sc_logic > s_axi_BUS_A_RREADY;
    sc_out< sc_uint<C_S_AXI_BUS_A_DATA_WIDTH> > s_axi_BUS_A_RDATA;
    sc_out< sc_lv<2> > s_axi_BUS_A_RRESP;
    sc_out< sc_logic > s_axi_BUS_A_BVALID;
    sc_in< sc_logic > s_axi_BUS_A_BREADY;
    sc_out< sc_lv<2> > s_axi_BUS_A_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    example(sc_module_name name);
    SC_HAS_PROCESS(example);

    ~example();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    example_BUS_A_s_axi<C_S_AXI_BUS_A_ADDR_WIDTH,C_S_AXI_BUS_A_DATA_WIDTH>* example_BUS_A_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<8> > a;
    sc_signal< sc_lv<8> > b;
    sc_signal< sc_lv<8> > c_i;
    sc_signal< sc_lv<8> > c_0_data_reg;
    sc_signal< sc_logic > c_0_vld_reg;
    sc_signal< sc_logic > c_0_ack_out;
    sc_signal< sc_lv<8> > c_1_data_reg;
    sc_signal< sc_logic > c_1_vld_reg;
    sc_signal< sc_logic > c_1_vld_in;
    sc_signal< sc_logic > c_1_ack_in;
    sc_signal< sc_lv<8> > a_read_reg_64;
    sc_signal< sc_lv<8> > b_read_reg_69;
    sc_signal< sc_lv<8> > tmp_1_fu_58_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > tmp1_fu_53_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_c_0_ack_out();
    void thread_c_1_ack_in();
    void thread_c_1_vld_in();
    void thread_tmp1_fu_53_p2();
    void thread_tmp_1_fu_58_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
