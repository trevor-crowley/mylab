// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandelbrot_frame,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200tfbg676-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.275000,HLS_SYN_LAT=615361,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=107,HLS_SYN_LUT=1622}" *)

module mandelbrot_frame (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        video_out_TDATA,
        video_out_TVALID,
        video_out_TREADY,
        video_out_TKEEP,
        video_out_TSTRB,
        video_out_TUSER,
        video_out_TLAST,
        video_out_TID,
        video_out_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [23:0] video_out_TDATA;
output   video_out_TVALID;
input   video_out_TREADY;
output  [2:0] video_out_TKEEP;
output  [2:0] video_out_TSTRB;
output  [0:0] video_out_TUSER;
output  [0:0] video_out_TLAST;
output  [0:0] video_out_TID;
output  [0:0] video_out_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg video_out_TVALID;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] pal_rot_V;
reg    video_out_TDATA_blk_n;
wire    ap_CS_fsm_state4;
reg   [11:0] pal_rot_V_load_reg_927;
wire   [19:0] tmp_cast_fu_288_p1;
reg   [19:0] tmp_cast_reg_932;
wire   [8:0] y_1_fu_302_p2;
reg   [8:0] y_1_reg_940;
wire    ap_CS_fsm_state2;
wire   [19:0] tmp_1_cast_fu_314_p1;
reg   [19:0] tmp_1_cast_reg_945;
wire   [0:0] exitcond1_fu_296_p2;
wire   [9:0] x_1_fu_339_p2;
reg   [9:0] x_1_reg_953;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_user_V_fu_371_p2;
reg   [0:0] tmp_user_V_reg_958;
wire   [0:0] exitcond_fu_333_p2;
wire   [0:0] tmp_last_V_fu_377_p2;
reg   [0:0] tmp_last_V_reg_963;
reg   [7:0] tmp_9_reg_968;
reg   [8:0] y_reg_261;
reg   [9:0] x_reg_273;
reg    ap_sig_ioackin_video_out_TREADY;
wire   [11:0] tmp_2_fu_318_p2;
reg    ap_reg_ioackin_video_out_TREADY;
wire   [8:0] tmp_1_fu_308_p0;
wire   [17:0] y_cast2_fu_292_p1;
wire   [8:0] tmp_1_fu_308_p1;
wire   [17:0] tmp_1_fu_308_p2;
wire   [8:0] tmp_fu_345_p1;
wire   [0:0] tmp_5_fu_355_p3;
wire   [8:0] tmp_3_fu_349_p2;
wire   [9:0] tmp_4_fu_363_p3;
wire   [19:0] grp_fu_919_p3;
(* use_dsp48 = "no" *) wire   [19:0] r_V_tr_fu_383_p2;
wire   [11:0] merge_i_fu_397_p258;
wire   [9:0] grp_fu_919_p0;
wire   [19:0] x_cast1_fu_329_p1;
wire   [9:0] grp_fu_919_p1;
wire   [17:0] grp_fu_919_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 pal_rot_V = 12'd0;
#0 ap_reg_ioackin_video_out_TREADY = 1'b0;
end

mandelbrot_frame_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .din2_WIDTH( 12 ),
    .din3_WIDTH( 12 ),
    .din4_WIDTH( 12 ),
    .din5_WIDTH( 12 ),
    .din6_WIDTH( 12 ),
    .din7_WIDTH( 12 ),
    .din8_WIDTH( 12 ),
    .din9_WIDTH( 12 ),
    .din10_WIDTH( 12 ),
    .din11_WIDTH( 12 ),
    .din12_WIDTH( 12 ),
    .din13_WIDTH( 12 ),
    .din14_WIDTH( 12 ),
    .din15_WIDTH( 12 ),
    .din16_WIDTH( 12 ),
    .din17_WIDTH( 12 ),
    .din18_WIDTH( 12 ),
    .din19_WIDTH( 12 ),
    .din20_WIDTH( 12 ),
    .din21_WIDTH( 12 ),
    .din22_WIDTH( 12 ),
    .din23_WIDTH( 12 ),
    .din24_WIDTH( 12 ),
    .din25_WIDTH( 12 ),
    .din26_WIDTH( 12 ),
    .din27_WIDTH( 12 ),
    .din28_WIDTH( 12 ),
    .din29_WIDTH( 12 ),
    .din30_WIDTH( 12 ),
    .din31_WIDTH( 12 ),
    .din32_WIDTH( 12 ),
    .din33_WIDTH( 12 ),
    .din34_WIDTH( 12 ),
    .din35_WIDTH( 12 ),
    .din36_WIDTH( 12 ),
    .din37_WIDTH( 12 ),
    .din38_WIDTH( 12 ),
    .din39_WIDTH( 12 ),
    .din40_WIDTH( 12 ),
    .din41_WIDTH( 12 ),
    .din42_WIDTH( 12 ),
    .din43_WIDTH( 12 ),
    .din44_WIDTH( 12 ),
    .din45_WIDTH( 12 ),
    .din46_WIDTH( 12 ),
    .din47_WIDTH( 12 ),
    .din48_WIDTH( 12 ),
    .din49_WIDTH( 12 ),
    .din50_WIDTH( 12 ),
    .din51_WIDTH( 12 ),
    .din52_WIDTH( 12 ),
    .din53_WIDTH( 12 ),
    .din54_WIDTH( 12 ),
    .din55_WIDTH( 12 ),
    .din56_WIDTH( 12 ),
    .din57_WIDTH( 12 ),
    .din58_WIDTH( 12 ),
    .din59_WIDTH( 12 ),
    .din60_WIDTH( 12 ),
    .din61_WIDTH( 12 ),
    .din62_WIDTH( 12 ),
    .din63_WIDTH( 12 ),
    .din64_WIDTH( 12 ),
    .din65_WIDTH( 12 ),
    .din66_WIDTH( 12 ),
    .din67_WIDTH( 12 ),
    .din68_WIDTH( 12 ),
    .din69_WIDTH( 12 ),
    .din70_WIDTH( 12 ),
    .din71_WIDTH( 12 ),
    .din72_WIDTH( 12 ),
    .din73_WIDTH( 12 ),
    .din74_WIDTH( 12 ),
    .din75_WIDTH( 12 ),
    .din76_WIDTH( 12 ),
    .din77_WIDTH( 12 ),
    .din78_WIDTH( 12 ),
    .din79_WIDTH( 12 ),
    .din80_WIDTH( 12 ),
    .din81_WIDTH( 12 ),
    .din82_WIDTH( 12 ),
    .din83_WIDTH( 12 ),
    .din84_WIDTH( 12 ),
    .din85_WIDTH( 12 ),
    .din86_WIDTH( 12 ),
    .din87_WIDTH( 12 ),
    .din88_WIDTH( 12 ),
    .din89_WIDTH( 12 ),
    .din90_WIDTH( 12 ),
    .din91_WIDTH( 12 ),
    .din92_WIDTH( 12 ),
    .din93_WIDTH( 12 ),
    .din94_WIDTH( 12 ),
    .din95_WIDTH( 12 ),
    .din96_WIDTH( 12 ),
    .din97_WIDTH( 12 ),
    .din98_WIDTH( 12 ),
    .din99_WIDTH( 12 ),
    .din100_WIDTH( 12 ),
    .din101_WIDTH( 12 ),
    .din102_WIDTH( 12 ),
    .din103_WIDTH( 12 ),
    .din104_WIDTH( 12 ),
    .din105_WIDTH( 12 ),
    .din106_WIDTH( 12 ),
    .din107_WIDTH( 12 ),
    .din108_WIDTH( 12 ),
    .din109_WIDTH( 12 ),
    .din110_WIDTH( 12 ),
    .din111_WIDTH( 12 ),
    .din112_WIDTH( 12 ),
    .din113_WIDTH( 12 ),
    .din114_WIDTH( 12 ),
    .din115_WIDTH( 12 ),
    .din116_WIDTH( 12 ),
    .din117_WIDTH( 12 ),
    .din118_WIDTH( 12 ),
    .din119_WIDTH( 12 ),
    .din120_WIDTH( 12 ),
    .din121_WIDTH( 12 ),
    .din122_WIDTH( 12 ),
    .din123_WIDTH( 12 ),
    .din124_WIDTH( 12 ),
    .din125_WIDTH( 12 ),
    .din126_WIDTH( 12 ),
    .din127_WIDTH( 12 ),
    .din128_WIDTH( 12 ),
    .din129_WIDTH( 12 ),
    .din130_WIDTH( 12 ),
    .din131_WIDTH( 12 ),
    .din132_WIDTH( 12 ),
    .din133_WIDTH( 12 ),
    .din134_WIDTH( 12 ),
    .din135_WIDTH( 12 ),
    .din136_WIDTH( 12 ),
    .din137_WIDTH( 12 ),
    .din138_WIDTH( 12 ),
    .din139_WIDTH( 12 ),
    .din140_WIDTH( 12 ),
    .din141_WIDTH( 12 ),
    .din142_WIDTH( 12 ),
    .din143_WIDTH( 12 ),
    .din144_WIDTH( 12 ),
    .din145_WIDTH( 12 ),
    .din146_WIDTH( 12 ),
    .din147_WIDTH( 12 ),
    .din148_WIDTH( 12 ),
    .din149_WIDTH( 12 ),
    .din150_WIDTH( 12 ),
    .din151_WIDTH( 12 ),
    .din152_WIDTH( 12 ),
    .din153_WIDTH( 12 ),
    .din154_WIDTH( 12 ),
    .din155_WIDTH( 12 ),
    .din156_WIDTH( 12 ),
    .din157_WIDTH( 12 ),
    .din158_WIDTH( 12 ),
    .din159_WIDTH( 12 ),
    .din160_WIDTH( 12 ),
    .din161_WIDTH( 12 ),
    .din162_WIDTH( 12 ),
    .din163_WIDTH( 12 ),
    .din164_WIDTH( 12 ),
    .din165_WIDTH( 12 ),
    .din166_WIDTH( 12 ),
    .din167_WIDTH( 12 ),
    .din168_WIDTH( 12 ),
    .din169_WIDTH( 12 ),
    .din170_WIDTH( 12 ),
    .din171_WIDTH( 12 ),
    .din172_WIDTH( 12 ),
    .din173_WIDTH( 12 ),
    .din174_WIDTH( 12 ),
    .din175_WIDTH( 12 ),
    .din176_WIDTH( 12 ),
    .din177_WIDTH( 12 ),
    .din178_WIDTH( 12 ),
    .din179_WIDTH( 12 ),
    .din180_WIDTH( 12 ),
    .din181_WIDTH( 12 ),
    .din182_WIDTH( 12 ),
    .din183_WIDTH( 12 ),
    .din184_WIDTH( 12 ),
    .din185_WIDTH( 12 ),
    .din186_WIDTH( 12 ),
    .din187_WIDTH( 12 ),
    .din188_WIDTH( 12 ),
    .din189_WIDTH( 12 ),
    .din190_WIDTH( 12 ),
    .din191_WIDTH( 12 ),
    .din192_WIDTH( 12 ),
    .din193_WIDTH( 12 ),
    .din194_WIDTH( 12 ),
    .din195_WIDTH( 12 ),
    .din196_WIDTH( 12 ),
    .din197_WIDTH( 12 ),
    .din198_WIDTH( 12 ),
    .din199_WIDTH( 12 ),
    .din200_WIDTH( 12 ),
    .din201_WIDTH( 12 ),
    .din202_WIDTH( 12 ),
    .din203_WIDTH( 12 ),
    .din204_WIDTH( 12 ),
    .din205_WIDTH( 12 ),
    .din206_WIDTH( 12 ),
    .din207_WIDTH( 12 ),
    .din208_WIDTH( 12 ),
    .din209_WIDTH( 12 ),
    .din210_WIDTH( 12 ),
    .din211_WIDTH( 12 ),
    .din212_WIDTH( 12 ),
    .din213_WIDTH( 12 ),
    .din214_WIDTH( 12 ),
    .din215_WIDTH( 12 ),
    .din216_WIDTH( 12 ),
    .din217_WIDTH( 12 ),
    .din218_WIDTH( 12 ),
    .din219_WIDTH( 12 ),
    .din220_WIDTH( 12 ),
    .din221_WIDTH( 12 ),
    .din222_WIDTH( 12 ),
    .din223_WIDTH( 12 ),
    .din224_WIDTH( 12 ),
    .din225_WIDTH( 12 ),
    .din226_WIDTH( 12 ),
    .din227_WIDTH( 12 ),
    .din228_WIDTH( 12 ),
    .din229_WIDTH( 12 ),
    .din230_WIDTH( 12 ),
    .din231_WIDTH( 12 ),
    .din232_WIDTH( 12 ),
    .din233_WIDTH( 12 ),
    .din234_WIDTH( 12 ),
    .din235_WIDTH( 12 ),
    .din236_WIDTH( 12 ),
    .din237_WIDTH( 12 ),
    .din238_WIDTH( 12 ),
    .din239_WIDTH( 12 ),
    .din240_WIDTH( 12 ),
    .din241_WIDTH( 12 ),
    .din242_WIDTH( 12 ),
    .din243_WIDTH( 12 ),
    .din244_WIDTH( 12 ),
    .din245_WIDTH( 12 ),
    .din246_WIDTH( 12 ),
    .din247_WIDTH( 12 ),
    .din248_WIDTH( 12 ),
    .din249_WIDTH( 12 ),
    .din250_WIDTH( 12 ),
    .din251_WIDTH( 12 ),
    .din252_WIDTH( 12 ),
    .din253_WIDTH( 12 ),
    .din254_WIDTH( 12 ),
    .din255_WIDTH( 12 ),
    .din256_WIDTH( 8 ),
    .dout_WIDTH( 12 ))
mandelbrot_frame_bkb_U1(
    .din0(12'd144),
    .din1(12'd144),
    .din2(12'd160),
    .din3(12'd160),
    .din4(12'd176),
    .din5(12'd176),
    .din6(12'd192),
    .din7(12'd192),
    .din8(12'd208),
    .din9(12'd208),
    .din10(12'd224),
    .din11(12'd224),
    .din12(12'd240),
    .din13(12'd240),
    .din14(12'd256),
    .din15(12'd256),
    .din16(12'd257),
    .din17(12'd257),
    .din18(12'd258),
    .din19(12'd258),
    .din20(12'd259),
    .din21(12'd259),
    .din22(12'd260),
    .din23(12'd260),
    .din24(12'd261),
    .din25(12'd261),
    .din26(12'd262),
    .din27(12'd262),
    .din28(12'd263),
    .din29(12'd263),
    .din30(12'd264),
    .din31(12'd264),
    .din32(12'd265),
    .din33(12'd265),
    .din34(12'd266),
    .din35(12'd266),
    .din36(12'd267),
    .din37(12'd267),
    .din38(12'd268),
    .din39(12'd268),
    .din40(12'd269),
    .din41(12'd269),
    .din42(12'd270),
    .din43(12'd270),
    .din44(12'd271),
    .din45(12'd271),
    .din46(12'd272),
    .din47(12'd272),
    .din48(12'd528),
    .din49(12'd512),
    .din50(12'd768),
    .din51(12'd752),
    .din52(12'd1008),
    .din53(12'd992),
    .din54(12'd1248),
    .din55(12'd1232),
    .din56(12'd1488),
    .din57(12'd1472),
    .din58(12'd1728),
    .din59(12'd1712),
    .din60(12'd1968),
    .din61(12'd1952),
    .din62(12'd2208),
    .din63(12'd2192),
    .din64(12'd2448),
    .din65(12'd2432),
    .din66(12'd2688),
    .din67(12'd2672),
    .din68(12'd2928),
    .din69(12'd2912),
    .din70(12'd3168),
    .din71(12'd3152),
    .din72(12'd3408),
    .din73(12'd3392),
    .din74(12'd3648),
    .din75(12'd3632),
    .din76(12'd3888),
    .din77(12'd3872),
    .din78(12'd32),
    .din79(12'd16),
    .din80(12'd16),
    .din81(12'd15),
    .din82(12'd15),
    .din83(12'd14),
    .din84(12'd14),
    .din85(12'd13),
    .din86(12'd13),
    .din87(12'd12),
    .din88(12'd12),
    .din89(12'd11),
    .din90(12'd11),
    .din91(12'd10),
    .din92(12'd10),
    .din93(12'd9),
    .din94(12'd9),
    .din95(12'd8),
    .din96(12'd8),
    .din97(12'd7),
    .din98(12'd7),
    .din99(12'd6),
    .din100(12'd6),
    .din101(12'd5),
    .din102(12'd5),
    .din103(12'd4),
    .din104(12'd4),
    .din105(12'd3),
    .din106(12'd3),
    .din107(12'd2),
    .din108(12'd2),
    .din109(12'd1),
    .din110(12'd1),
    .din111(12'd0),
    .din112(12'd0),
    .din113(12'd3840),
    .din114(12'd3840),
    .din115(12'd3584),
    .din116(12'd3584),
    .din117(12'd3328),
    .din118(12'd3328),
    .din119(12'd3072),
    .din120(12'd3072),
    .din121(12'd2816),
    .din122(12'd2816),
    .din123(12'd2560),
    .din124(12'd2560),
    .din125(12'd2304),
    .din126(12'd2304),
    .din127(12'd2048),
    .din128(12'd2048),
    .din129(12'd2304),
    .din130(12'd2304),
    .din131(12'd2560),
    .din132(12'd2560),
    .din133(12'd2816),
    .din134(12'd2816),
    .din135(12'd3072),
    .din136(12'd3072),
    .din137(12'd3328),
    .din138(12'd3328),
    .din139(12'd3584),
    .din140(12'd3584),
    .din141(12'd3840),
    .din142(12'd3840),
    .din143(12'd0),
    .din144(12'd0),
    .din145(12'd1),
    .din146(12'd1),
    .din147(12'd2),
    .din148(12'd2),
    .din149(12'd3),
    .din150(12'd3),
    .din151(12'd4),
    .din152(12'd4),
    .din153(12'd5),
    .din154(12'd5),
    .din155(12'd6),
    .din156(12'd6),
    .din157(12'd7),
    .din158(12'd7),
    .din159(12'd8),
    .din160(12'd8),
    .din161(12'd9),
    .din162(12'd9),
    .din163(12'd10),
    .din164(12'd10),
    .din165(12'd11),
    .din166(12'd11),
    .din167(12'd12),
    .din168(12'd12),
    .din169(12'd13),
    .din170(12'd13),
    .din171(12'd14),
    .din172(12'd14),
    .din173(12'd15),
    .din174(12'd15),
    .din175(12'd16),
    .din176(12'd16),
    .din177(12'd32),
    .din178(12'd3872),
    .din179(12'd3888),
    .din180(12'd3632),
    .din181(12'd3648),
    .din182(12'd3392),
    .din183(12'd3408),
    .din184(12'd3152),
    .din185(12'd3168),
    .din186(12'd2912),
    .din187(12'd2928),
    .din188(12'd2672),
    .din189(12'd2688),
    .din190(12'd2432),
    .din191(12'd2448),
    .din192(12'd2192),
    .din193(12'd2208),
    .din194(12'd1952),
    .din195(12'd1968),
    .din196(12'd1712),
    .din197(12'd1728),
    .din198(12'd1472),
    .din199(12'd1488),
    .din200(12'd1232),
    .din201(12'd1248),
    .din202(12'd992),
    .din203(12'd1008),
    .din204(12'd752),
    .din205(12'd768),
    .din206(12'd512),
    .din207(12'd528),
    .din208(12'd272),
    .din209(12'd272),
    .din210(12'd271),
    .din211(12'd271),
    .din212(12'd270),
    .din213(12'd270),
    .din214(12'd269),
    .din215(12'd269),
    .din216(12'd268),
    .din217(12'd268),
    .din218(12'd267),
    .din219(12'd267),
    .din220(12'd266),
    .din221(12'd266),
    .din222(12'd265),
    .din223(12'd265),
    .din224(12'd264),
    .din225(12'd264),
    .din226(12'd263),
    .din227(12'd263),
    .din228(12'd262),
    .din229(12'd262),
    .din230(12'd261),
    .din231(12'd261),
    .din232(12'd260),
    .din233(12'd260),
    .din234(12'd259),
    .din235(12'd259),
    .din236(12'd258),
    .din237(12'd258),
    .din238(12'd257),
    .din239(12'd257),
    .din240(12'd256),
    .din241(12'd256),
    .din242(12'd240),
    .din243(12'd240),
    .din244(12'd224),
    .din245(12'd224),
    .din246(12'd208),
    .din247(12'd208),
    .din248(12'd192),
    .din249(12'd192),
    .din250(12'd176),
    .din251(12'd176),
    .din252(12'd160),
    .din253(12'd160),
    .din254(12'd0),
    .din255(12'd0),
    .din256(tmp_9_reg_968),
    .dout(merge_i_fu_397_p258)
);

mandelbrot_frame_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 20 ))
mandelbrot_frame_cud_U2(
    .din0(grp_fu_919_p0),
    .din1(grp_fu_919_p1),
    .din2(grp_fu_919_p2),
    .dout(grp_fu_919_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_video_out_TREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state4)) begin
            if ((ap_sig_ioackin_video_out_TREADY == 1'b1)) begin
                ap_reg_ioackin_video_out_TREADY <= 1'b0;
            end else if ((video_out_TREADY == 1'b1)) begin
                ap_reg_ioackin_video_out_TREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_296_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        x_reg_273 <= 10'd0;
    end else if (((ap_sig_ioackin_video_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        x_reg_273 <= x_1_reg_953;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        y_reg_261 <= y_1_reg_940;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_reg_261 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        pal_rot_V <= tmp_2_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        pal_rot_V_load_reg_927 <= pal_rot_V;
        tmp_cast_reg_932[11 : 0] <= tmp_cast_fu_288_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_296_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_cast_reg_945[17 : 0] <= tmp_1_cast_fu_314_p1[17 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_333_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_9_reg_968 <= {{r_V_tr_fu_383_p2[10:3]}};
        tmp_last_V_reg_963 <= tmp_last_V_fu_377_p2;
        tmp_user_V_reg_958 <= tmp_user_V_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        x_1_reg_953 <= x_1_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        y_1_reg_940 <= y_1_fu_302_p2;
    end
end

always @ (*) begin
    if (((exitcond1_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_video_out_TREADY == 1'b0)) begin
        ap_sig_ioackin_video_out_TREADY = video_out_TREADY;
    end else begin
        ap_sig_ioackin_video_out_TREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        video_out_TDATA_blk_n = video_out_TREADY;
    end else begin
        video_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_video_out_TREADY == 1'b0) & (1'b1 == ap_CS_fsm_state4))) begin
        video_out_TVALID = 1'b1;
    end else begin
        video_out_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_296_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond_fu_333_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((ap_sig_ioackin_video_out_TREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_296_p2 = ((y_reg_261 == 9'd480) ? 1'b1 : 1'b0);

assign exitcond_fu_333_p2 = ((x_reg_273 == 10'd640) ? 1'b1 : 1'b0);

assign grp_fu_919_p0 = x_cast1_fu_329_p1;

assign grp_fu_919_p1 = x_cast1_fu_329_p1;

assign grp_fu_919_p2 = tmp_1_cast_reg_945;

assign r_V_tr_fu_383_p2 = (grp_fu_919_p3 + tmp_cast_reg_932);

assign tmp_1_cast_fu_314_p1 = tmp_1_fu_308_p2;

assign tmp_1_fu_308_p0 = y_cast2_fu_292_p1;

assign tmp_1_fu_308_p1 = y_cast2_fu_292_p1;

assign tmp_1_fu_308_p2 = (tmp_1_fu_308_p0 * tmp_1_fu_308_p1);

assign tmp_2_fu_318_p2 = ($signed(pal_rot_V_load_reg_927) + $signed(12'd4095));

assign tmp_3_fu_349_p2 = (y_reg_261 | tmp_fu_345_p1);

assign tmp_4_fu_363_p3 = {{tmp_5_fu_355_p3}, {tmp_3_fu_349_p2}};

assign tmp_5_fu_355_p3 = x_reg_273[32'd9];

assign tmp_cast_fu_288_p1 = pal_rot_V;

assign tmp_fu_345_p1 = x_reg_273[8:0];

assign tmp_last_V_fu_377_p2 = ((x_reg_273 == 10'd639) ? 1'b1 : 1'b0);

assign tmp_user_V_fu_371_p2 = ((tmp_4_fu_363_p3 == 10'd0) ? 1'b1 : 1'b0);

assign video_out_TDATA = merge_i_fu_397_p258;

assign video_out_TDEST = 1'd0;

assign video_out_TID = 1'd0;

assign video_out_TKEEP = 3'd0;

assign video_out_TLAST = tmp_last_V_reg_963;

assign video_out_TSTRB = 3'd0;

assign video_out_TUSER = tmp_user_V_reg_958;

assign x_1_fu_339_p2 = (x_reg_273 + 10'd1);

assign x_cast1_fu_329_p1 = x_reg_273;

assign y_1_fu_302_p2 = (y_reg_261 + 9'd1);

assign y_cast2_fu_292_p1 = y_reg_261;

always @ (posedge ap_clk) begin
    tmp_cast_reg_932[19:12] <= 8'b00000000;
    tmp_1_cast_reg_945[19:18] <= 2'b00;
end

endmodule //mandelbrot_frame
