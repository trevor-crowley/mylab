-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    A_TVALID : IN STD_LOGIC;
    A_TREADY : OUT STD_LOGIC;
    A_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    A_TUSER : IN STD_LOGIC_VECTOR (1 downto 0);
    A_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    A_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    A_TDEST : IN STD_LOGIC_VECTOR (5 downto 0);
    B_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_TVALID : OUT STD_LOGIC;
    B_TREADY : IN STD_LOGIC;
    B_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_TUSER : OUT STD_LOGIC_VECTOR (1 downto 0);
    B_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    B_TID : OUT STD_LOGIC_VECTOR (4 downto 0);
    B_TDEST : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of example is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "example,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.245000,HLS_SYN_LAT=151,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=288,HLS_SYN_LUT=799}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal A_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal A_data_V_0_vld_in : STD_LOGIC;
    signal A_data_V_0_vld_out : STD_LOGIC;
    signal A_data_V_0_ack_in : STD_LOGIC;
    signal A_data_V_0_ack_out : STD_LOGIC;
    signal A_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal A_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal A_data_V_0_sel_rd : STD_LOGIC := '0';
    signal A_data_V_0_sel_wr : STD_LOGIC := '0';
    signal A_data_V_0_sel : STD_LOGIC;
    signal A_data_V_0_load_A : STD_LOGIC;
    signal A_data_V_0_load_B : STD_LOGIC;
    signal A_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_data_V_0_state_cmp_full : STD_LOGIC;
    signal A_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal A_keep_V_0_vld_in : STD_LOGIC;
    signal A_keep_V_0_vld_out : STD_LOGIC;
    signal A_keep_V_0_ack_in : STD_LOGIC;
    signal A_keep_V_0_ack_out : STD_LOGIC;
    signal A_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal A_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal A_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal A_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal A_keep_V_0_sel : STD_LOGIC;
    signal A_keep_V_0_load_A : STD_LOGIC;
    signal A_keep_V_0_load_B : STD_LOGIC;
    signal A_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_keep_V_0_state_cmp_full : STD_LOGIC;
    signal A_strb_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal A_strb_V_0_vld_in : STD_LOGIC;
    signal A_strb_V_0_vld_out : STD_LOGIC;
    signal A_strb_V_0_ack_in : STD_LOGIC;
    signal A_strb_V_0_ack_out : STD_LOGIC;
    signal A_strb_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal A_strb_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal A_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal A_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal A_strb_V_0_sel : STD_LOGIC;
    signal A_strb_V_0_load_A : STD_LOGIC;
    signal A_strb_V_0_load_B : STD_LOGIC;
    signal A_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_strb_V_0_state_cmp_full : STD_LOGIC;
    signal A_user_V_0_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal A_user_V_0_vld_in : STD_LOGIC;
    signal A_user_V_0_vld_out : STD_LOGIC;
    signal A_user_V_0_ack_in : STD_LOGIC;
    signal A_user_V_0_ack_out : STD_LOGIC;
    signal A_user_V_0_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal A_user_V_0_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal A_user_V_0_sel_rd : STD_LOGIC := '0';
    signal A_user_V_0_sel_wr : STD_LOGIC := '0';
    signal A_user_V_0_sel : STD_LOGIC;
    signal A_user_V_0_load_A : STD_LOGIC;
    signal A_user_V_0_load_B : STD_LOGIC;
    signal A_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_user_V_0_state_cmp_full : STD_LOGIC;
    signal A_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal A_last_V_0_vld_in : STD_LOGIC;
    signal A_last_V_0_vld_out : STD_LOGIC;
    signal A_last_V_0_ack_in : STD_LOGIC;
    signal A_last_V_0_ack_out : STD_LOGIC;
    signal A_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal A_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal A_last_V_0_sel_rd : STD_LOGIC := '0';
    signal A_last_V_0_sel_wr : STD_LOGIC := '0';
    signal A_last_V_0_sel : STD_LOGIC;
    signal A_last_V_0_load_A : STD_LOGIC;
    signal A_last_V_0_load_B : STD_LOGIC;
    signal A_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_last_V_0_state_cmp_full : STD_LOGIC;
    signal A_id_V_0_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal A_id_V_0_vld_in : STD_LOGIC;
    signal A_id_V_0_vld_out : STD_LOGIC;
    signal A_id_V_0_ack_in : STD_LOGIC;
    signal A_id_V_0_ack_out : STD_LOGIC;
    signal A_id_V_0_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal A_id_V_0_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal A_id_V_0_sel_rd : STD_LOGIC := '0';
    signal A_id_V_0_sel_wr : STD_LOGIC := '0';
    signal A_id_V_0_sel : STD_LOGIC;
    signal A_id_V_0_load_A : STD_LOGIC;
    signal A_id_V_0_load_B : STD_LOGIC;
    signal A_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_id_V_0_state_cmp_full : STD_LOGIC;
    signal A_dest_V_0_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal A_dest_V_0_vld_in : STD_LOGIC;
    signal A_dest_V_0_vld_out : STD_LOGIC;
    signal A_dest_V_0_ack_in : STD_LOGIC;
    signal A_dest_V_0_ack_out : STD_LOGIC;
    signal A_dest_V_0_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal A_dest_V_0_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal A_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal A_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal A_dest_V_0_sel : STD_LOGIC;
    signal A_dest_V_0_load_A : STD_LOGIC;
    signal A_dest_V_0_load_B : STD_LOGIC;
    signal A_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal A_dest_V_0_state_cmp_full : STD_LOGIC;
    signal B_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal B_data_V_1_vld_in : STD_LOGIC;
    signal B_data_V_1_vld_out : STD_LOGIC;
    signal B_data_V_1_ack_in : STD_LOGIC;
    signal B_data_V_1_ack_out : STD_LOGIC;
    signal B_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal B_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal B_data_V_1_sel_rd : STD_LOGIC := '0';
    signal B_data_V_1_sel_wr : STD_LOGIC := '0';
    signal B_data_V_1_sel : STD_LOGIC;
    signal B_data_V_1_load_A : STD_LOGIC;
    signal B_data_V_1_load_B : STD_LOGIC;
    signal B_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_data_V_1_state_cmp_full : STD_LOGIC;
    signal B_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal B_keep_V_1_vld_in : STD_LOGIC;
    signal B_keep_V_1_vld_out : STD_LOGIC;
    signal B_keep_V_1_ack_in : STD_LOGIC;
    signal B_keep_V_1_ack_out : STD_LOGIC;
    signal B_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal B_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal B_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal B_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal B_keep_V_1_sel : STD_LOGIC;
    signal B_keep_V_1_load_A : STD_LOGIC;
    signal B_keep_V_1_load_B : STD_LOGIC;
    signal B_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_keep_V_1_state_cmp_full : STD_LOGIC;
    signal B_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal B_strb_V_1_vld_in : STD_LOGIC;
    signal B_strb_V_1_vld_out : STD_LOGIC;
    signal B_strb_V_1_ack_in : STD_LOGIC;
    signal B_strb_V_1_ack_out : STD_LOGIC;
    signal B_strb_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal B_strb_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal B_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal B_strb_V_1_sel_wr : STD_LOGIC := '0';
    signal B_strb_V_1_sel : STD_LOGIC;
    signal B_strb_V_1_load_A : STD_LOGIC;
    signal B_strb_V_1_load_B : STD_LOGIC;
    signal B_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_strb_V_1_state_cmp_full : STD_LOGIC;
    signal B_user_V_1_data_out : STD_LOGIC_VECTOR (1 downto 0);
    signal B_user_V_1_vld_in : STD_LOGIC;
    signal B_user_V_1_vld_out : STD_LOGIC;
    signal B_user_V_1_ack_in : STD_LOGIC;
    signal B_user_V_1_ack_out : STD_LOGIC;
    signal B_user_V_1_payload_A : STD_LOGIC_VECTOR (1 downto 0);
    signal B_user_V_1_payload_B : STD_LOGIC_VECTOR (1 downto 0);
    signal B_user_V_1_sel_rd : STD_LOGIC := '0';
    signal B_user_V_1_sel_wr : STD_LOGIC := '0';
    signal B_user_V_1_sel : STD_LOGIC;
    signal B_user_V_1_load_A : STD_LOGIC;
    signal B_user_V_1_load_B : STD_LOGIC;
    signal B_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_user_V_1_state_cmp_full : STD_LOGIC;
    signal B_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal B_last_V_1_vld_in : STD_LOGIC;
    signal B_last_V_1_vld_out : STD_LOGIC;
    signal B_last_V_1_ack_in : STD_LOGIC;
    signal B_last_V_1_ack_out : STD_LOGIC;
    signal B_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal B_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal B_last_V_1_sel_rd : STD_LOGIC := '0';
    signal B_last_V_1_sel_wr : STD_LOGIC := '0';
    signal B_last_V_1_sel : STD_LOGIC;
    signal B_last_V_1_load_A : STD_LOGIC;
    signal B_last_V_1_load_B : STD_LOGIC;
    signal B_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_last_V_1_state_cmp_full : STD_LOGIC;
    signal B_id_V_1_data_out : STD_LOGIC_VECTOR (4 downto 0);
    signal B_id_V_1_vld_in : STD_LOGIC;
    signal B_id_V_1_vld_out : STD_LOGIC;
    signal B_id_V_1_ack_in : STD_LOGIC;
    signal B_id_V_1_ack_out : STD_LOGIC;
    signal B_id_V_1_payload_A : STD_LOGIC_VECTOR (4 downto 0);
    signal B_id_V_1_payload_B : STD_LOGIC_VECTOR (4 downto 0);
    signal B_id_V_1_sel_rd : STD_LOGIC := '0';
    signal B_id_V_1_sel_wr : STD_LOGIC := '0';
    signal B_id_V_1_sel : STD_LOGIC;
    signal B_id_V_1_load_A : STD_LOGIC;
    signal B_id_V_1_load_B : STD_LOGIC;
    signal B_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_id_V_1_state_cmp_full : STD_LOGIC;
    signal B_dest_V_1_data_out : STD_LOGIC_VECTOR (5 downto 0);
    signal B_dest_V_1_vld_in : STD_LOGIC;
    signal B_dest_V_1_vld_out : STD_LOGIC;
    signal B_dest_V_1_ack_in : STD_LOGIC;
    signal B_dest_V_1_ack_out : STD_LOGIC;
    signal B_dest_V_1_payload_A : STD_LOGIC_VECTOR (5 downto 0);
    signal B_dest_V_1_payload_B : STD_LOGIC_VECTOR (5 downto 0);
    signal B_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal B_dest_V_1_sel_wr : STD_LOGIC := '0';
    signal B_dest_V_1_sel : STD_LOGIC;
    signal B_dest_V_1_load_A : STD_LOGIC;
    signal B_dest_V_1_load_B : STD_LOGIC;
    signal B_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal B_dest_V_1_state_cmp_full : STD_LOGIC;
    signal A_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal B_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_fu_122_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_172 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal val_assign_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_105 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    A_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_data_V_0_ack_out) and (ap_const_logic_1 = A_data_V_0_vld_out))) then 
                                        A_data_V_0_sel_rd <= not(A_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_data_V_0_ack_in) and (ap_const_logic_1 = A_data_V_0_vld_in))) then 
                                        A_data_V_0_sel_wr <= not(A_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = A_data_V_0_state) and (ap_const_logic_0 = A_data_V_0_vld_in)) or ((ap_const_lv2_3 = A_data_V_0_state) and (ap_const_logic_0 = A_data_V_0_vld_in) and (ap_const_logic_1 = A_data_V_0_ack_out)))) then 
                    A_data_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = A_data_V_0_state) and (ap_const_logic_0 = A_data_V_0_ack_out)) or ((ap_const_lv2_3 = A_data_V_0_state) and (ap_const_logic_0 = A_data_V_0_ack_out) and (ap_const_logic_1 = A_data_V_0_vld_in)))) then 
                    A_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = A_data_V_0_vld_in) and (ap_const_logic_1 = A_data_V_0_ack_out))) and not(((ap_const_logic_0 = A_data_V_0_ack_out) and (ap_const_logic_1 = A_data_V_0_vld_in))) and (ap_const_lv2_3 = A_data_V_0_state)) or ((ap_const_lv2_1 = A_data_V_0_state) and (ap_const_logic_1 = A_data_V_0_ack_out)) or ((ap_const_lv2_2 = A_data_V_0_state) and (ap_const_logic_1 = A_data_V_0_vld_in)))) then 
                    A_data_V_0_state <= ap_const_lv2_3;
                else 
                    A_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_dest_V_0_ack_out) and (ap_const_logic_1 = A_dest_V_0_vld_out))) then 
                                        A_dest_V_0_sel_rd <= not(A_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_dest_V_0_ack_in) and (ap_const_logic_1 = A_dest_V_0_vld_in))) then 
                                        A_dest_V_0_sel_wr <= not(A_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = A_dest_V_0_state) and (ap_const_logic_0 = A_dest_V_0_vld_in)) or ((ap_const_lv2_3 = A_dest_V_0_state) and (ap_const_logic_0 = A_dest_V_0_vld_in) and (ap_const_logic_1 = A_dest_V_0_ack_out)))) then 
                    A_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = A_dest_V_0_state) and (ap_const_logic_0 = A_dest_V_0_ack_out)) or ((ap_const_lv2_3 = A_dest_V_0_state) and (ap_const_logic_0 = A_dest_V_0_ack_out) and (ap_const_logic_1 = A_dest_V_0_vld_in)))) then 
                    A_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = A_dest_V_0_vld_in) and (ap_const_logic_1 = A_dest_V_0_ack_out))) and not(((ap_const_logic_0 = A_dest_V_0_ack_out) and (ap_const_logic_1 = A_dest_V_0_vld_in))) and (ap_const_lv2_3 = A_dest_V_0_state)) or ((ap_const_lv2_1 = A_dest_V_0_state) and (ap_const_logic_1 = A_dest_V_0_ack_out)) or ((ap_const_lv2_2 = A_dest_V_0_state) and (ap_const_logic_1 = A_dest_V_0_vld_in)))) then 
                    A_dest_V_0_state <= ap_const_lv2_3;
                else 
                    A_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_id_V_0_ack_out) and (ap_const_logic_1 = A_id_V_0_vld_out))) then 
                                        A_id_V_0_sel_rd <= not(A_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_id_V_0_ack_in) and (ap_const_logic_1 = A_id_V_0_vld_in))) then 
                                        A_id_V_0_sel_wr <= not(A_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = A_id_V_0_state) and (ap_const_logic_0 = A_id_V_0_vld_in)) or ((ap_const_lv2_3 = A_id_V_0_state) and (ap_const_logic_0 = A_id_V_0_vld_in) and (ap_const_logic_1 = A_id_V_0_ack_out)))) then 
                    A_id_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = A_id_V_0_state) and (ap_const_logic_0 = A_id_V_0_ack_out)) or ((ap_const_lv2_3 = A_id_V_0_state) and (ap_const_logic_0 = A_id_V_0_ack_out) and (ap_const_logic_1 = A_id_V_0_vld_in)))) then 
                    A_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = A_id_V_0_vld_in) and (ap_const_logic_1 = A_id_V_0_ack_out))) and not(((ap_const_logic_0 = A_id_V_0_ack_out) and (ap_const_logic_1 = A_id_V_0_vld_in))) and (ap_const_lv2_3 = A_id_V_0_state)) or ((ap_const_lv2_1 = A_id_V_0_state) and (ap_const_logic_1 = A_id_V_0_ack_out)) or ((ap_const_lv2_2 = A_id_V_0_state) and (ap_const_logic_1 = A_id_V_0_vld_in)))) then 
                    A_id_V_0_state <= ap_const_lv2_3;
                else 
                    A_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_keep_V_0_vld_out) and (ap_const_logic_1 = A_keep_V_0_ack_out))) then 
                                        A_keep_V_0_sel_rd <= not(A_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_keep_V_0_ack_in) and (ap_const_logic_1 = A_keep_V_0_vld_in))) then 
                                        A_keep_V_0_sel_wr <= not(A_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = A_keep_V_0_state) and (ap_const_logic_0 = A_keep_V_0_vld_in)) or ((ap_const_lv2_3 = A_keep_V_0_state) and (ap_const_logic_0 = A_keep_V_0_vld_in) and (ap_const_logic_1 = A_keep_V_0_ack_out)))) then 
                    A_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = A_keep_V_0_state) and (ap_const_logic_0 = A_keep_V_0_ack_out)) or ((ap_const_lv2_3 = A_keep_V_0_state) and (ap_const_logic_0 = A_keep_V_0_ack_out) and (ap_const_logic_1 = A_keep_V_0_vld_in)))) then 
                    A_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = A_keep_V_0_vld_in) and (ap_const_logic_1 = A_keep_V_0_ack_out))) and not(((ap_const_logic_0 = A_keep_V_0_ack_out) and (ap_const_logic_1 = A_keep_V_0_vld_in))) and (ap_const_lv2_3 = A_keep_V_0_state)) or ((ap_const_lv2_1 = A_keep_V_0_state) and (ap_const_logic_1 = A_keep_V_0_ack_out)) or ((ap_const_lv2_2 = A_keep_V_0_state) and (ap_const_logic_1 = A_keep_V_0_vld_in)))) then 
                    A_keep_V_0_state <= ap_const_lv2_3;
                else 
                    A_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_last_V_0_ack_out) and (ap_const_logic_1 = A_last_V_0_vld_out))) then 
                                        A_last_V_0_sel_rd <= not(A_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_last_V_0_ack_in) and (ap_const_logic_1 = A_last_V_0_vld_in))) then 
                                        A_last_V_0_sel_wr <= not(A_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = A_last_V_0_state) and (ap_const_logic_0 = A_last_V_0_vld_in)) or ((ap_const_lv2_3 = A_last_V_0_state) and (ap_const_logic_0 = A_last_V_0_vld_in) and (ap_const_logic_1 = A_last_V_0_ack_out)))) then 
                    A_last_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = A_last_V_0_state) and (ap_const_logic_0 = A_last_V_0_ack_out)) or ((ap_const_lv2_3 = A_last_V_0_state) and (ap_const_logic_0 = A_last_V_0_ack_out) and (ap_const_logic_1 = A_last_V_0_vld_in)))) then 
                    A_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = A_last_V_0_vld_in) and (ap_const_logic_1 = A_last_V_0_ack_out))) and not(((ap_const_logic_0 = A_last_V_0_ack_out) and (ap_const_logic_1 = A_last_V_0_vld_in))) and (ap_const_lv2_3 = A_last_V_0_state)) or ((ap_const_lv2_1 = A_last_V_0_state) and (ap_const_logic_1 = A_last_V_0_ack_out)) or ((ap_const_lv2_2 = A_last_V_0_state) and (ap_const_logic_1 = A_last_V_0_vld_in)))) then 
                    A_last_V_0_state <= ap_const_lv2_3;
                else 
                    A_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_strb_V_0_ack_out) and (ap_const_logic_1 = A_strb_V_0_vld_out))) then 
                                        A_strb_V_0_sel_rd <= not(A_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_strb_V_0_ack_in) and (ap_const_logic_1 = A_strb_V_0_vld_in))) then 
                                        A_strb_V_0_sel_wr <= not(A_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = A_strb_V_0_state) and (ap_const_logic_0 = A_strb_V_0_vld_in)) or ((ap_const_lv2_3 = A_strb_V_0_state) and (ap_const_logic_0 = A_strb_V_0_vld_in) and (ap_const_logic_1 = A_strb_V_0_ack_out)))) then 
                    A_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = A_strb_V_0_state) and (ap_const_logic_0 = A_strb_V_0_ack_out)) or ((ap_const_lv2_3 = A_strb_V_0_state) and (ap_const_logic_0 = A_strb_V_0_ack_out) and (ap_const_logic_1 = A_strb_V_0_vld_in)))) then 
                    A_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = A_strb_V_0_vld_in) and (ap_const_logic_1 = A_strb_V_0_ack_out))) and not(((ap_const_logic_0 = A_strb_V_0_ack_out) and (ap_const_logic_1 = A_strb_V_0_vld_in))) and (ap_const_lv2_3 = A_strb_V_0_state)) or ((ap_const_lv2_1 = A_strb_V_0_state) and (ap_const_logic_1 = A_strb_V_0_ack_out)) or ((ap_const_lv2_2 = A_strb_V_0_state) and (ap_const_logic_1 = A_strb_V_0_vld_in)))) then 
                    A_strb_V_0_state <= ap_const_lv2_3;
                else 
                    A_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    A_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_user_V_0_ack_out) and (ap_const_logic_1 = A_user_V_0_vld_out))) then 
                                        A_user_V_0_sel_rd <= not(A_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    A_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = A_user_V_0_ack_in) and (ap_const_logic_1 = A_user_V_0_vld_in))) then 
                                        A_user_V_0_sel_wr <= not(A_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    A_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                A_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = A_user_V_0_state) and (ap_const_logic_0 = A_user_V_0_vld_in)) or ((ap_const_lv2_3 = A_user_V_0_state) and (ap_const_logic_0 = A_user_V_0_vld_in) and (ap_const_logic_1 = A_user_V_0_ack_out)))) then 
                    A_user_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = A_user_V_0_state) and (ap_const_logic_0 = A_user_V_0_ack_out)) or ((ap_const_lv2_3 = A_user_V_0_state) and (ap_const_logic_0 = A_user_V_0_ack_out) and (ap_const_logic_1 = A_user_V_0_vld_in)))) then 
                    A_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = A_user_V_0_vld_in) and (ap_const_logic_1 = A_user_V_0_ack_out))) and not(((ap_const_logic_0 = A_user_V_0_ack_out) and (ap_const_logic_1 = A_user_V_0_vld_in))) and (ap_const_lv2_3 = A_user_V_0_state)) or ((ap_const_lv2_1 = A_user_V_0_state) and (ap_const_logic_1 = A_user_V_0_ack_out)) or ((ap_const_lv2_2 = A_user_V_0_state) and (ap_const_logic_1 = A_user_V_0_vld_in)))) then 
                    A_user_V_0_state <= ap_const_lv2_3;
                else 
                    A_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_data_V_1_ack_out) and (ap_const_logic_1 = B_data_V_1_vld_out))) then 
                                        B_data_V_1_sel_rd <= not(B_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_data_V_1_ack_in) and (ap_const_logic_1 = B_data_V_1_vld_in))) then 
                                        B_data_V_1_sel_wr <= not(B_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = B_data_V_1_state) and (ap_const_logic_0 = B_data_V_1_vld_in)) or ((ap_const_lv2_3 = B_data_V_1_state) and (ap_const_logic_0 = B_data_V_1_vld_in) and (ap_const_logic_1 = B_data_V_1_ack_out)))) then 
                    B_data_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = B_data_V_1_state) and (ap_const_logic_0 = B_data_V_1_ack_out)) or ((ap_const_lv2_3 = B_data_V_1_state) and (ap_const_logic_0 = B_data_V_1_ack_out) and (ap_const_logic_1 = B_data_V_1_vld_in)))) then 
                    B_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = B_data_V_1_vld_in) and (ap_const_logic_1 = B_data_V_1_ack_out))) and not(((ap_const_logic_0 = B_data_V_1_ack_out) and (ap_const_logic_1 = B_data_V_1_vld_in))) and (ap_const_lv2_3 = B_data_V_1_state)) or ((ap_const_lv2_1 = B_data_V_1_state) and (ap_const_logic_1 = B_data_V_1_ack_out)) or ((ap_const_lv2_2 = B_data_V_1_state) and (ap_const_logic_1 = B_data_V_1_vld_in)))) then 
                    B_data_V_1_state <= ap_const_lv2_3;
                else 
                    B_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_dest_V_1_ack_out) and (ap_const_logic_1 = B_dest_V_1_vld_out))) then 
                                        B_dest_V_1_sel_rd <= not(B_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_dest_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_dest_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_dest_V_1_ack_in) and (ap_const_logic_1 = B_dest_V_1_vld_in))) then 
                                        B_dest_V_1_sel_wr <= not(B_dest_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = B_dest_V_1_state) and (ap_const_logic_0 = B_dest_V_1_vld_in)) or ((ap_const_lv2_3 = B_dest_V_1_state) and (ap_const_logic_0 = B_dest_V_1_vld_in) and (ap_const_logic_1 = B_dest_V_1_ack_out)))) then 
                    B_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = B_dest_V_1_state) and (ap_const_logic_0 = B_dest_V_1_ack_out)) or ((ap_const_lv2_3 = B_dest_V_1_state) and (ap_const_logic_0 = B_dest_V_1_ack_out) and (ap_const_logic_1 = B_dest_V_1_vld_in)))) then 
                    B_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = B_dest_V_1_vld_in) and (ap_const_logic_1 = B_dest_V_1_ack_out))) and not(((ap_const_logic_0 = B_dest_V_1_ack_out) and (ap_const_logic_1 = B_dest_V_1_vld_in))) and (ap_const_lv2_3 = B_dest_V_1_state)) or ((ap_const_lv2_1 = B_dest_V_1_state) and (ap_const_logic_1 = B_dest_V_1_ack_out)) or ((ap_const_lv2_2 = B_dest_V_1_state) and (ap_const_logic_1 = B_dest_V_1_vld_in)))) then 
                    B_dest_V_1_state <= ap_const_lv2_3;
                else 
                    B_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_id_V_1_ack_out) and (ap_const_logic_1 = B_id_V_1_vld_out))) then 
                                        B_id_V_1_sel_rd <= not(B_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_id_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_id_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_id_V_1_ack_in) and (ap_const_logic_1 = B_id_V_1_vld_in))) then 
                                        B_id_V_1_sel_wr <= not(B_id_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = B_id_V_1_state) and (ap_const_logic_0 = B_id_V_1_vld_in)) or ((ap_const_lv2_3 = B_id_V_1_state) and (ap_const_logic_0 = B_id_V_1_vld_in) and (ap_const_logic_1 = B_id_V_1_ack_out)))) then 
                    B_id_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = B_id_V_1_state) and (ap_const_logic_0 = B_id_V_1_ack_out)) or ((ap_const_lv2_3 = B_id_V_1_state) and (ap_const_logic_0 = B_id_V_1_ack_out) and (ap_const_logic_1 = B_id_V_1_vld_in)))) then 
                    B_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = B_id_V_1_vld_in) and (ap_const_logic_1 = B_id_V_1_ack_out))) and not(((ap_const_logic_0 = B_id_V_1_ack_out) and (ap_const_logic_1 = B_id_V_1_vld_in))) and (ap_const_lv2_3 = B_id_V_1_state)) or ((ap_const_lv2_1 = B_id_V_1_state) and (ap_const_logic_1 = B_id_V_1_ack_out)) or ((ap_const_lv2_2 = B_id_V_1_state) and (ap_const_logic_1 = B_id_V_1_vld_in)))) then 
                    B_id_V_1_state <= ap_const_lv2_3;
                else 
                    B_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_keep_V_1_ack_out) and (ap_const_logic_1 = B_keep_V_1_vld_out))) then 
                                        B_keep_V_1_sel_rd <= not(B_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_keep_V_1_ack_in) and (ap_const_logic_1 = B_keep_V_1_vld_in))) then 
                                        B_keep_V_1_sel_wr <= not(B_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = B_keep_V_1_state) and (ap_const_logic_0 = B_keep_V_1_vld_in)) or ((ap_const_lv2_3 = B_keep_V_1_state) and (ap_const_logic_0 = B_keep_V_1_vld_in) and (ap_const_logic_1 = B_keep_V_1_ack_out)))) then 
                    B_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = B_keep_V_1_state) and (ap_const_logic_0 = B_keep_V_1_ack_out)) or ((ap_const_lv2_3 = B_keep_V_1_state) and (ap_const_logic_0 = B_keep_V_1_ack_out) and (ap_const_logic_1 = B_keep_V_1_vld_in)))) then 
                    B_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = B_keep_V_1_vld_in) and (ap_const_logic_1 = B_keep_V_1_ack_out))) and not(((ap_const_logic_0 = B_keep_V_1_ack_out) and (ap_const_logic_1 = B_keep_V_1_vld_in))) and (ap_const_lv2_3 = B_keep_V_1_state)) or ((ap_const_lv2_1 = B_keep_V_1_state) and (ap_const_logic_1 = B_keep_V_1_ack_out)) or ((ap_const_lv2_2 = B_keep_V_1_state) and (ap_const_logic_1 = B_keep_V_1_vld_in)))) then 
                    B_keep_V_1_state <= ap_const_lv2_3;
                else 
                    B_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_last_V_1_ack_out) and (ap_const_logic_1 = B_last_V_1_vld_out))) then 
                                        B_last_V_1_sel_rd <= not(B_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_last_V_1_ack_in) and (ap_const_logic_1 = B_last_V_1_vld_in))) then 
                                        B_last_V_1_sel_wr <= not(B_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = B_last_V_1_state) and (ap_const_logic_0 = B_last_V_1_vld_in)) or ((ap_const_lv2_3 = B_last_V_1_state) and (ap_const_logic_0 = B_last_V_1_vld_in) and (ap_const_logic_1 = B_last_V_1_ack_out)))) then 
                    B_last_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = B_last_V_1_state) and (ap_const_logic_0 = B_last_V_1_ack_out)) or ((ap_const_lv2_3 = B_last_V_1_state) and (ap_const_logic_0 = B_last_V_1_ack_out) and (ap_const_logic_1 = B_last_V_1_vld_in)))) then 
                    B_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = B_last_V_1_vld_in) and (ap_const_logic_1 = B_last_V_1_ack_out))) and not(((ap_const_logic_0 = B_last_V_1_ack_out) and (ap_const_logic_1 = B_last_V_1_vld_in))) and (ap_const_lv2_3 = B_last_V_1_state)) or ((ap_const_lv2_1 = B_last_V_1_state) and (ap_const_logic_1 = B_last_V_1_ack_out)) or ((ap_const_lv2_2 = B_last_V_1_state) and (ap_const_logic_1 = B_last_V_1_vld_in)))) then 
                    B_last_V_1_state <= ap_const_lv2_3;
                else 
                    B_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_strb_V_1_ack_out) and (ap_const_logic_1 = B_strb_V_1_vld_out))) then 
                                        B_strb_V_1_sel_rd <= not(B_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_strb_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_strb_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_strb_V_1_ack_in) and (ap_const_logic_1 = B_strb_V_1_vld_in))) then 
                                        B_strb_V_1_sel_wr <= not(B_strb_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = B_strb_V_1_state) and (ap_const_logic_0 = B_strb_V_1_vld_in)) or ((ap_const_lv2_3 = B_strb_V_1_state) and (ap_const_logic_0 = B_strb_V_1_vld_in) and (ap_const_logic_1 = B_strb_V_1_ack_out)))) then 
                    B_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = B_strb_V_1_state) and (ap_const_logic_0 = B_strb_V_1_ack_out)) or ((ap_const_lv2_3 = B_strb_V_1_state) and (ap_const_logic_0 = B_strb_V_1_ack_out) and (ap_const_logic_1 = B_strb_V_1_vld_in)))) then 
                    B_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = B_strb_V_1_vld_in) and (ap_const_logic_1 = B_strb_V_1_ack_out))) and not(((ap_const_logic_0 = B_strb_V_1_ack_out) and (ap_const_logic_1 = B_strb_V_1_vld_in))) and (ap_const_lv2_3 = B_strb_V_1_state)) or ((ap_const_lv2_1 = B_strb_V_1_state) and (ap_const_logic_1 = B_strb_V_1_ack_out)) or ((ap_const_lv2_2 = B_strb_V_1_state) and (ap_const_logic_1 = B_strb_V_1_vld_in)))) then 
                    B_strb_V_1_state <= ap_const_lv2_3;
                else 
                    B_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    B_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_user_V_1_ack_out) and (ap_const_logic_1 = B_user_V_1_vld_out))) then 
                                        B_user_V_1_sel_rd <= not(B_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    B_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = B_user_V_1_ack_in) and (ap_const_logic_1 = B_user_V_1_vld_in))) then 
                                        B_user_V_1_sel_wr <= not(B_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    B_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                B_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_lv2_2 = B_user_V_1_state) and (ap_const_logic_0 = B_user_V_1_vld_in)) or ((ap_const_lv2_3 = B_user_V_1_state) and (ap_const_logic_0 = B_user_V_1_vld_in) and (ap_const_logic_1 = B_user_V_1_ack_out)))) then 
                    B_user_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_lv2_1 = B_user_V_1_state) and (ap_const_logic_0 = B_user_V_1_ack_out)) or ((ap_const_lv2_3 = B_user_V_1_state) and (ap_const_logic_0 = B_user_V_1_ack_out) and (ap_const_logic_1 = B_user_V_1_vld_in)))) then 
                    B_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ap_const_logic_0 = B_user_V_1_vld_in) and (ap_const_logic_1 = B_user_V_1_ack_out))) and not(((ap_const_logic_0 = B_user_V_1_ack_out) and (ap_const_logic_1 = B_user_V_1_vld_in))) and (ap_const_lv2_3 = B_user_V_1_state)) or ((ap_const_lv2_1 = B_user_V_1_state) and (ap_const_logic_1 = B_user_V_1_ack_out)) or ((ap_const_lv2_2 = B_user_V_1_state) and (ap_const_logic_1 = B_user_V_1_vld_in)))) then 
                    B_user_V_1_state <= ap_const_lv2_3;
                else 
                    B_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = B_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_105 <= i_1_reg_172;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_105 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_data_V_0_load_A)) then
                A_data_V_0_payload_A <= A_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_data_V_0_load_B)) then
                A_data_V_0_payload_B <= A_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_dest_V_0_load_A)) then
                A_dest_V_0_payload_A <= A_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_dest_V_0_load_B)) then
                A_dest_V_0_payload_B <= A_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_id_V_0_load_A)) then
                A_id_V_0_payload_A <= A_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_id_V_0_load_B)) then
                A_id_V_0_payload_B <= A_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_keep_V_0_load_A)) then
                A_keep_V_0_payload_A <= A_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_keep_V_0_load_B)) then
                A_keep_V_0_payload_B <= A_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_last_V_0_load_A)) then
                A_last_V_0_payload_A <= A_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_last_V_0_load_B)) then
                A_last_V_0_payload_B <= A_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_strb_V_0_load_A)) then
                A_strb_V_0_payload_A <= A_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_strb_V_0_load_B)) then
                A_strb_V_0_payload_B <= A_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_user_V_0_load_A)) then
                A_user_V_0_payload_A <= A_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = A_user_V_0_load_B)) then
                A_user_V_0_payload_B <= A_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_data_V_1_load_A)) then
                B_data_V_1_payload_A <= val_assign_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_data_V_1_load_B)) then
                B_data_V_1_payload_B <= val_assign_fu_162_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_dest_V_1_load_A)) then
                B_dest_V_1_payload_A <= A_dest_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_dest_V_1_load_B)) then
                B_dest_V_1_payload_B <= A_dest_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_id_V_1_load_A)) then
                B_id_V_1_payload_A <= A_id_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_id_V_1_load_B)) then
                B_id_V_1_payload_B <= A_id_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_keep_V_1_load_A)) then
                B_keep_V_1_payload_A <= A_keep_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_keep_V_1_load_B)) then
                B_keep_V_1_payload_B <= A_keep_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_last_V_1_load_A)) then
                B_last_V_1_payload_A <= A_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_last_V_1_load_B)) then
                B_last_V_1_payload_B <= A_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_strb_V_1_load_A)) then
                B_strb_V_1_payload_A <= A_strb_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_strb_V_1_load_B)) then
                B_strb_V_1_payload_B <= A_strb_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_user_V_1_load_A)) then
                B_user_V_1_payload_A <= A_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = B_user_V_1_load_B)) then
                B_user_V_1_payload_B <= A_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = B_dest_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_data_V_1_ack_in))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_1_reg_172 <= i_1_fu_122_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, A_data_V_0_vld_out, B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, exitcond_fu_116_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_const_logic_0 = B_dest_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_data_V_1_ack_in))) and (exitcond_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_logic_0 = B_dest_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_data_V_1_ack_in))) and (exitcond_fu_116_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = B_data_V_1_ack_in) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    A_TDATA_blk_n_assign_proc : process(A_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_TDATA_blk_n <= A_data_V_0_state(0);
        else 
            A_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    A_TREADY <= A_dest_V_0_state(1);
    A_data_V_0_ack_in <= A_data_V_0_state(1);

    A_data_V_0_ack_out_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_data_V_0_ack_out <= ap_const_logic_1;
        else 
            A_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_data_V_0_data_out_assign_proc : process(A_data_V_0_payload_A, A_data_V_0_payload_B, A_data_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_data_V_0_sel)) then 
            A_data_V_0_data_out <= A_data_V_0_payload_B;
        else 
            A_data_V_0_data_out <= A_data_V_0_payload_A;
        end if; 
    end process;

    A_data_V_0_load_A <= (not(A_data_V_0_sel_wr) and A_data_V_0_state_cmp_full);
    A_data_V_0_load_B <= (A_data_V_0_state_cmp_full and A_data_V_0_sel_wr);
    A_data_V_0_sel <= A_data_V_0_sel_rd;
    A_data_V_0_state_cmp_full <= '0' when (A_data_V_0_state = ap_const_lv2_1) else '1';
    A_data_V_0_vld_in <= A_TVALID;
    A_data_V_0_vld_out <= A_data_V_0_state(0);
    A_dest_V_0_ack_in <= A_dest_V_0_state(1);

    A_dest_V_0_ack_out_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_dest_V_0_ack_out <= ap_const_logic_1;
        else 
            A_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_dest_V_0_data_out_assign_proc : process(A_dest_V_0_payload_A, A_dest_V_0_payload_B, A_dest_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_dest_V_0_sel)) then 
            A_dest_V_0_data_out <= A_dest_V_0_payload_B;
        else 
            A_dest_V_0_data_out <= A_dest_V_0_payload_A;
        end if; 
    end process;

    A_dest_V_0_load_A <= (not(A_dest_V_0_sel_wr) and A_dest_V_0_state_cmp_full);
    A_dest_V_0_load_B <= (A_dest_V_0_state_cmp_full and A_dest_V_0_sel_wr);
    A_dest_V_0_sel <= A_dest_V_0_sel_rd;
    A_dest_V_0_state_cmp_full <= '0' when (A_dest_V_0_state = ap_const_lv2_1) else '1';
    A_dest_V_0_vld_in <= A_TVALID;
    A_dest_V_0_vld_out <= A_dest_V_0_state(0);
    A_id_V_0_ack_in <= A_id_V_0_state(1);

    A_id_V_0_ack_out_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_id_V_0_ack_out <= ap_const_logic_1;
        else 
            A_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_id_V_0_data_out_assign_proc : process(A_id_V_0_payload_A, A_id_V_0_payload_B, A_id_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_id_V_0_sel)) then 
            A_id_V_0_data_out <= A_id_V_0_payload_B;
        else 
            A_id_V_0_data_out <= A_id_V_0_payload_A;
        end if; 
    end process;

    A_id_V_0_load_A <= (not(A_id_V_0_sel_wr) and A_id_V_0_state_cmp_full);
    A_id_V_0_load_B <= (A_id_V_0_state_cmp_full and A_id_V_0_sel_wr);
    A_id_V_0_sel <= A_id_V_0_sel_rd;
    A_id_V_0_state_cmp_full <= '0' when (A_id_V_0_state = ap_const_lv2_1) else '1';
    A_id_V_0_vld_in <= A_TVALID;
    A_id_V_0_vld_out <= A_id_V_0_state(0);
    A_keep_V_0_ack_in <= A_keep_V_0_state(1);

    A_keep_V_0_ack_out_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            A_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_keep_V_0_data_out_assign_proc : process(A_keep_V_0_payload_A, A_keep_V_0_payload_B, A_keep_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_keep_V_0_sel)) then 
            A_keep_V_0_data_out <= A_keep_V_0_payload_B;
        else 
            A_keep_V_0_data_out <= A_keep_V_0_payload_A;
        end if; 
    end process;

    A_keep_V_0_load_A <= (not(A_keep_V_0_sel_wr) and A_keep_V_0_state_cmp_full);
    A_keep_V_0_load_B <= (A_keep_V_0_state_cmp_full and A_keep_V_0_sel_wr);
    A_keep_V_0_sel <= A_keep_V_0_sel_rd;
    A_keep_V_0_state_cmp_full <= '0' when (A_keep_V_0_state = ap_const_lv2_1) else '1';
    A_keep_V_0_vld_in <= A_TVALID;
    A_keep_V_0_vld_out <= A_keep_V_0_state(0);
    A_last_V_0_ack_in <= A_last_V_0_state(1);

    A_last_V_0_ack_out_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_last_V_0_ack_out <= ap_const_logic_1;
        else 
            A_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_last_V_0_data_out_assign_proc : process(A_last_V_0_payload_A, A_last_V_0_payload_B, A_last_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_last_V_0_sel)) then 
            A_last_V_0_data_out <= A_last_V_0_payload_B;
        else 
            A_last_V_0_data_out <= A_last_V_0_payload_A;
        end if; 
    end process;

    A_last_V_0_load_A <= (not(A_last_V_0_sel_wr) and A_last_V_0_state_cmp_full);
    A_last_V_0_load_B <= (A_last_V_0_state_cmp_full and A_last_V_0_sel_wr);
    A_last_V_0_sel <= A_last_V_0_sel_rd;
    A_last_V_0_state_cmp_full <= '0' when (A_last_V_0_state = ap_const_lv2_1) else '1';
    A_last_V_0_vld_in <= A_TVALID;
    A_last_V_0_vld_out <= A_last_V_0_state(0);
    A_strb_V_0_ack_in <= A_strb_V_0_state(1);

    A_strb_V_0_ack_out_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_strb_V_0_ack_out <= ap_const_logic_1;
        else 
            A_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_strb_V_0_data_out_assign_proc : process(A_strb_V_0_payload_A, A_strb_V_0_payload_B, A_strb_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_strb_V_0_sel)) then 
            A_strb_V_0_data_out <= A_strb_V_0_payload_B;
        else 
            A_strb_V_0_data_out <= A_strb_V_0_payload_A;
        end if; 
    end process;

    A_strb_V_0_load_A <= (not(A_strb_V_0_sel_wr) and A_strb_V_0_state_cmp_full);
    A_strb_V_0_load_B <= (A_strb_V_0_state_cmp_full and A_strb_V_0_sel_wr);
    A_strb_V_0_sel <= A_strb_V_0_sel_rd;
    A_strb_V_0_state_cmp_full <= '0' when (A_strb_V_0_state = ap_const_lv2_1) else '1';
    A_strb_V_0_vld_in <= A_TVALID;
    A_strb_V_0_vld_out <= A_strb_V_0_state(0);
    A_user_V_0_ack_in <= A_user_V_0_state(1);

    A_user_V_0_ack_out_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            A_user_V_0_ack_out <= ap_const_logic_1;
        else 
            A_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    A_user_V_0_data_out_assign_proc : process(A_user_V_0_payload_A, A_user_V_0_payload_B, A_user_V_0_sel)
    begin
        if ((ap_const_logic_1 = A_user_V_0_sel)) then 
            A_user_V_0_data_out <= A_user_V_0_payload_B;
        else 
            A_user_V_0_data_out <= A_user_V_0_payload_A;
        end if; 
    end process;

    A_user_V_0_load_A <= (not(A_user_V_0_sel_wr) and A_user_V_0_state_cmp_full);
    A_user_V_0_load_B <= (A_user_V_0_state_cmp_full and A_user_V_0_sel_wr);
    A_user_V_0_sel <= A_user_V_0_sel_rd;
    A_user_V_0_state_cmp_full <= '0' when (A_user_V_0_state = ap_const_lv2_1) else '1';
    A_user_V_0_vld_in <= A_TVALID;
    A_user_V_0_vld_out <= A_user_V_0_state(0);
    B_TDATA <= B_data_V_1_data_out;

    B_TDATA_blk_n_assign_proc : process(B_data_V_1_state, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_TDATA_blk_n <= B_data_V_1_state(1);
        else 
            B_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    B_TDEST <= B_dest_V_1_data_out;
    B_TID <= B_id_V_1_data_out;
    B_TKEEP <= B_keep_V_1_data_out;
    B_TLAST <= B_last_V_1_data_out;
    B_TSTRB <= B_strb_V_1_data_out;
    B_TUSER <= B_user_V_1_data_out;
    B_TVALID <= B_dest_V_1_state(0);
    B_data_V_1_ack_in <= B_data_V_1_state(1);
    B_data_V_1_ack_out <= B_TREADY;

    B_data_V_1_data_out_assign_proc : process(B_data_V_1_payload_A, B_data_V_1_payload_B, B_data_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_data_V_1_sel)) then 
            B_data_V_1_data_out <= B_data_V_1_payload_B;
        else 
            B_data_V_1_data_out <= B_data_V_1_payload_A;
        end if; 
    end process;

    B_data_V_1_load_A <= (not(B_data_V_1_sel_wr) and B_data_V_1_state_cmp_full);
    B_data_V_1_load_B <= (B_data_V_1_state_cmp_full and B_data_V_1_sel_wr);
    B_data_V_1_sel <= B_data_V_1_sel_rd;
    B_data_V_1_state_cmp_full <= '0' when (B_data_V_1_state = ap_const_lv2_1) else '1';

    B_data_V_1_vld_in_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_data_V_1_vld_in <= ap_const_logic_1;
        else 
            B_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_data_V_1_vld_out <= B_data_V_1_state(0);
    B_dest_V_1_ack_in <= B_dest_V_1_state(1);
    B_dest_V_1_ack_out <= B_TREADY;

    B_dest_V_1_data_out_assign_proc : process(B_dest_V_1_payload_A, B_dest_V_1_payload_B, B_dest_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_dest_V_1_sel)) then 
            B_dest_V_1_data_out <= B_dest_V_1_payload_B;
        else 
            B_dest_V_1_data_out <= B_dest_V_1_payload_A;
        end if; 
    end process;

    B_dest_V_1_load_A <= (not(B_dest_V_1_sel_wr) and B_dest_V_1_state_cmp_full);
    B_dest_V_1_load_B <= (B_dest_V_1_state_cmp_full and B_dest_V_1_sel_wr);
    B_dest_V_1_sel <= B_dest_V_1_sel_rd;
    B_dest_V_1_state_cmp_full <= '0' when (B_dest_V_1_state = ap_const_lv2_1) else '1';

    B_dest_V_1_vld_in_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            B_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_dest_V_1_vld_out <= B_dest_V_1_state(0);
    B_id_V_1_ack_in <= B_id_V_1_state(1);
    B_id_V_1_ack_out <= B_TREADY;

    B_id_V_1_data_out_assign_proc : process(B_id_V_1_payload_A, B_id_V_1_payload_B, B_id_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_id_V_1_sel)) then 
            B_id_V_1_data_out <= B_id_V_1_payload_B;
        else 
            B_id_V_1_data_out <= B_id_V_1_payload_A;
        end if; 
    end process;

    B_id_V_1_load_A <= (not(B_id_V_1_sel_wr) and B_id_V_1_state_cmp_full);
    B_id_V_1_load_B <= (B_id_V_1_state_cmp_full and B_id_V_1_sel_wr);
    B_id_V_1_sel <= B_id_V_1_sel_rd;
    B_id_V_1_state_cmp_full <= '0' when (B_id_V_1_state = ap_const_lv2_1) else '1';

    B_id_V_1_vld_in_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_id_V_1_vld_in <= ap_const_logic_1;
        else 
            B_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_id_V_1_vld_out <= B_id_V_1_state(0);
    B_keep_V_1_ack_in <= B_keep_V_1_state(1);
    B_keep_V_1_ack_out <= B_TREADY;

    B_keep_V_1_data_out_assign_proc : process(B_keep_V_1_payload_A, B_keep_V_1_payload_B, B_keep_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_keep_V_1_sel)) then 
            B_keep_V_1_data_out <= B_keep_V_1_payload_B;
        else 
            B_keep_V_1_data_out <= B_keep_V_1_payload_A;
        end if; 
    end process;

    B_keep_V_1_load_A <= (not(B_keep_V_1_sel_wr) and B_keep_V_1_state_cmp_full);
    B_keep_V_1_load_B <= (B_keep_V_1_state_cmp_full and B_keep_V_1_sel_wr);
    B_keep_V_1_sel <= B_keep_V_1_sel_rd;
    B_keep_V_1_state_cmp_full <= '0' when (B_keep_V_1_state = ap_const_lv2_1) else '1';

    B_keep_V_1_vld_in_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            B_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_keep_V_1_vld_out <= B_keep_V_1_state(0);
    B_last_V_1_ack_in <= B_last_V_1_state(1);
    B_last_V_1_ack_out <= B_TREADY;

    B_last_V_1_data_out_assign_proc : process(B_last_V_1_payload_A, B_last_V_1_payload_B, B_last_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_last_V_1_sel)) then 
            B_last_V_1_data_out <= B_last_V_1_payload_B;
        else 
            B_last_V_1_data_out <= B_last_V_1_payload_A;
        end if; 
    end process;

    B_last_V_1_load_A <= (not(B_last_V_1_sel_wr) and B_last_V_1_state_cmp_full);
    B_last_V_1_load_B <= (B_last_V_1_state_cmp_full and B_last_V_1_sel_wr);
    B_last_V_1_sel <= B_last_V_1_sel_rd;
    B_last_V_1_state_cmp_full <= '0' when (B_last_V_1_state = ap_const_lv2_1) else '1';

    B_last_V_1_vld_in_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_last_V_1_vld_in <= ap_const_logic_1;
        else 
            B_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_last_V_1_vld_out <= B_last_V_1_state(0);
    B_strb_V_1_ack_in <= B_strb_V_1_state(1);
    B_strb_V_1_ack_out <= B_TREADY;

    B_strb_V_1_data_out_assign_proc : process(B_strb_V_1_payload_A, B_strb_V_1_payload_B, B_strb_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_strb_V_1_sel)) then 
            B_strb_V_1_data_out <= B_strb_V_1_payload_B;
        else 
            B_strb_V_1_data_out <= B_strb_V_1_payload_A;
        end if; 
    end process;

    B_strb_V_1_load_A <= (not(B_strb_V_1_sel_wr) and B_strb_V_1_state_cmp_full);
    B_strb_V_1_load_B <= (B_strb_V_1_state_cmp_full and B_strb_V_1_sel_wr);
    B_strb_V_1_sel <= B_strb_V_1_sel_rd;
    B_strb_V_1_state_cmp_full <= '0' when (B_strb_V_1_state = ap_const_lv2_1) else '1';

    B_strb_V_1_vld_in_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            B_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_strb_V_1_vld_out <= B_strb_V_1_state(0);
    B_user_V_1_ack_in <= B_user_V_1_state(1);
    B_user_V_1_ack_out <= B_TREADY;

    B_user_V_1_data_out_assign_proc : process(B_user_V_1_payload_A, B_user_V_1_payload_B, B_user_V_1_sel)
    begin
        if ((ap_const_logic_1 = B_user_V_1_sel)) then 
            B_user_V_1_data_out <= B_user_V_1_payload_B;
        else 
            B_user_V_1_data_out <= B_user_V_1_payload_A;
        end if; 
    end process;

    B_user_V_1_load_A <= (not(B_user_V_1_sel_wr) and B_user_V_1_state_cmp_full);
    B_user_V_1_load_B <= (B_user_V_1_state_cmp_full and B_user_V_1_sel_wr);
    B_user_V_1_sel <= B_user_V_1_sel_rd;
    B_user_V_1_state_cmp_full <= '0' when (B_user_V_1_state = ap_const_lv2_1) else '1';

    B_user_V_1_vld_in_assign_proc : process(A_data_V_0_vld_out, B_data_V_1_ack_in, ap_CS_fsm_state3)
    begin
        if ((not(((ap_const_logic_0 = B_data_V_1_ack_in) or (ap_const_logic_0 = A_data_V_0_vld_out))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            B_user_V_1_vld_in <= ap_const_logic_1;
        else 
            B_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    B_user_V_1_vld_out <= B_user_V_1_state(0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state2_assign_proc : process(B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in)
    begin
                ap_block_state2 <= ((ap_const_logic_0 = B_dest_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_data_V_1_ack_in));
    end process;


    ap_done_assign_proc : process(B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in, ap_CS_fsm_state2, exitcond_fu_116_p2)
    begin
        if ((not(((ap_const_logic_0 = B_dest_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_data_V_1_ack_in))) and (exitcond_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(B_data_V_1_ack_in, B_keep_V_1_ack_in, B_strb_V_1_ack_in, B_user_V_1_ack_in, B_last_V_1_ack_in, B_id_V_1_ack_in, B_dest_V_1_ack_in, ap_CS_fsm_state2, exitcond_fu_116_p2)
    begin
        if ((not(((ap_const_logic_0 = B_dest_V_1_ack_in) or (ap_const_logic_0 = B_id_V_1_ack_in) or (ap_const_logic_0 = B_last_V_1_ack_in) or (ap_const_logic_0 = B_user_V_1_ack_in) or (ap_const_logic_0 = B_strb_V_1_ack_in) or (ap_const_logic_0 = B_keep_V_1_ack_in) or (ap_const_logic_0 = B_data_V_1_ack_in))) and (exitcond_fu_116_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    exitcond_fu_116_p2 <= "1" when (i_reg_105 = ap_const_lv6_32) else "0";
    i_1_fu_122_p2 <= std_logic_vector(unsigned(i_reg_105) + unsigned(ap_const_lv6_1));
    val_assign_fu_162_p2 <= std_logic_vector(unsigned(A_data_V_0_data_out) + unsigned(ap_const_lv32_5));
end behav;
