// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="example,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-2,HLS_INPUT_CLOCK=13.333300,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.245000,HLS_SYN_LAT=151,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=288,HLS_SYN_LUT=799}" *)

module example (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_TDATA,
        A_TVALID,
        A_TREADY,
        A_TKEEP,
        A_TSTRB,
        A_TUSER,
        A_TLAST,
        A_TID,
        A_TDEST,
        B_TDATA,
        B_TVALID,
        B_TREADY,
        B_TKEEP,
        B_TSTRB,
        B_TUSER,
        B_TLAST,
        B_TID,
        B_TDEST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] A_TDATA;
input   A_TVALID;
output   A_TREADY;
input  [3:0] A_TKEEP;
input  [3:0] A_TSTRB;
input  [1:0] A_TUSER;
input  [0:0] A_TLAST;
input  [4:0] A_TID;
input  [5:0] A_TDEST;
output  [31:0] B_TDATA;
output   B_TVALID;
input   B_TREADY;
output  [3:0] B_TKEEP;
output  [3:0] B_TSTRB;
output  [1:0] B_TUSER;
output  [0:0] B_TLAST;
output  [4:0] B_TID;
output  [5:0] B_TDEST;

reg ap_done;
reg ap_idle;
reg ap_ready;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] A_data_V_0_data_out;
wire    A_data_V_0_vld_in;
wire    A_data_V_0_vld_out;
wire    A_data_V_0_ack_in;
reg    A_data_V_0_ack_out;
reg   [31:0] A_data_V_0_payload_A;
reg   [31:0] A_data_V_0_payload_B;
reg    A_data_V_0_sel_rd;
reg    A_data_V_0_sel_wr;
wire    A_data_V_0_sel;
wire    A_data_V_0_load_A;
wire    A_data_V_0_load_B;
reg   [1:0] A_data_V_0_state;
wire    A_data_V_0_state_cmp_full;
reg   [3:0] A_keep_V_0_data_out;
wire    A_keep_V_0_vld_in;
wire    A_keep_V_0_vld_out;
wire    A_keep_V_0_ack_in;
reg    A_keep_V_0_ack_out;
reg   [3:0] A_keep_V_0_payload_A;
reg   [3:0] A_keep_V_0_payload_B;
reg    A_keep_V_0_sel_rd;
reg    A_keep_V_0_sel_wr;
wire    A_keep_V_0_sel;
wire    A_keep_V_0_load_A;
wire    A_keep_V_0_load_B;
reg   [1:0] A_keep_V_0_state;
wire    A_keep_V_0_state_cmp_full;
reg   [3:0] A_strb_V_0_data_out;
wire    A_strb_V_0_vld_in;
wire    A_strb_V_0_vld_out;
wire    A_strb_V_0_ack_in;
reg    A_strb_V_0_ack_out;
reg   [3:0] A_strb_V_0_payload_A;
reg   [3:0] A_strb_V_0_payload_B;
reg    A_strb_V_0_sel_rd;
reg    A_strb_V_0_sel_wr;
wire    A_strb_V_0_sel;
wire    A_strb_V_0_load_A;
wire    A_strb_V_0_load_B;
reg   [1:0] A_strb_V_0_state;
wire    A_strb_V_0_state_cmp_full;
reg   [1:0] A_user_V_0_data_out;
wire    A_user_V_0_vld_in;
wire    A_user_V_0_vld_out;
wire    A_user_V_0_ack_in;
reg    A_user_V_0_ack_out;
reg   [1:0] A_user_V_0_payload_A;
reg   [1:0] A_user_V_0_payload_B;
reg    A_user_V_0_sel_rd;
reg    A_user_V_0_sel_wr;
wire    A_user_V_0_sel;
wire    A_user_V_0_load_A;
wire    A_user_V_0_load_B;
reg   [1:0] A_user_V_0_state;
wire    A_user_V_0_state_cmp_full;
reg   [0:0] A_last_V_0_data_out;
wire    A_last_V_0_vld_in;
wire    A_last_V_0_vld_out;
wire    A_last_V_0_ack_in;
reg    A_last_V_0_ack_out;
reg   [0:0] A_last_V_0_payload_A;
reg   [0:0] A_last_V_0_payload_B;
reg    A_last_V_0_sel_rd;
reg    A_last_V_0_sel_wr;
wire    A_last_V_0_sel;
wire    A_last_V_0_load_A;
wire    A_last_V_0_load_B;
reg   [1:0] A_last_V_0_state;
wire    A_last_V_0_state_cmp_full;
reg   [4:0] A_id_V_0_data_out;
wire    A_id_V_0_vld_in;
wire    A_id_V_0_vld_out;
wire    A_id_V_0_ack_in;
reg    A_id_V_0_ack_out;
reg   [4:0] A_id_V_0_payload_A;
reg   [4:0] A_id_V_0_payload_B;
reg    A_id_V_0_sel_rd;
reg    A_id_V_0_sel_wr;
wire    A_id_V_0_sel;
wire    A_id_V_0_load_A;
wire    A_id_V_0_load_B;
reg   [1:0] A_id_V_0_state;
wire    A_id_V_0_state_cmp_full;
reg   [5:0] A_dest_V_0_data_out;
wire    A_dest_V_0_vld_in;
wire    A_dest_V_0_vld_out;
wire    A_dest_V_0_ack_in;
reg    A_dest_V_0_ack_out;
reg   [5:0] A_dest_V_0_payload_A;
reg   [5:0] A_dest_V_0_payload_B;
reg    A_dest_V_0_sel_rd;
reg    A_dest_V_0_sel_wr;
wire    A_dest_V_0_sel;
wire    A_dest_V_0_load_A;
wire    A_dest_V_0_load_B;
reg   [1:0] A_dest_V_0_state;
wire    A_dest_V_0_state_cmp_full;
reg   [31:0] B_data_V_1_data_out;
reg    B_data_V_1_vld_in;
wire    B_data_V_1_vld_out;
wire    B_data_V_1_ack_in;
wire    B_data_V_1_ack_out;
reg   [31:0] B_data_V_1_payload_A;
reg   [31:0] B_data_V_1_payload_B;
reg    B_data_V_1_sel_rd;
reg    B_data_V_1_sel_wr;
wire    B_data_V_1_sel;
wire    B_data_V_1_load_A;
wire    B_data_V_1_load_B;
reg   [1:0] B_data_V_1_state;
wire    B_data_V_1_state_cmp_full;
reg   [3:0] B_keep_V_1_data_out;
reg    B_keep_V_1_vld_in;
wire    B_keep_V_1_vld_out;
wire    B_keep_V_1_ack_in;
wire    B_keep_V_1_ack_out;
reg   [3:0] B_keep_V_1_payload_A;
reg   [3:0] B_keep_V_1_payload_B;
reg    B_keep_V_1_sel_rd;
reg    B_keep_V_1_sel_wr;
wire    B_keep_V_1_sel;
wire    B_keep_V_1_load_A;
wire    B_keep_V_1_load_B;
reg   [1:0] B_keep_V_1_state;
wire    B_keep_V_1_state_cmp_full;
reg   [3:0] B_strb_V_1_data_out;
reg    B_strb_V_1_vld_in;
wire    B_strb_V_1_vld_out;
wire    B_strb_V_1_ack_in;
wire    B_strb_V_1_ack_out;
reg   [3:0] B_strb_V_1_payload_A;
reg   [3:0] B_strb_V_1_payload_B;
reg    B_strb_V_1_sel_rd;
reg    B_strb_V_1_sel_wr;
wire    B_strb_V_1_sel;
wire    B_strb_V_1_load_A;
wire    B_strb_V_1_load_B;
reg   [1:0] B_strb_V_1_state;
wire    B_strb_V_1_state_cmp_full;
reg   [1:0] B_user_V_1_data_out;
reg    B_user_V_1_vld_in;
wire    B_user_V_1_vld_out;
wire    B_user_V_1_ack_in;
wire    B_user_V_1_ack_out;
reg   [1:0] B_user_V_1_payload_A;
reg   [1:0] B_user_V_1_payload_B;
reg    B_user_V_1_sel_rd;
reg    B_user_V_1_sel_wr;
wire    B_user_V_1_sel;
wire    B_user_V_1_load_A;
wire    B_user_V_1_load_B;
reg   [1:0] B_user_V_1_state;
wire    B_user_V_1_state_cmp_full;
reg   [0:0] B_last_V_1_data_out;
reg    B_last_V_1_vld_in;
wire    B_last_V_1_vld_out;
wire    B_last_V_1_ack_in;
wire    B_last_V_1_ack_out;
reg   [0:0] B_last_V_1_payload_A;
reg   [0:0] B_last_V_1_payload_B;
reg    B_last_V_1_sel_rd;
reg    B_last_V_1_sel_wr;
wire    B_last_V_1_sel;
wire    B_last_V_1_load_A;
wire    B_last_V_1_load_B;
reg   [1:0] B_last_V_1_state;
wire    B_last_V_1_state_cmp_full;
reg   [4:0] B_id_V_1_data_out;
reg    B_id_V_1_vld_in;
wire    B_id_V_1_vld_out;
wire    B_id_V_1_ack_in;
wire    B_id_V_1_ack_out;
reg   [4:0] B_id_V_1_payload_A;
reg   [4:0] B_id_V_1_payload_B;
reg    B_id_V_1_sel_rd;
reg    B_id_V_1_sel_wr;
wire    B_id_V_1_sel;
wire    B_id_V_1_load_A;
wire    B_id_V_1_load_B;
reg   [1:0] B_id_V_1_state;
wire    B_id_V_1_state_cmp_full;
reg   [5:0] B_dest_V_1_data_out;
reg    B_dest_V_1_vld_in;
wire    B_dest_V_1_vld_out;
wire    B_dest_V_1_ack_in;
wire    B_dest_V_1_ack_out;
reg   [5:0] B_dest_V_1_payload_A;
reg   [5:0] B_dest_V_1_payload_B;
reg    B_dest_V_1_sel_rd;
reg    B_dest_V_1_sel_wr;
wire    B_dest_V_1_sel;
wire    B_dest_V_1_load_A;
wire    B_dest_V_1_load_B;
reg   [1:0] B_dest_V_1_state;
wire    B_dest_V_1_state_cmp_full;
reg    A_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    B_TDATA_blk_n;
wire    ap_CS_fsm_state4;
wire   [5:0] i_1_fu_122_p2;
reg   [5:0] i_1_reg_172;
wire    ap_CS_fsm_state2;
reg    ap_block_state2;
wire   [31:0] val_assign_fu_162_p2;
reg   [5:0] i_reg_105;
wire   [0:0] exitcond_fu_116_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 A_data_V_0_sel_rd = 1'b0;
#0 A_data_V_0_sel_wr = 1'b0;
#0 A_data_V_0_state = 2'd0;
#0 A_keep_V_0_sel_rd = 1'b0;
#0 A_keep_V_0_sel_wr = 1'b0;
#0 A_keep_V_0_state = 2'd0;
#0 A_strb_V_0_sel_rd = 1'b0;
#0 A_strb_V_0_sel_wr = 1'b0;
#0 A_strb_V_0_state = 2'd0;
#0 A_user_V_0_sel_rd = 1'b0;
#0 A_user_V_0_sel_wr = 1'b0;
#0 A_user_V_0_state = 2'd0;
#0 A_last_V_0_sel_rd = 1'b0;
#0 A_last_V_0_sel_wr = 1'b0;
#0 A_last_V_0_state = 2'd0;
#0 A_id_V_0_sel_rd = 1'b0;
#0 A_id_V_0_sel_wr = 1'b0;
#0 A_id_V_0_state = 2'd0;
#0 A_dest_V_0_sel_rd = 1'b0;
#0 A_dest_V_0_sel_wr = 1'b0;
#0 A_dest_V_0_state = 2'd0;
#0 B_data_V_1_sel_rd = 1'b0;
#0 B_data_V_1_sel_wr = 1'b0;
#0 B_data_V_1_state = 2'd0;
#0 B_keep_V_1_sel_rd = 1'b0;
#0 B_keep_V_1_sel_wr = 1'b0;
#0 B_keep_V_1_state = 2'd0;
#0 B_strb_V_1_sel_rd = 1'b0;
#0 B_strb_V_1_sel_wr = 1'b0;
#0 B_strb_V_1_state = 2'd0;
#0 B_user_V_1_sel_rd = 1'b0;
#0 B_user_V_1_sel_wr = 1'b0;
#0 B_user_V_1_state = 2'd0;
#0 B_last_V_1_sel_rd = 1'b0;
#0 B_last_V_1_sel_wr = 1'b0;
#0 B_last_V_1_state = 2'd0;
#0 B_id_V_1_sel_rd = 1'b0;
#0 B_id_V_1_sel_wr = 1'b0;
#0 B_id_V_1_state = 2'd0;
#0 B_dest_V_1_sel_rd = 1'b0;
#0 B_dest_V_1_sel_wr = 1'b0;
#0 B_dest_V_1_state = 2'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_data_V_0_ack_out) & (1'b1 == A_data_V_0_vld_out))) begin
            A_data_V_0_sel_rd <= ~A_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_data_V_0_ack_in) & (1'b1 == A_data_V_0_vld_in))) begin
            A_data_V_0_sel_wr <= ~A_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_data_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_data_V_0_state) & (1'b0 == A_data_V_0_vld_in)) | ((2'd3 == A_data_V_0_state) & (1'b0 == A_data_V_0_vld_in) & (1'b1 == A_data_V_0_ack_out)))) begin
            A_data_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_data_V_0_state) & (1'b0 == A_data_V_0_ack_out)) | ((2'd3 == A_data_V_0_state) & (1'b0 == A_data_V_0_ack_out) & (1'b1 == A_data_V_0_vld_in)))) begin
            A_data_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_data_V_0_vld_in) & (1'b1 == A_data_V_0_ack_out)) & ~((1'b0 == A_data_V_0_ack_out) & (1'b1 == A_data_V_0_vld_in)) & (2'd3 == A_data_V_0_state)) | ((2'd1 == A_data_V_0_state) & (1'b1 == A_data_V_0_ack_out)) | ((2'd2 == A_data_V_0_state) & (1'b1 == A_data_V_0_vld_in)))) begin
            A_data_V_0_state <= 2'd3;
        end else begin
            A_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_dest_V_0_ack_out) & (1'b1 == A_dest_V_0_vld_out))) begin
            A_dest_V_0_sel_rd <= ~A_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_dest_V_0_ack_in) & (1'b1 == A_dest_V_0_vld_in))) begin
            A_dest_V_0_sel_wr <= ~A_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_dest_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_dest_V_0_state) & (1'b0 == A_dest_V_0_vld_in)) | ((2'd3 == A_dest_V_0_state) & (1'b0 == A_dest_V_0_vld_in) & (1'b1 == A_dest_V_0_ack_out)))) begin
            A_dest_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_dest_V_0_state) & (1'b0 == A_dest_V_0_ack_out)) | ((2'd3 == A_dest_V_0_state) & (1'b0 == A_dest_V_0_ack_out) & (1'b1 == A_dest_V_0_vld_in)))) begin
            A_dest_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_dest_V_0_vld_in) & (1'b1 == A_dest_V_0_ack_out)) & ~((1'b0 == A_dest_V_0_ack_out) & (1'b1 == A_dest_V_0_vld_in)) & (2'd3 == A_dest_V_0_state)) | ((2'd1 == A_dest_V_0_state) & (1'b1 == A_dest_V_0_ack_out)) | ((2'd2 == A_dest_V_0_state) & (1'b1 == A_dest_V_0_vld_in)))) begin
            A_dest_V_0_state <= 2'd3;
        end else begin
            A_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_id_V_0_ack_out) & (1'b1 == A_id_V_0_vld_out))) begin
            A_id_V_0_sel_rd <= ~A_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_id_V_0_ack_in) & (1'b1 == A_id_V_0_vld_in))) begin
            A_id_V_0_sel_wr <= ~A_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_id_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_id_V_0_state) & (1'b0 == A_id_V_0_vld_in)) | ((2'd3 == A_id_V_0_state) & (1'b0 == A_id_V_0_vld_in) & (1'b1 == A_id_V_0_ack_out)))) begin
            A_id_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_id_V_0_state) & (1'b0 == A_id_V_0_ack_out)) | ((2'd3 == A_id_V_0_state) & (1'b0 == A_id_V_0_ack_out) & (1'b1 == A_id_V_0_vld_in)))) begin
            A_id_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_id_V_0_vld_in) & (1'b1 == A_id_V_0_ack_out)) & ~((1'b0 == A_id_V_0_ack_out) & (1'b1 == A_id_V_0_vld_in)) & (2'd3 == A_id_V_0_state)) | ((2'd1 == A_id_V_0_state) & (1'b1 == A_id_V_0_ack_out)) | ((2'd2 == A_id_V_0_state) & (1'b1 == A_id_V_0_vld_in)))) begin
            A_id_V_0_state <= 2'd3;
        end else begin
            A_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_keep_V_0_vld_out) & (1'b1 == A_keep_V_0_ack_out))) begin
            A_keep_V_0_sel_rd <= ~A_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_keep_V_0_ack_in) & (1'b1 == A_keep_V_0_vld_in))) begin
            A_keep_V_0_sel_wr <= ~A_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_keep_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_keep_V_0_state) & (1'b0 == A_keep_V_0_vld_in)) | ((2'd3 == A_keep_V_0_state) & (1'b0 == A_keep_V_0_vld_in) & (1'b1 == A_keep_V_0_ack_out)))) begin
            A_keep_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_keep_V_0_state) & (1'b0 == A_keep_V_0_ack_out)) | ((2'd3 == A_keep_V_0_state) & (1'b0 == A_keep_V_0_ack_out) & (1'b1 == A_keep_V_0_vld_in)))) begin
            A_keep_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_keep_V_0_vld_in) & (1'b1 == A_keep_V_0_ack_out)) & ~((1'b0 == A_keep_V_0_ack_out) & (1'b1 == A_keep_V_0_vld_in)) & (2'd3 == A_keep_V_0_state)) | ((2'd1 == A_keep_V_0_state) & (1'b1 == A_keep_V_0_ack_out)) | ((2'd2 == A_keep_V_0_state) & (1'b1 == A_keep_V_0_vld_in)))) begin
            A_keep_V_0_state <= 2'd3;
        end else begin
            A_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_last_V_0_ack_out) & (1'b1 == A_last_V_0_vld_out))) begin
            A_last_V_0_sel_rd <= ~A_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_last_V_0_ack_in) & (1'b1 == A_last_V_0_vld_in))) begin
            A_last_V_0_sel_wr <= ~A_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_last_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_last_V_0_state) & (1'b0 == A_last_V_0_vld_in)) | ((2'd3 == A_last_V_0_state) & (1'b0 == A_last_V_0_vld_in) & (1'b1 == A_last_V_0_ack_out)))) begin
            A_last_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_last_V_0_state) & (1'b0 == A_last_V_0_ack_out)) | ((2'd3 == A_last_V_0_state) & (1'b0 == A_last_V_0_ack_out) & (1'b1 == A_last_V_0_vld_in)))) begin
            A_last_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_last_V_0_vld_in) & (1'b1 == A_last_V_0_ack_out)) & ~((1'b0 == A_last_V_0_ack_out) & (1'b1 == A_last_V_0_vld_in)) & (2'd3 == A_last_V_0_state)) | ((2'd1 == A_last_V_0_state) & (1'b1 == A_last_V_0_ack_out)) | ((2'd2 == A_last_V_0_state) & (1'b1 == A_last_V_0_vld_in)))) begin
            A_last_V_0_state <= 2'd3;
        end else begin
            A_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_strb_V_0_ack_out) & (1'b1 == A_strb_V_0_vld_out))) begin
            A_strb_V_0_sel_rd <= ~A_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_strb_V_0_ack_in) & (1'b1 == A_strb_V_0_vld_in))) begin
            A_strb_V_0_sel_wr <= ~A_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_strb_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_strb_V_0_state) & (1'b0 == A_strb_V_0_vld_in)) | ((2'd3 == A_strb_V_0_state) & (1'b0 == A_strb_V_0_vld_in) & (1'b1 == A_strb_V_0_ack_out)))) begin
            A_strb_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_strb_V_0_state) & (1'b0 == A_strb_V_0_ack_out)) | ((2'd3 == A_strb_V_0_state) & (1'b0 == A_strb_V_0_ack_out) & (1'b1 == A_strb_V_0_vld_in)))) begin
            A_strb_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_strb_V_0_vld_in) & (1'b1 == A_strb_V_0_ack_out)) & ~((1'b0 == A_strb_V_0_ack_out) & (1'b1 == A_strb_V_0_vld_in)) & (2'd3 == A_strb_V_0_state)) | ((2'd1 == A_strb_V_0_state) & (1'b1 == A_strb_V_0_ack_out)) | ((2'd2 == A_strb_V_0_state) & (1'b1 == A_strb_V_0_vld_in)))) begin
            A_strb_V_0_state <= 2'd3;
        end else begin
            A_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == A_user_V_0_ack_out) & (1'b1 == A_user_V_0_vld_out))) begin
            A_user_V_0_sel_rd <= ~A_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == A_user_V_0_ack_in) & (1'b1 == A_user_V_0_vld_in))) begin
            A_user_V_0_sel_wr <= ~A_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        A_user_V_0_state <= 2'd0;
    end else begin
        if ((((2'd2 == A_user_V_0_state) & (1'b0 == A_user_V_0_vld_in)) | ((2'd3 == A_user_V_0_state) & (1'b0 == A_user_V_0_vld_in) & (1'b1 == A_user_V_0_ack_out)))) begin
            A_user_V_0_state <= 2'd2;
        end else if ((((2'd1 == A_user_V_0_state) & (1'b0 == A_user_V_0_ack_out)) | ((2'd3 == A_user_V_0_state) & (1'b0 == A_user_V_0_ack_out) & (1'b1 == A_user_V_0_vld_in)))) begin
            A_user_V_0_state <= 2'd1;
        end else if (((~((1'b0 == A_user_V_0_vld_in) & (1'b1 == A_user_V_0_ack_out)) & ~((1'b0 == A_user_V_0_ack_out) & (1'b1 == A_user_V_0_vld_in)) & (2'd3 == A_user_V_0_state)) | ((2'd1 == A_user_V_0_state) & (1'b1 == A_user_V_0_ack_out)) | ((2'd2 == A_user_V_0_state) & (1'b1 == A_user_V_0_vld_in)))) begin
            A_user_V_0_state <= 2'd3;
        end else begin
            A_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_data_V_1_ack_out) & (1'b1 == B_data_V_1_vld_out))) begin
            B_data_V_1_sel_rd <= ~B_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_data_V_1_ack_in) & (1'b1 == B_data_V_1_vld_in))) begin
            B_data_V_1_sel_wr <= ~B_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_data_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_data_V_1_state) & (1'b0 == B_data_V_1_vld_in)) | ((2'd3 == B_data_V_1_state) & (1'b0 == B_data_V_1_vld_in) & (1'b1 == B_data_V_1_ack_out)))) begin
            B_data_V_1_state <= 2'd2;
        end else if ((((2'd1 == B_data_V_1_state) & (1'b0 == B_data_V_1_ack_out)) | ((2'd3 == B_data_V_1_state) & (1'b0 == B_data_V_1_ack_out) & (1'b1 == B_data_V_1_vld_in)))) begin
            B_data_V_1_state <= 2'd1;
        end else if (((~((1'b0 == B_data_V_1_vld_in) & (1'b1 == B_data_V_1_ack_out)) & ~((1'b0 == B_data_V_1_ack_out) & (1'b1 == B_data_V_1_vld_in)) & (2'd3 == B_data_V_1_state)) | ((2'd1 == B_data_V_1_state) & (1'b1 == B_data_V_1_ack_out)) | ((2'd2 == B_data_V_1_state) & (1'b1 == B_data_V_1_vld_in)))) begin
            B_data_V_1_state <= 2'd3;
        end else begin
            B_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_dest_V_1_ack_out) & (1'b1 == B_dest_V_1_vld_out))) begin
            B_dest_V_1_sel_rd <= ~B_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_dest_V_1_ack_in) & (1'b1 == B_dest_V_1_vld_in))) begin
            B_dest_V_1_sel_wr <= ~B_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_dest_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_dest_V_1_state) & (1'b0 == B_dest_V_1_vld_in)) | ((2'd3 == B_dest_V_1_state) & (1'b0 == B_dest_V_1_vld_in) & (1'b1 == B_dest_V_1_ack_out)))) begin
            B_dest_V_1_state <= 2'd2;
        end else if ((((2'd1 == B_dest_V_1_state) & (1'b0 == B_dest_V_1_ack_out)) | ((2'd3 == B_dest_V_1_state) & (1'b0 == B_dest_V_1_ack_out) & (1'b1 == B_dest_V_1_vld_in)))) begin
            B_dest_V_1_state <= 2'd1;
        end else if (((~((1'b0 == B_dest_V_1_vld_in) & (1'b1 == B_dest_V_1_ack_out)) & ~((1'b0 == B_dest_V_1_ack_out) & (1'b1 == B_dest_V_1_vld_in)) & (2'd3 == B_dest_V_1_state)) | ((2'd1 == B_dest_V_1_state) & (1'b1 == B_dest_V_1_ack_out)) | ((2'd2 == B_dest_V_1_state) & (1'b1 == B_dest_V_1_vld_in)))) begin
            B_dest_V_1_state <= 2'd3;
        end else begin
            B_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_id_V_1_ack_out) & (1'b1 == B_id_V_1_vld_out))) begin
            B_id_V_1_sel_rd <= ~B_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_id_V_1_ack_in) & (1'b1 == B_id_V_1_vld_in))) begin
            B_id_V_1_sel_wr <= ~B_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_id_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_id_V_1_state) & (1'b0 == B_id_V_1_vld_in)) | ((2'd3 == B_id_V_1_state) & (1'b0 == B_id_V_1_vld_in) & (1'b1 == B_id_V_1_ack_out)))) begin
            B_id_V_1_state <= 2'd2;
        end else if ((((2'd1 == B_id_V_1_state) & (1'b0 == B_id_V_1_ack_out)) | ((2'd3 == B_id_V_1_state) & (1'b0 == B_id_V_1_ack_out) & (1'b1 == B_id_V_1_vld_in)))) begin
            B_id_V_1_state <= 2'd1;
        end else if (((~((1'b0 == B_id_V_1_vld_in) & (1'b1 == B_id_V_1_ack_out)) & ~((1'b0 == B_id_V_1_ack_out) & (1'b1 == B_id_V_1_vld_in)) & (2'd3 == B_id_V_1_state)) | ((2'd1 == B_id_V_1_state) & (1'b1 == B_id_V_1_ack_out)) | ((2'd2 == B_id_V_1_state) & (1'b1 == B_id_V_1_vld_in)))) begin
            B_id_V_1_state <= 2'd3;
        end else begin
            B_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_keep_V_1_ack_out) & (1'b1 == B_keep_V_1_vld_out))) begin
            B_keep_V_1_sel_rd <= ~B_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_keep_V_1_ack_in) & (1'b1 == B_keep_V_1_vld_in))) begin
            B_keep_V_1_sel_wr <= ~B_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_keep_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_keep_V_1_state) & (1'b0 == B_keep_V_1_vld_in)) | ((2'd3 == B_keep_V_1_state) & (1'b0 == B_keep_V_1_vld_in) & (1'b1 == B_keep_V_1_ack_out)))) begin
            B_keep_V_1_state <= 2'd2;
        end else if ((((2'd1 == B_keep_V_1_state) & (1'b0 == B_keep_V_1_ack_out)) | ((2'd3 == B_keep_V_1_state) & (1'b0 == B_keep_V_1_ack_out) & (1'b1 == B_keep_V_1_vld_in)))) begin
            B_keep_V_1_state <= 2'd1;
        end else if (((~((1'b0 == B_keep_V_1_vld_in) & (1'b1 == B_keep_V_1_ack_out)) & ~((1'b0 == B_keep_V_1_ack_out) & (1'b1 == B_keep_V_1_vld_in)) & (2'd3 == B_keep_V_1_state)) | ((2'd1 == B_keep_V_1_state) & (1'b1 == B_keep_V_1_ack_out)) | ((2'd2 == B_keep_V_1_state) & (1'b1 == B_keep_V_1_vld_in)))) begin
            B_keep_V_1_state <= 2'd3;
        end else begin
            B_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_last_V_1_ack_out) & (1'b1 == B_last_V_1_vld_out))) begin
            B_last_V_1_sel_rd <= ~B_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_last_V_1_ack_in) & (1'b1 == B_last_V_1_vld_in))) begin
            B_last_V_1_sel_wr <= ~B_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_last_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_last_V_1_state) & (1'b0 == B_last_V_1_vld_in)) | ((2'd3 == B_last_V_1_state) & (1'b0 == B_last_V_1_vld_in) & (1'b1 == B_last_V_1_ack_out)))) begin
            B_last_V_1_state <= 2'd2;
        end else if ((((2'd1 == B_last_V_1_state) & (1'b0 == B_last_V_1_ack_out)) | ((2'd3 == B_last_V_1_state) & (1'b0 == B_last_V_1_ack_out) & (1'b1 == B_last_V_1_vld_in)))) begin
            B_last_V_1_state <= 2'd1;
        end else if (((~((1'b0 == B_last_V_1_vld_in) & (1'b1 == B_last_V_1_ack_out)) & ~((1'b0 == B_last_V_1_ack_out) & (1'b1 == B_last_V_1_vld_in)) & (2'd3 == B_last_V_1_state)) | ((2'd1 == B_last_V_1_state) & (1'b1 == B_last_V_1_ack_out)) | ((2'd2 == B_last_V_1_state) & (1'b1 == B_last_V_1_vld_in)))) begin
            B_last_V_1_state <= 2'd3;
        end else begin
            B_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_strb_V_1_ack_out) & (1'b1 == B_strb_V_1_vld_out))) begin
            B_strb_V_1_sel_rd <= ~B_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_strb_V_1_ack_in) & (1'b1 == B_strb_V_1_vld_in))) begin
            B_strb_V_1_sel_wr <= ~B_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_strb_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_strb_V_1_state) & (1'b0 == B_strb_V_1_vld_in)) | ((2'd3 == B_strb_V_1_state) & (1'b0 == B_strb_V_1_vld_in) & (1'b1 == B_strb_V_1_ack_out)))) begin
            B_strb_V_1_state <= 2'd2;
        end else if ((((2'd1 == B_strb_V_1_state) & (1'b0 == B_strb_V_1_ack_out)) | ((2'd3 == B_strb_V_1_state) & (1'b0 == B_strb_V_1_ack_out) & (1'b1 == B_strb_V_1_vld_in)))) begin
            B_strb_V_1_state <= 2'd1;
        end else if (((~((1'b0 == B_strb_V_1_vld_in) & (1'b1 == B_strb_V_1_ack_out)) & ~((1'b0 == B_strb_V_1_ack_out) & (1'b1 == B_strb_V_1_vld_in)) & (2'd3 == B_strb_V_1_state)) | ((2'd1 == B_strb_V_1_state) & (1'b1 == B_strb_V_1_ack_out)) | ((2'd2 == B_strb_V_1_state) & (1'b1 == B_strb_V_1_vld_in)))) begin
            B_strb_V_1_state <= 2'd3;
        end else begin
            B_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == B_user_V_1_ack_out) & (1'b1 == B_user_V_1_vld_out))) begin
            B_user_V_1_sel_rd <= ~B_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == B_user_V_1_ack_in) & (1'b1 == B_user_V_1_vld_in))) begin
            B_user_V_1_sel_wr <= ~B_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        B_user_V_1_state <= 2'd0;
    end else begin
        if ((((2'd2 == B_user_V_1_state) & (1'b0 == B_user_V_1_vld_in)) | ((2'd3 == B_user_V_1_state) & (1'b0 == B_user_V_1_vld_in) & (1'b1 == B_user_V_1_ack_out)))) begin
            B_user_V_1_state <= 2'd2;
        end else if ((((2'd1 == B_user_V_1_state) & (1'b0 == B_user_V_1_ack_out)) | ((2'd3 == B_user_V_1_state) & (1'b0 == B_user_V_1_ack_out) & (1'b1 == B_user_V_1_vld_in)))) begin
            B_user_V_1_state <= 2'd1;
        end else if (((~((1'b0 == B_user_V_1_vld_in) & (1'b1 == B_user_V_1_ack_out)) & ~((1'b0 == B_user_V_1_ack_out) & (1'b1 == B_user_V_1_vld_in)) & (2'd3 == B_user_V_1_state)) | ((2'd1 == B_user_V_1_state) & (1'b1 == B_user_V_1_ack_out)) | ((2'd2 == B_user_V_1_state) & (1'b1 == B_user_V_1_vld_in)))) begin
            B_user_V_1_state <= 2'd3;
        end else begin
            B_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == B_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state4))) begin
        i_reg_105 <= i_1_reg_172;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_105 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_data_V_0_load_A)) begin
        A_data_V_0_payload_A <= A_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_data_V_0_load_B)) begin
        A_data_V_0_payload_B <= A_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_dest_V_0_load_A)) begin
        A_dest_V_0_payload_A <= A_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_dest_V_0_load_B)) begin
        A_dest_V_0_payload_B <= A_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_id_V_0_load_A)) begin
        A_id_V_0_payload_A <= A_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_id_V_0_load_B)) begin
        A_id_V_0_payload_B <= A_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_keep_V_0_load_A)) begin
        A_keep_V_0_payload_A <= A_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_keep_V_0_load_B)) begin
        A_keep_V_0_payload_B <= A_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_last_V_0_load_A)) begin
        A_last_V_0_payload_A <= A_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_last_V_0_load_B)) begin
        A_last_V_0_payload_B <= A_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_strb_V_0_load_A)) begin
        A_strb_V_0_payload_A <= A_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_strb_V_0_load_B)) begin
        A_strb_V_0_payload_B <= A_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_user_V_0_load_A)) begin
        A_user_V_0_payload_A <= A_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == A_user_V_0_load_B)) begin
        A_user_V_0_payload_B <= A_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_data_V_1_load_A)) begin
        B_data_V_1_payload_A <= val_assign_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_data_V_1_load_B)) begin
        B_data_V_1_payload_B <= val_assign_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_dest_V_1_load_A)) begin
        B_dest_V_1_payload_A <= A_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_dest_V_1_load_B)) begin
        B_dest_V_1_payload_B <= A_dest_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_id_V_1_load_A)) begin
        B_id_V_1_payload_A <= A_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_id_V_1_load_B)) begin
        B_id_V_1_payload_B <= A_id_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_keep_V_1_load_A)) begin
        B_keep_V_1_payload_A <= A_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_keep_V_1_load_B)) begin
        B_keep_V_1_payload_B <= A_keep_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_last_V_1_load_A)) begin
        B_last_V_1_payload_A <= A_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_last_V_1_load_B)) begin
        B_last_V_1_payload_B <= A_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_strb_V_1_load_A)) begin
        B_strb_V_1_payload_A <= A_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_strb_V_1_load_B)) begin
        B_strb_V_1_payload_B <= A_strb_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_user_V_1_load_A)) begin
        B_user_V_1_payload_A <= A_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == B_user_V_1_load_B)) begin
        B_user_V_1_payload_B <= A_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == B_dest_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_data_V_1_ack_in)) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_172 <= i_1_fu_122_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_TDATA_blk_n = A_data_V_0_state[1'd0];
    end else begin
        A_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        A_data_V_0_ack_out = 1'b1;
    end else begin
        A_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_data_V_0_sel)) begin
        A_data_V_0_data_out = A_data_V_0_payload_B;
    end else begin
        A_data_V_0_data_out = A_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        A_dest_V_0_ack_out = 1'b1;
    end else begin
        A_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_dest_V_0_sel)) begin
        A_dest_V_0_data_out = A_dest_V_0_payload_B;
    end else begin
        A_dest_V_0_data_out = A_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        A_id_V_0_ack_out = 1'b1;
    end else begin
        A_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_id_V_0_sel)) begin
        A_id_V_0_data_out = A_id_V_0_payload_B;
    end else begin
        A_id_V_0_data_out = A_id_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        A_keep_V_0_ack_out = 1'b1;
    end else begin
        A_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_keep_V_0_sel)) begin
        A_keep_V_0_data_out = A_keep_V_0_payload_B;
    end else begin
        A_keep_V_0_data_out = A_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        A_last_V_0_ack_out = 1'b1;
    end else begin
        A_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_last_V_0_sel)) begin
        A_last_V_0_data_out = A_last_V_0_payload_B;
    end else begin
        A_last_V_0_data_out = A_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        A_strb_V_0_ack_out = 1'b1;
    end else begin
        A_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_strb_V_0_sel)) begin
        A_strb_V_0_data_out = A_strb_V_0_payload_B;
    end else begin
        A_strb_V_0_data_out = A_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        A_user_V_0_ack_out = 1'b1;
    end else begin
        A_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == A_user_V_0_sel)) begin
        A_user_V_0_data_out = A_user_V_0_payload_B;
    end else begin
        A_user_V_0_data_out = A_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        B_TDATA_blk_n = B_data_V_1_state[1'd1];
    end else begin
        B_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == B_data_V_1_sel)) begin
        B_data_V_1_data_out = B_data_V_1_payload_B;
    end else begin
        B_data_V_1_data_out = B_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        B_data_V_1_vld_in = 1'b1;
    end else begin
        B_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_dest_V_1_sel)) begin
        B_dest_V_1_data_out = B_dest_V_1_payload_B;
    end else begin
        B_dest_V_1_data_out = B_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        B_dest_V_1_vld_in = 1'b1;
    end else begin
        B_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_id_V_1_sel)) begin
        B_id_V_1_data_out = B_id_V_1_payload_B;
    end else begin
        B_id_V_1_data_out = B_id_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        B_id_V_1_vld_in = 1'b1;
    end else begin
        B_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_keep_V_1_sel)) begin
        B_keep_V_1_data_out = B_keep_V_1_payload_B;
    end else begin
        B_keep_V_1_data_out = B_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        B_keep_V_1_vld_in = 1'b1;
    end else begin
        B_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_last_V_1_sel)) begin
        B_last_V_1_data_out = B_last_V_1_payload_B;
    end else begin
        B_last_V_1_data_out = B_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        B_last_V_1_vld_in = 1'b1;
    end else begin
        B_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_strb_V_1_sel)) begin
        B_strb_V_1_data_out = B_strb_V_1_payload_B;
    end else begin
        B_strb_V_1_data_out = B_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        B_strb_V_1_vld_in = 1'b1;
    end else begin
        B_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == B_user_V_1_sel)) begin
        B_user_V_1_data_out = B_user_V_1_payload_B;
    end else begin
        B_user_V_1_data_out = B_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
        B_user_V_1_vld_in = 1'b1;
    end else begin
        B_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_dest_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_data_V_1_ack_in)) & (exitcond_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == B_dest_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_data_V_1_ack_in)) & (exitcond_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((1'b0 == B_dest_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_data_V_1_ack_in)) & (exitcond_fu_116_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b0 == B_dest_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_data_V_1_ack_in)) & (exitcond_fu_116_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if ((~((1'b0 == B_data_V_1_ack_in) | (1'b0 == A_data_V_0_vld_out)) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == B_data_V_1_ack_in) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_TREADY = A_dest_V_0_state[1'd1];

assign A_data_V_0_ack_in = A_data_V_0_state[1'd1];

assign A_data_V_0_load_A = (~A_data_V_0_sel_wr & A_data_V_0_state_cmp_full);

assign A_data_V_0_load_B = (A_data_V_0_state_cmp_full & A_data_V_0_sel_wr);

assign A_data_V_0_sel = A_data_V_0_sel_rd;

assign A_data_V_0_state_cmp_full = ((A_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_data_V_0_vld_in = A_TVALID;

assign A_data_V_0_vld_out = A_data_V_0_state[1'd0];

assign A_dest_V_0_ack_in = A_dest_V_0_state[1'd1];

assign A_dest_V_0_load_A = (~A_dest_V_0_sel_wr & A_dest_V_0_state_cmp_full);

assign A_dest_V_0_load_B = (A_dest_V_0_state_cmp_full & A_dest_V_0_sel_wr);

assign A_dest_V_0_sel = A_dest_V_0_sel_rd;

assign A_dest_V_0_state_cmp_full = ((A_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_dest_V_0_vld_in = A_TVALID;

assign A_dest_V_0_vld_out = A_dest_V_0_state[1'd0];

assign A_id_V_0_ack_in = A_id_V_0_state[1'd1];

assign A_id_V_0_load_A = (~A_id_V_0_sel_wr & A_id_V_0_state_cmp_full);

assign A_id_V_0_load_B = (A_id_V_0_state_cmp_full & A_id_V_0_sel_wr);

assign A_id_V_0_sel = A_id_V_0_sel_rd;

assign A_id_V_0_state_cmp_full = ((A_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_id_V_0_vld_in = A_TVALID;

assign A_id_V_0_vld_out = A_id_V_0_state[1'd0];

assign A_keep_V_0_ack_in = A_keep_V_0_state[1'd1];

assign A_keep_V_0_load_A = (~A_keep_V_0_sel_wr & A_keep_V_0_state_cmp_full);

assign A_keep_V_0_load_B = (A_keep_V_0_state_cmp_full & A_keep_V_0_sel_wr);

assign A_keep_V_0_sel = A_keep_V_0_sel_rd;

assign A_keep_V_0_state_cmp_full = ((A_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_keep_V_0_vld_in = A_TVALID;

assign A_keep_V_0_vld_out = A_keep_V_0_state[1'd0];

assign A_last_V_0_ack_in = A_last_V_0_state[1'd1];

assign A_last_V_0_load_A = (~A_last_V_0_sel_wr & A_last_V_0_state_cmp_full);

assign A_last_V_0_load_B = (A_last_V_0_state_cmp_full & A_last_V_0_sel_wr);

assign A_last_V_0_sel = A_last_V_0_sel_rd;

assign A_last_V_0_state_cmp_full = ((A_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_last_V_0_vld_in = A_TVALID;

assign A_last_V_0_vld_out = A_last_V_0_state[1'd0];

assign A_strb_V_0_ack_in = A_strb_V_0_state[1'd1];

assign A_strb_V_0_load_A = (~A_strb_V_0_sel_wr & A_strb_V_0_state_cmp_full);

assign A_strb_V_0_load_B = (A_strb_V_0_state_cmp_full & A_strb_V_0_sel_wr);

assign A_strb_V_0_sel = A_strb_V_0_sel_rd;

assign A_strb_V_0_state_cmp_full = ((A_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_strb_V_0_vld_in = A_TVALID;

assign A_strb_V_0_vld_out = A_strb_V_0_state[1'd0];

assign A_user_V_0_ack_in = A_user_V_0_state[1'd1];

assign A_user_V_0_load_A = (~A_user_V_0_sel_wr & A_user_V_0_state_cmp_full);

assign A_user_V_0_load_B = (A_user_V_0_state_cmp_full & A_user_V_0_sel_wr);

assign A_user_V_0_sel = A_user_V_0_sel_rd;

assign A_user_V_0_state_cmp_full = ((A_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign A_user_V_0_vld_in = A_TVALID;

assign A_user_V_0_vld_out = A_user_V_0_state[1'd0];

assign B_TDATA = B_data_V_1_data_out;

assign B_TDEST = B_dest_V_1_data_out;

assign B_TID = B_id_V_1_data_out;

assign B_TKEEP = B_keep_V_1_data_out;

assign B_TLAST = B_last_V_1_data_out;

assign B_TSTRB = B_strb_V_1_data_out;

assign B_TUSER = B_user_V_1_data_out;

assign B_TVALID = B_dest_V_1_state[1'd0];

assign B_data_V_1_ack_in = B_data_V_1_state[1'd1];

assign B_data_V_1_ack_out = B_TREADY;

assign B_data_V_1_load_A = (~B_data_V_1_sel_wr & B_data_V_1_state_cmp_full);

assign B_data_V_1_load_B = (B_data_V_1_state_cmp_full & B_data_V_1_sel_wr);

assign B_data_V_1_sel = B_data_V_1_sel_rd;

assign B_data_V_1_state_cmp_full = ((B_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_data_V_1_vld_out = B_data_V_1_state[1'd0];

assign B_dest_V_1_ack_in = B_dest_V_1_state[1'd1];

assign B_dest_V_1_ack_out = B_TREADY;

assign B_dest_V_1_load_A = (~B_dest_V_1_sel_wr & B_dest_V_1_state_cmp_full);

assign B_dest_V_1_load_B = (B_dest_V_1_state_cmp_full & B_dest_V_1_sel_wr);

assign B_dest_V_1_sel = B_dest_V_1_sel_rd;

assign B_dest_V_1_state_cmp_full = ((B_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_dest_V_1_vld_out = B_dest_V_1_state[1'd0];

assign B_id_V_1_ack_in = B_id_V_1_state[1'd1];

assign B_id_V_1_ack_out = B_TREADY;

assign B_id_V_1_load_A = (~B_id_V_1_sel_wr & B_id_V_1_state_cmp_full);

assign B_id_V_1_load_B = (B_id_V_1_state_cmp_full & B_id_V_1_sel_wr);

assign B_id_V_1_sel = B_id_V_1_sel_rd;

assign B_id_V_1_state_cmp_full = ((B_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_id_V_1_vld_out = B_id_V_1_state[1'd0];

assign B_keep_V_1_ack_in = B_keep_V_1_state[1'd1];

assign B_keep_V_1_ack_out = B_TREADY;

assign B_keep_V_1_load_A = (~B_keep_V_1_sel_wr & B_keep_V_1_state_cmp_full);

assign B_keep_V_1_load_B = (B_keep_V_1_state_cmp_full & B_keep_V_1_sel_wr);

assign B_keep_V_1_sel = B_keep_V_1_sel_rd;

assign B_keep_V_1_state_cmp_full = ((B_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_keep_V_1_vld_out = B_keep_V_1_state[1'd0];

assign B_last_V_1_ack_in = B_last_V_1_state[1'd1];

assign B_last_V_1_ack_out = B_TREADY;

assign B_last_V_1_load_A = (~B_last_V_1_sel_wr & B_last_V_1_state_cmp_full);

assign B_last_V_1_load_B = (B_last_V_1_state_cmp_full & B_last_V_1_sel_wr);

assign B_last_V_1_sel = B_last_V_1_sel_rd;

assign B_last_V_1_state_cmp_full = ((B_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_last_V_1_vld_out = B_last_V_1_state[1'd0];

assign B_strb_V_1_ack_in = B_strb_V_1_state[1'd1];

assign B_strb_V_1_ack_out = B_TREADY;

assign B_strb_V_1_load_A = (~B_strb_V_1_sel_wr & B_strb_V_1_state_cmp_full);

assign B_strb_V_1_load_B = (B_strb_V_1_state_cmp_full & B_strb_V_1_sel_wr);

assign B_strb_V_1_sel = B_strb_V_1_sel_rd;

assign B_strb_V_1_state_cmp_full = ((B_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_strb_V_1_vld_out = B_strb_V_1_state[1'd0];

assign B_user_V_1_ack_in = B_user_V_1_state[1'd1];

assign B_user_V_1_ack_out = B_TREADY;

assign B_user_V_1_load_A = (~B_user_V_1_sel_wr & B_user_V_1_state_cmp_full);

assign B_user_V_1_load_B = (B_user_V_1_state_cmp_full & B_user_V_1_sel_wr);

assign B_user_V_1_sel = B_user_V_1_sel_rd;

assign B_user_V_1_state_cmp_full = ((B_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign B_user_V_1_vld_out = B_user_V_1_state[1'd0];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((1'b0 == B_dest_V_1_ack_in) | (1'b0 == B_id_V_1_ack_in) | (1'b0 == B_last_V_1_ack_in) | (1'b0 == B_user_V_1_ack_in) | (1'b0 == B_strb_V_1_ack_in) | (1'b0 == B_keep_V_1_ack_in) | (1'b0 == B_data_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_116_p2 = ((i_reg_105 == 6'd50) ? 1'b1 : 1'b0);

assign i_1_fu_122_p2 = (i_reg_105 + 6'd1);

assign val_assign_fu_162_p2 = (A_data_V_0_data_out + 32'd5);

endmodule //example
