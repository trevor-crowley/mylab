// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _example_HH_
#define _example_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "example_buff.h"
#include "example_a_m_axi.h"

namespace ap_rtl {

template<unsigned int C_M_AXI_A_ADDR_WIDTH = 32,
         unsigned int C_M_AXI_A_ID_WIDTH = 1,
         unsigned int C_M_AXI_A_AWUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_DATA_WIDTH = 32,
         unsigned int C_M_AXI_A_WUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_ARUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_RUSER_WIDTH = 1,
         unsigned int C_M_AXI_A_BUSER_WIDTH = 1>
struct example : public sc_module {
    // Port declarations 51
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > m_axi_a_AWVALID;
    sc_in< sc_logic > m_axi_a_AWREADY;
    sc_out< sc_uint<C_M_AXI_A_ADDR_WIDTH> > m_axi_a_AWADDR;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_AWID;
    sc_out< sc_lv<8> > m_axi_a_AWLEN;
    sc_out< sc_lv<3> > m_axi_a_AWSIZE;
    sc_out< sc_lv<2> > m_axi_a_AWBURST;
    sc_out< sc_lv<2> > m_axi_a_AWLOCK;
    sc_out< sc_lv<4> > m_axi_a_AWCACHE;
    sc_out< sc_lv<3> > m_axi_a_AWPROT;
    sc_out< sc_lv<4> > m_axi_a_AWQOS;
    sc_out< sc_lv<4> > m_axi_a_AWREGION;
    sc_out< sc_uint<C_M_AXI_A_AWUSER_WIDTH> > m_axi_a_AWUSER;
    sc_out< sc_logic > m_axi_a_WVALID;
    sc_in< sc_logic > m_axi_a_WREADY;
    sc_out< sc_uint<C_M_AXI_A_DATA_WIDTH> > m_axi_a_WDATA;
    sc_out< sc_uint<C_M_AXI_A_DATA_WIDTH/8> > m_axi_a_WSTRB;
    sc_out< sc_logic > m_axi_a_WLAST;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_WID;
    sc_out< sc_uint<C_M_AXI_A_WUSER_WIDTH> > m_axi_a_WUSER;
    sc_out< sc_logic > m_axi_a_ARVALID;
    sc_in< sc_logic > m_axi_a_ARREADY;
    sc_out< sc_uint<C_M_AXI_A_ADDR_WIDTH> > m_axi_a_ARADDR;
    sc_out< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_ARID;
    sc_out< sc_lv<8> > m_axi_a_ARLEN;
    sc_out< sc_lv<3> > m_axi_a_ARSIZE;
    sc_out< sc_lv<2> > m_axi_a_ARBURST;
    sc_out< sc_lv<2> > m_axi_a_ARLOCK;
    sc_out< sc_lv<4> > m_axi_a_ARCACHE;
    sc_out< sc_lv<3> > m_axi_a_ARPROT;
    sc_out< sc_lv<4> > m_axi_a_ARQOS;
    sc_out< sc_lv<4> > m_axi_a_ARREGION;
    sc_out< sc_uint<C_M_AXI_A_ARUSER_WIDTH> > m_axi_a_ARUSER;
    sc_in< sc_logic > m_axi_a_RVALID;
    sc_out< sc_logic > m_axi_a_RREADY;
    sc_in< sc_uint<C_M_AXI_A_DATA_WIDTH> > m_axi_a_RDATA;
    sc_in< sc_logic > m_axi_a_RLAST;
    sc_in< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_RID;
    sc_in< sc_uint<C_M_AXI_A_RUSER_WIDTH> > m_axi_a_RUSER;
    sc_in< sc_lv<2> > m_axi_a_RRESP;
    sc_in< sc_logic > m_axi_a_BVALID;
    sc_out< sc_logic > m_axi_a_BREADY;
    sc_in< sc_lv<2> > m_axi_a_BRESP;
    sc_in< sc_uint<C_M_AXI_A_ID_WIDTH> > m_axi_a_BID;
    sc_in< sc_uint<C_M_AXI_A_BUSER_WIDTH> > m_axi_a_BUSER;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_logic > ap_var_for_const7;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<1> > ap_var_for_const2;
    sc_signal< sc_lv<32> > ap_var_for_const3;
    sc_signal< sc_lv<3> > ap_var_for_const4;
    sc_signal< sc_lv<2> > ap_var_for_const5;
    sc_signal< sc_lv<4> > ap_var_for_const6;
    sc_signal< sc_lv<4> > ap_var_for_const8;


    // Module declarations
    example(sc_module_name name);
    SC_HAS_PROCESS(example);

    ~example();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    example_a_m_axi<32,32,5,16,16,16,16,C_M_AXI_A_ID_WIDTH,C_M_AXI_A_ADDR_WIDTH,C_M_AXI_A_DATA_WIDTH,C_M_AXI_A_AWUSER_WIDTH,C_M_AXI_A_ARUSER_WIDTH,C_M_AXI_A_WUSER_WIDTH,C_M_AXI_A_RUSER_WIDTH,C_M_AXI_A_BUSER_WIDTH,C_M_AXI_A_TARGET_ADDR,C_M_AXI_A_USER_VALUE,C_M_AXI_A_PROT_VALUE,C_M_AXI_A_CACHE_VALUE>* example_a_m_axi_U;
    example_buff* buff_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<17> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > a_blk_n_AR;
    sc_signal< sc_logic > a_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond1_reg_216;
    sc_signal< sc_logic > a_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<1> > exitcond_fu_175_p2;
    sc_signal< sc_logic > a_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > exitcond6_reg_244;
    sc_signal< sc_lv<1> > ap_reg_pp1_iter1_exitcond6_reg_244;
    sc_signal< sc_logic > a_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_logic > a_AWVALID;
    sc_signal< sc_logic > a_AWREADY;
    sc_signal< sc_logic > a_WVALID;
    sc_signal< sc_logic > a_WREADY;
    sc_signal< sc_logic > a_ARVALID;
    sc_signal< sc_logic > a_ARREADY;
    sc_signal< sc_logic > a_RVALID;
    sc_signal< sc_logic > a_RREADY;
    sc_signal< sc_lv<32> > a_RDATA;
    sc_signal< sc_logic > a_RLAST;
    sc_signal< sc_lv<1> > a_RID;
    sc_signal< sc_lv<1> > a_RUSER;
    sc_signal< sc_lv<2> > a_RRESP;
    sc_signal< sc_logic > a_BVALID;
    sc_signal< sc_logic > a_BREADY;
    sc_signal< sc_lv<2> > a_BRESP;
    sc_signal< sc_lv<1> > a_BID;
    sc_signal< sc_lv<1> > a_BUSER;
    sc_signal< sc_lv<6> > indvar_reg_124;
    sc_signal< sc_lv<6> > ap_reg_pp0_iter1_indvar_reg_124;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > indvar4_reg_147;
    sc_signal< sc_lv<1> > exitcond1_fu_158_p2;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond1_reg_216;
    sc_signal< sc_lv<6> > indvar_next_fu_164_p2;
    sc_signal< sc_lv<6> > indvar_next_reg_220;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > a_read_reg_225;
    sc_signal< sc_logic > ap_sig_ioackin_a_AWREADY;
    sc_signal< bool > ap_block_state12_io;
    sc_signal< sc_lv<6> > i_1_fu_181_p2;
    sc_signal< sc_lv<6> > i_1_reg_234;
    sc_signal< sc_lv<6> > buff_addr_1_reg_239;
    sc_signal< sc_lv<1> > exitcond6_fu_199_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state14_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state15_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state16_pp1_stage0_iter2;
    sc_signal< sc_logic > ap_sig_ioackin_a_WREADY;
    sc_signal< bool > ap_block_state16_io;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<6> > indvar_next5_fu_205_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<32> > buff_q0;
    sc_signal< sc_lv<32> > buff_load_1_reg_258;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state8;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state14;
    sc_signal< sc_lv<6> > buff_address0;
    sc_signal< sc_logic > buff_ce0;
    sc_signal< sc_logic > buff_we0;
    sc_signal< sc_lv<32> > buff_d0;
    sc_signal< sc_lv<6> > ap_phi_mux_indvar_phi_fu_128_p4;
    sc_signal< sc_lv<6> > i_reg_136;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<64> > tmp_fu_170_p1;
    sc_signal< sc_lv<64> > tmp_1_fu_187_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_211_p1;
    sc_signal< sc_logic > ap_reg_ioackin_a_ARREADY;
    sc_signal< sc_logic > ap_sig_ioackin_a_ARREADY;
    sc_signal< sc_logic > ap_reg_ioackin_a_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_a_WREADY;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<32> > tmp_2_fu_192_p2;
    sc_signal< sc_lv<17> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<17> ap_ST_fsm_state1;
    static const sc_lv<17> ap_ST_fsm_state2;
    static const sc_lv<17> ap_ST_fsm_state3;
    static const sc_lv<17> ap_ST_fsm_state4;
    static const sc_lv<17> ap_ST_fsm_state5;
    static const sc_lv<17> ap_ST_fsm_state6;
    static const sc_lv<17> ap_ST_fsm_state7;
    static const sc_lv<17> ap_ST_fsm_pp0_stage0;
    static const sc_lv<17> ap_ST_fsm_state11;
    static const sc_lv<17> ap_ST_fsm_state12;
    static const sc_lv<17> ap_ST_fsm_state13;
    static const sc_lv<17> ap_ST_fsm_pp1_stage0;
    static const sc_lv<17> ap_ST_fsm_state17;
    static const sc_lv<17> ap_ST_fsm_state18;
    static const sc_lv<17> ap_ST_fsm_state19;
    static const sc_lv<17> ap_ST_fsm_state20;
    static const sc_lv<17> ap_ST_fsm_state21;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_10;
    static const int C_M_AXI_A_TARGET_ADDR;
    static const int C_M_AXI_A_USER_VALUE;
    static const int C_M_AXI_A_PROT_VALUE;
    static const int C_M_AXI_A_CACHE_VALUE;
    static const int C_M_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_32;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<6> ap_const_lv6_32;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_64;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const7();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_var_for_const3();
    void thread_ap_var_for_const4();
    void thread_ap_var_for_const5();
    void thread_ap_var_for_const6();
    void thread_ap_var_for_const8();
    void thread_ap_clk_no_reset_();
    void thread_a_ARVALID();
    void thread_a_AWVALID();
    void thread_a_BREADY();
    void thread_a_RREADY();
    void thread_a_WVALID();
    void thread_a_blk_n_AR();
    void thread_a_blk_n_AW();
    void thread_a_blk_n_B();
    void thread_a_blk_n_R();
    void thread_a_blk_n_W();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp0_stage0_iter2();
    void thread_ap_block_state12_io();
    void thread_ap_block_state14_pp1_stage0_iter0();
    void thread_ap_block_state15_pp1_stage0_iter1();
    void thread_ap_block_state16_io();
    void thread_ap_block_state16_pp1_stage0_iter2();
    void thread_ap_block_state8_pp0_stage0_iter0();
    void thread_ap_block_state9_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state8();
    void thread_ap_condition_pp1_exit_iter0_state14();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_indvar_phi_fu_128_p4();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sig_ioackin_a_ARREADY();
    void thread_ap_sig_ioackin_a_AWREADY();
    void thread_ap_sig_ioackin_a_WREADY();
    void thread_buff_address0();
    void thread_buff_ce0();
    void thread_buff_d0();
    void thread_buff_we0();
    void thread_exitcond1_fu_158_p2();
    void thread_exitcond6_fu_199_p2();
    void thread_exitcond_fu_175_p2();
    void thread_i_1_fu_181_p2();
    void thread_indvar_next5_fu_205_p2();
    void thread_indvar_next_fu_164_p2();
    void thread_tmp_1_fu_187_p1();
    void thread_tmp_2_fu_192_p2();
    void thread_tmp_4_fu_211_p1();
    void thread_tmp_fu_170_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
