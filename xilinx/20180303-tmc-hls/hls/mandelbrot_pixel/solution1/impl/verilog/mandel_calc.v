// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mandel_calc,hls_ip_2017_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35tcpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.868250,HLS_SYN_LAT=766,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=303,HLS_SYN_LUT=392}" *)

module mandel_calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        re_V,
        im_V,
        count_out_V,
        count_out_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [17:0] re_V;
input  [17:0] im_V;
output  [7:0] count_out_V;
output   count_out_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg count_out_V_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] p_Val2_13_cast_fu_133_p1;
reg  signed [31:0] p_Val2_13_cast_reg_354;
wire  signed [31:0] p_Val2_8_cast_fu_145_p1;
wire  signed [38:0] tmp_15_cast_cast_fu_157_p1;
reg  signed [38:0] tmp_15_cast_cast_reg_365;
wire   [7:0] tmp_10_fu_167_p2;
reg   [7:0] tmp_10_reg_373;
wire    ap_CS_fsm_state2;
reg   [31:0] p_Val2_2_reg_378;
wire   [0:0] tmp_5_fu_161_p2;
reg   [0:0] tmp_reg_383;
reg   [31:0] p_Val2_6_reg_388;
reg   [0:0] tmp_12_reg_393;
wire  signed [35:0] r_V_1_fu_347_p2;
reg  signed [35:0] r_V_1_reg_398;
reg   [0:0] tmp_13_reg_403;
wire   [0:0] val_assign_fu_270_p2;
reg   [0:0] val_assign_reg_408;
wire    ap_CS_fsm_state3;
wire   [31:0] p_Val2_12_fu_305_p2;
reg   [31:0] p_Val2_12_reg_413;
wire   [31:0] p_Val2_14_fu_317_p2;
reg   [31:0] p_Val2_14_reg_418;
wire   [7:0] tmp_6_fu_325_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] p_Val2_4_reg_83;
reg   [31:0] p_Val2_s_reg_92;
reg   [7:0] count_V_reg_101;
reg   [7:0] t_V_reg_114;
wire   [29:0] p_Val2_13_fu_125_p3;
wire   [29:0] p_Val2_8_fu_137_p3;
wire   [33:0] tmp_2_fu_149_p3;
wire   [17:0] tmp_7_fu_173_p4;
wire  signed [35:0] p_Val2_1_fu_331_p2;
wire   [17:0] tmp_3_fu_203_p4;
wire  signed [35:0] p_Val2_5_fu_339_p2;
wire   [31:0] tmp_8_fu_240_p1;
wire   [31:0] tmp_9_fu_248_p1;
wire   [31:0] p_Val2_3_fu_243_p2;
wire   [31:0] p_Val2_7_fu_251_p2;
wire  signed [32:0] tmp_s_fu_256_p1;
wire  signed [32:0] tmp_1_fu_260_p1;
wire   [32:0] r_V_fu_264_p2;
wire   [36:0] p_Val2_9_fu_276_p3;
wire   [38:0] tmp_10_cast_fu_283_p1;
wire   [38:0] p_Val2_10_fu_287_p2;
wire   [31:0] p_Val2_11_fu_292_p4;
wire   [31:0] tmp_11_fu_302_p1;
wire   [31:0] p_Val2_s_8_fu_311_p2;
wire   [7:0] tmp_4_fu_322_p1;
wire  signed [17:0] p_Val2_1_fu_331_p0;
wire  signed [35:0] OP1_V_fu_183_p1;
wire  signed [17:0] p_Val2_1_fu_331_p1;
wire  signed [17:0] p_Val2_5_fu_339_p0;
wire  signed [35:0] OP1_V_1_fu_213_p1;
wire  signed [17:0] p_Val2_5_fu_339_p1;
wire  signed [17:0] r_V_1_fu_347_p0;
wire  signed [17:0] r_V_1_fu_347_p1;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

mandel_calc_mul_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mandel_calc_mul_mbkb_U1(
    .din0(p_Val2_1_fu_331_p0),
    .din1(p_Val2_1_fu_331_p1),
    .dout(p_Val2_1_fu_331_p2)
);

mandel_calc_mul_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mandel_calc_mul_mbkb_U2(
    .din0(p_Val2_5_fu_339_p0),
    .din1(p_Val2_5_fu_339_p1),
    .dout(p_Val2_5_fu_339_p2)
);

mandel_calc_mul_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 36 ))
mandel_calc_mul_mbkb_U3(
    .din0(r_V_1_fu_347_p0),
    .din1(r_V_1_fu_347_p1),
    .dout(r_V_1_fu_347_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        count_V_reg_101 <= tmp_6_fu_325_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        count_V_reg_101 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_4_reg_83 <= p_Val2_12_reg_413;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_4_reg_83 <= p_Val2_8_cast_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_s_reg_92 <= p_Val2_14_reg_418;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_s_reg_92 <= p_Val2_13_cast_fu_133_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        t_V_reg_114 <= tmp_10_reg_373;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_114 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_Val2_12_reg_413 <= p_Val2_12_fu_305_p2;
        p_Val2_14_reg_418 <= p_Val2_14_fu_317_p2;
        val_assign_reg_408 <= val_assign_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_Val2_13_cast_reg_354[31 : 12] <= p_Val2_13_cast_fu_133_p1[31 : 12];
        tmp_15_cast_cast_reg_365[38 : 16] <= tmp_15_cast_cast_fu_157_p1[38 : 16];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_161_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_2_reg_378 <= {{p_Val2_1_fu_331_p2[35:4]}};
        p_Val2_6_reg_388 <= {{p_Val2_5_fu_339_p2[35:4]}};
        r_V_1_reg_398 <= r_V_1_fu_347_p2;
        tmp_12_reg_393 <= p_Val2_5_fu_339_p2[32'd3];
        tmp_13_reg_403 <= r_V_1_fu_347_p2[32'd2];
        tmp_reg_383 <= p_Val2_1_fu_331_p2[32'd3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_10_reg_373 <= tmp_10_fu_167_p2;
    end
end

always @ (*) begin
    if (((tmp_5_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_5_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        count_out_V_ap_vld = 1'b1;
    end else begin
        count_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_5_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_fu_213_p1 = $signed(tmp_3_fu_203_p4);

assign OP1_V_fu_183_p1 = $signed(tmp_7_fu_173_p4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign count_out_V = count_V_reg_101;

assign p_Val2_10_fu_287_p2 = ($signed(tmp_15_cast_cast_reg_365) + $signed(tmp_10_cast_fu_283_p1));

assign p_Val2_11_fu_292_p4 = {{p_Val2_10_fu_287_p2[35:4]}};

assign p_Val2_12_fu_305_p2 = (p_Val2_11_fu_292_p4 + tmp_11_fu_302_p1);

assign p_Val2_13_cast_fu_133_p1 = $signed(p_Val2_13_fu_125_p3);

assign p_Val2_13_fu_125_p3 = {{re_V}, {12'd0}};

assign p_Val2_14_fu_317_p2 = ($signed(p_Val2_s_8_fu_311_p2) + $signed(p_Val2_13_cast_reg_354));

assign p_Val2_1_fu_331_p0 = OP1_V_fu_183_p1;

assign p_Val2_1_fu_331_p1 = OP1_V_fu_183_p1;

assign p_Val2_3_fu_243_p2 = (p_Val2_2_reg_378 + tmp_8_fu_240_p1);

assign p_Val2_5_fu_339_p0 = OP1_V_1_fu_213_p1;

assign p_Val2_5_fu_339_p1 = OP1_V_1_fu_213_p1;

assign p_Val2_7_fu_251_p2 = (p_Val2_6_reg_388 + tmp_9_fu_248_p1);

assign p_Val2_8_cast_fu_145_p1 = $signed(p_Val2_8_fu_137_p3);

assign p_Val2_8_fu_137_p3 = {{im_V}, {12'd0}};

assign p_Val2_9_fu_276_p3 = {{r_V_1_reg_398}, {1'd0}};

assign p_Val2_s_8_fu_311_p2 = (p_Val2_3_fu_243_p2 - p_Val2_7_fu_251_p2);

assign r_V_1_fu_347_p0 = OP1_V_fu_183_p1;

assign r_V_1_fu_347_p1 = OP1_V_1_fu_213_p1;

assign r_V_fu_264_p2 = ($signed(tmp_s_fu_256_p1) + $signed(tmp_1_fu_260_p1));

assign tmp_10_cast_fu_283_p1 = p_Val2_9_fu_276_p3;

assign tmp_10_fu_167_p2 = (t_V_reg_114 + 8'd1);

assign tmp_11_fu_302_p1 = tmp_13_reg_403;

assign tmp_15_cast_cast_fu_157_p1 = $signed(tmp_2_fu_149_p3);

assign tmp_1_fu_260_p1 = $signed(p_Val2_7_fu_251_p2);

assign tmp_2_fu_149_p3 = {{im_V}, {16'd0}};

assign tmp_3_fu_203_p4 = {{p_Val2_4_reg_83[29:12]}};

assign tmp_4_fu_322_p1 = val_assign_reg_408;

assign tmp_5_fu_161_p2 = ((t_V_reg_114 == 8'd255) ? 1'b1 : 1'b0);

assign tmp_6_fu_325_p2 = (tmp_4_fu_322_p1 + count_V_reg_101);

assign tmp_7_fu_173_p4 = {{p_Val2_s_reg_92[29:12]}};

assign tmp_8_fu_240_p1 = tmp_reg_383;

assign tmp_9_fu_248_p1 = tmp_12_reg_393;

assign tmp_s_fu_256_p1 = $signed(p_Val2_3_fu_243_p2);

assign val_assign_fu_270_p2 = (($signed(r_V_fu_264_p2) < $signed(33'd1073741825)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    p_Val2_13_cast_reg_354[11:0] <= 12'b000000000000;
    tmp_15_cast_cast_reg_365[15:0] <= 16'b0000000000000000;
end

endmodule //mandel_calc
